[
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.1 Why do we use R?",
        "code": "create a basic plot of two vectors in R"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.1 Why do we use R?",
        "code": "Here\u2019s an example of how to create a basic plot of two vectors in R:\n\n# Define two vectors\nx <- c(1, 2, 3, 4, 5)\ny <- c(2, 4, 6, 8, 10)\n\n# Plot the vectors\nplot(x, y, type = \"o\", col = \"blue\", \n     main = \"Basic Plot of Two Vectors\", \n     xlab = \"X Values\", ylab = \"Y Values\")\n\n# Add grid lines\ngrid()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.1 Why do we use R?",
        "code": "create a basic plot of two vectors in R"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.1 Why do we use R?",
        "code": "Sure! Here's a simple example of how to create a basic plot of two vectors in R:\n\n# Create two vectors\nx <- c(1, 2, 3, 4, 5)\ny <- c(2, 4, 6, 8, 10)\n\n# Create a basic plot\nplot(x, y, type=\"b\", col=\"blue\", main=\"Basic Plot of Vectors\", xlab=\"X Axis\", ylab=\"Y Axis\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.5 Annotating code",
        "code": "## the next chuck of code will print on the screen \"DO NOT FORGET TO ANNOTATE YOUR CODE\"\ncat(\"\\nDO NOT FORGET TO ANNOTATE YOUR CODE\\n\")\n#DO NOT FORGET TO ANNOTATE YOUR CODE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.6 Defining a working directory in R",
        "code": "## Print my current working directory\ngetwd()\n#[1] \"/Users/santosj\" "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.6 Defining a working directory in R",
        "code": "getwd()\n#[1] \"/Users/santosj/Desktop/Teach_R/my_working_directory\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.6 Defining a working directory in R",
        "code": "~/Desktop/Teach_R/my_working_directory\n#Error: unexpected '/' in \"~/\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.6 Defining a working directory in R",
        "code": "## Change my working directory to the following path\nsetwd(\"~/Desktop/Teach_R/my_working_directory\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.6 Defining a working directory in R",
        "code": "getwd()\n#[1] \"/Users/santosj/Desktop/Teach_R/my_working_directory\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.6 Defining a working directory in R",
        "code": "setwd(\"C:\\Users\\myPC\\Desktop\\my_working_directory\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.6 Defining a working directory in R",
        "code": "setwd(\"C:\\Users\\myPC\\Desktop\\my_working_directory\")\n#Error: '\\U' used without hex digits in character string starting \"\"C:\\U\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.6 Defining a working directory in R",
        "code": "setwd(\"C:/Users/myPC/Desktop/my_working_directory\")\ngetwd()\n#[1] \"C:/Users/myPC/Desktop/my_working_directory\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-started-with-r.html",
        "section": "Session 1 \u2013 Getting Started with R",
        "subsection": "1.6 Defining a working directory in R",
        "code": "setwd(\"C:\\\\Users\\\\myPC\\\\Desktop\\\\my_working_directory\")\ngetwd()\n#[1] \"C:/Users/myPC/Desktop/my_working_directory\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.1 Your first session",
        "code": "1 + 2\n#[1] 3"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.1 Your first session",
        "code": "log(10)\n#[1] 2.302585"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.1 Your first session",
        "code": "seq(1:100)\n#[1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19\n#[20]  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38\n#[39]  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57\n#[58]  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76\n#[77]  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95\n#[96]  96  97  98  99 100"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.1 Your first session",
        "code": "# Same result as before \nseq(from = 1, to = 100, by =1)\n# [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19\n# [20]  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38\n# [39]  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57\n# [58]  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76\n# [77]  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95\n# [96]  96  97  98  99 100"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.1 Your first session",
        "code": " seq(from = 1, to = 100, by =5)\n #[1]  1  6 11 16 21 26 31 36 41 46 51 56 61 66 71 76 81 86 91 96"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.1 Your first session",
        "code": "seq(from = 1, to  100, by =5)\n#Error: unexpected numeric constant in \"seq(from = 1, to  100\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.1 Your first session",
        "code": "my_vector <- c(2,4,1,12,30,5,6)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.1 Your first session",
        "code": "my_vector\n#[1]  2  4  1 12 30  5  6 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.1 Your first session",
        "code": "str(my_vector)\n#num [1:7] 2 4 1 12 30 5 6 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "my_vector <- rnorm(n = 1000, mean = 50, sd = 25)\n# I omitted the result because it has 1000 numbers\nmy_vector"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "str(my_vector)\n#num [1:1000] 50.3 60.3 20.4 44.1 43.8 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "mean(my_vector)\n#[1] 50.29036\nsd(my_vector)\n#[1] 25.05207"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "# get help about function 'mean'\n?mean\n# another way to ask help\nhelp(mean)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "mean {base}\n\nThe long name of the mean() function, in this case: Arithmetic Mean. \n\nA description of the mean() function, in this case: \"Generic function for the (trimmed) arithmetic mean\"\n\nA usage example:\n\nmean(x, ...)\n\n## Default S3 method:\nmean(x, trim = 0, na.rm = FALSE, ...)\n\nAn explanation of its arguments:\n\nx -- An R object. Currently there are methods for numeric/logical vectors and date, date-time and time \n     interval objects. Complex vectors are allowed for trim = 0, only.\n\ntrim -- the fraction (0 to 0.5) of observations to be trimmed from each end of x before the mean is computed. \n        Values of trim outside that range are taken as the nearest endpoint.\n\nna.rm -- a logical value indicating whether NA values should be stripped before the computation \n         proceeds.\n\n... -- further arguments passed to or from other methods."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "x <- c(0:10, 50)\nxm <- mean(x)\nc(xm, mean(x, trim = 0.10))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "# Arithmetic Mean\nmean(my_vector) \n# Standard Deviation\nsd (my_vector) \n# Variance\nvar (my_vector) \n# Median Value\nmedian (my_vector) \n# Maximum Value\nmax (my_vector)\n# Minimum Value \nmin (my_vector)\n# Sums values in vector\nsum(my_vector)\n# Provides the number of elements in the vector \nlength(my_vector) \n# Round numbers to of elements in the vector to number of digits (in this case to two decimal points)\nround(3.1415, digits = 2)\n# Absolute value\nabs(my_vector)                              \n# Square root\nsqrt(my_vector)\n# Natural logarithm                          \nlog(my_vector)\n# Common (base 10) logarithm                              \nlog10(my_vector)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "1:10\n#[1]  1  2  3  4  5  6  7  8  9 10\nmy_numbers <- 1:10\nmy_numbers\n#[1]  1  2  3  4  5  6  7  8  9 10\nprint(my_numbers)\n#[1]  1  2  3  4  5  6  7  8  9 10"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "my_names <- c(\"juan\", \"c\", \"santos\", 123)\nmy_names\n#[1] \"juan\"   \"c\"      \"santos\" \"123\"\nprint(my_names)\n#[1] \"juan\"   \"c\"      \"santos\" \"123\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "str(my_names)\n#chr [1:4] \"juan\" \"c\" \"santos\" \"123\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "my_matrix <- matrix(c(1,2,3,4,5,6), 3,2)\nprint(my_matrix)\n#     [,1] [,2]\n#[1,]    1    4\n#[2,]    2    5\n#[3,]    3    6"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "print(my_numbers, my_names, my_matrix)\n#Error in print.default(my_numbers, my_names, my_matrix) : \n#  invalid 'digits' argument\n#In addition: Warning message:\n#In print.default(my_numbers, my_names, my_matrix) :\n#  NAs introduced by coercion"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "cat(my_numbers,my_names)\n#1 2 3 4 5 6 7 8 9 10 juan c santos 123"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "cat(\"\\nPrint the two vectors my_numbers and my_names separed by *** \",\n      my_numbers,\n      \" *** \",\n      my_names)\n#Print the two vectors my_numbers and my_names separed by ***  1 2 3 4 5 6 7 8 9 10  ***  juan c santos 123"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "ls()\n#[1] \"my_matrix\"  \"my_names\"   \"my_numbers\" \"my_vector\" "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "ls.str()\n#my_matrix :  num [1:3, 1:2] 1 2 3 4 5 6\n#my_names :  chr [1:3] \"juan\" \"c\" \"santos\" \"123\"\n#my_numbers :  int [1:10] 1 2 3 4 5 6 7 8 9 10\n#my_vector :  num [1:1000] 50.3 60.3 20.4 44.1 43.8 ... "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.2 Doing some base functions and getting help",
        "code": "my_names\n#[1] \"juan\"   \"c\"      \"santos\" \"123\"\nrm(\"my_names\")\nmy_names\n#Error: object 'my_names' not found\n#In this case the object \"my_names\" has been removed from the workspace"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.3 Functions between two or more vectors",
        "code": "# we create two vector\nmy_vector_A <- c(1,3,4,5,6,7,9,10)\nmy_vector_B <- c(1,3,5,7,9)\n\n# get union of these two vectors (i.e., all values, not repeated, in these two vectors)\nunion(my_vector_A,my_vector_B)\n#[1]  1  3  4  5  6  7  9 10\n\n# get intersect of these two vectors (i.e., values in common between both vectors)\nintersect(my_vector_A,my_vector_B)\n#[1] 1 3 5 7 9\n\n# get values unique to one of the vectors.\nsetdiff(my_vector_A,my_vector_B)# unique to my_vector_A\n#[1]  4  6 10\nsetdiff(my_vector_B,my_vector_A)# unique to my_vector_B\n#numeric(0) -- in this case there are not unique elements for my_vector_B\n\n# Are the elements of these two vectors identical\nsetequal(my_vector_A,my_vector_B)\n#[1] FALSE\n\n# Is an element present in a vector?\nis.element(6, my_vector_A) # 6 is present in my_vector_A\n#[1] TRUE\nis.element(6, my_vector_B) # 6 is NOT present in my_vector_B\n#[1] FALSE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.3 Functions between two or more vectors",
        "code": "my_vector2 <- c(1:1000)\n# get the correlation between two vectors\ncor(my_vector, my_vector2) # Correlation between two numeric vectors\n#[1] -0.001297859\n\n# get the covariance between two vectors\ncov(my_vector, my_vector2) # Covariance between two numeric vectors\n#[1] -9.390692"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "search()\n#[1] \".GlobalEnv\"        \"tools:RGUI\"        \"package:stats\"     \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n#[7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"         \"package:base\" "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "install.packages(\"reshape2\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "install.packages(\"reshape2\")\n#--- Please select a CRAN mirror for use in this session ---\n#trying URL 'https://cloud.r-project.org/bin/macosx/el-capitan/contrib/3.6/reshape2_1.4.4.tgz'\n#Content type 'application/x-gzip' length 333148 bytes (325 KB)\n#==================================================\n#downloaded 325 KB\n\n#The downloaded binary packages are in\n#   /var/folders/vx/rjmrkyz566zf4khl9xjhkqyr0000gp/T//RtmpwxVTvt/downloaded_packages"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "library(reshape)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "## if the package name is misspelled or does not exist in CRAN then:\ninstall.packages(\"my_madeup_package\")\n# Warning message:\n# package \u2018my_madeup_package\u2019 is not available (for R version 3.6.2) "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "library(my_madeup_package)\n# Error in library(my_madeup_package) : \n# there is no package called \u2018my_madeup_package\u2019"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "install.packages(\"devtools\")\nlibrary(devtools)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "install_version(\"FlexParamCurve\", version = \"1.4.3\", repos = \"http://cran.us.r-project.org\")\n#Downloading package from url: http://cran.us.r-project.org/src/contrib/Archive/FlexParamCurve/FlexParamCurve_1.4-3.tar.gz\n#* installing *source* package \u2018FlexParamCurve\u2019 ...\n#** package \u2018FlexParamCurve\u2019 successfully unpacked and MD5 sums checked\n#** using staged installation\n#** R\n#** data\n#** byte-compile and prepare package for lazy loading\n#** help\n#*** installing help indices\n#** building package indices\n#** testing if installed package can be loaded from temporary location\n#** testing if installed package can be loaded from final location\n#** testing if installed package keeps a record of temporary installation path\n#* DONE (FlexParamCurve)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "library(devtools)\npackageVersion(\"devtools\")\n#[1] \u20182.4.5\u2019\nlibrary(FlexParamCurve)\n#Loading required package: nlme\npackageVersion(\"FlexParamCurve\")\n#[1] \u20181.4.3\u2019"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "packageDescription(\"devtools\")\n#Package: devtools\n#Title: Tools to Make Developing R Packages Easier\n#Version: 2.4.5\n#Authors@R: c( person(\"Hadley\", \"Wickham\", role = \"aut\"), person(\"Jim\", \"Hester\", role = \"aut\"), person(\"Winston\", \"Chang\", role = \"aut\"), person(\"Jennifer\", \"Bryan\",\n#                  , \"jenny@rstudio.com\", role = c(\"aut\", \"cre\"), comment = c(ORCID = \"0000-0002-6983-2759\")), person(\"RStudio\", role = c(\"cph\", \"fnd\")) )\n#Description: Collection of package development tools.\n#License: MIT + file LICENSE\n#URL: https://devtools.r-lib.org/, https://github.com/r-lib/devtools\n#BugReports: https://github.com/r-lib/devtools/issues\n#Depends: R (>= 3.0.2), usethis (>= 2.1.6)\n#Imports: cli (>= 3.3.0), desc (>= 1.4.1), ellipsis (>= 0.3.2), fs (>= 1.5.2), lifecycle (>= 1.0.1), memoise (>= 2.0.1), miniUI (>= 0.1.1.1), pkgbuild (>= 1.3.1),\n#                  pkgdown (>= 2.0.6), pkgload (>= 1.3.0), profvis (>= 0.3.7), rcmdcheck (>= 1.4.0), remotes (>= 2.4.2), rlang (>= 1.0.4), roxygen2 (>= 7.2.1),\n#                  rversions (>= 2.1.1), sessioninfo (>= 1.2.2), stats, testthat (>= 3.1.5), tools, urlchecker (>= 1.0.1), utils, withr (>= 2.5.0)\n#Suggests: BiocManager (>= 1.30.18), callr (>= 3.7.1), covr (>= 3.5.1), curl (>= 4.3.2), digest (>= 0.6.29), DT (>= 0.23), foghorn (>= 1.4.2), gh (>= 1.3.0), gmailr\n#                  (>= 1.0.1), httr (>= 1.4.3), knitr (>= 1.39), lintr (>= 3.0.0), MASS, mockery (>= 0.4.3), pingr (>= 2.0.1), rhub (>= 1.1.1), rmarkdown (>= 2.14),\n#                  rstudioapi (>= 0.13), spelling (>= 2.2)\n#VignetteBuilder: knitr\n#Config/Needs/website: tidyverse/tidytemplate\n#Encoding: UTF-8\n#Language: en-US\n#RoxygenNote: 7.2.1\n#Config/testthat/edition: 3\n#NeedsCompilation: no\n#Packaged: 2022-10-11 16:13:16 UTC; jenny\n#Author: Hadley Wickham [aut], Jim Hester [aut], Winston Chang [aut], Jennifer Bryan [aut, cre] (<https://orcid.org/0000-0002-6983-2759>), RStudio [cph, fnd]\n#Maintainer: Jennifer Bryan <jenny@rstudio.com>\n#Repository: CRAN\n#Date/Publication: 2022-10-11 17:12:36 UTC\n#Built: R 4.1.2; ; 2022-10-12 11:12:20 UTC; unix\n#\n#-- File: /Library/Frameworks/R.framework/Versions/4.1/Resources/library/devtools/Meta/package.rds "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "library(devtools)\ncitation(\"devtools\")\n#To cite package \u2018devtools\u2019 in publications use:\n#\n#  Hadley Wickham, Jim Hester, Winston Chang and Jennifer Bryan (2022). devtools: Tools to Make Developing R Packages Easier. R package version 2.4.5.\n#  https://CRAN.R-project.org/package=devtools\n#\n#A BibTeX entry for LaTeX users is\n#\n#  @Manual{,\n#    title = {devtools: Tools to Make Developing R Packages Easier},\n#    author = {Hadley Wickham and Jim Hester and Winston Chang and Jennifer Bryan},\n#    year = {2022},\n#    note = {R package version 2.4.5},\n#    url = {https://CRAN.R-project.org/package=devtools},\n#  }\n\nlibrary(FlexParamCurve)\n#Loading required package: nlme\ncitation(\"FlexParamCurve\")\n#To cite package \u2018FlexParamCurve\u2019 in publications use:\n#\n#  Stephen Oswald (2012). FlexParamCurve: Tools to Fit Flexible Parametric Curves. R package version 1.4-3. https://CRAN.R-project.org/package=FlexParamCurve\n#\n#A BibTeX entry for LaTeX users is\n#\n#  @Manual{,\n#    title = {FlexParamCurve: Tools to Fit Flexible Parametric Curves},\n#    author = {Stephen Oswald},\n#    year = {2012},\n#    note = {R package version 1.4-3},\n#    url = {https://CRAN.R-project.org/package=FlexParamCurve},\n#  }\n\n#ATTENTION: This citation information has been auto-generated from the package DESCRIPTION file and may need manual editing, see \u2018help(\"citation\")\u2019."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "## test if 'BiocManager' is installed\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) {install.packages(\"BiocManager\")}"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "BiocManager::install(\"DECIPHER\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "Update all/some/none? [a/s/n]: n"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/using-r-installing-packages-and-importingexporting-data.html",
        "section": "Session 2 \u2013 Using R, Installing Packages and Importing/Exporting Data",
        "subsection": "2.6 Installing packages",
        "code": "library(devtools)\n# install_github(\"github_handler/package_name\"\n# installing httr for web API (application programming interface) like donwload of data from the web\ninstall_github(\"r-lib/httr\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": null,
        "code": "# Here is an exemplar dataset to be used here:\n\nsetwd(\"~/Desktop/Teach_R/class_datasets\")\n\nmy_imported_dataset <- read.table (file = \"~/Desktop/Teach_R/class_datasets/mtcars2_file_tab.txt\", \n                                    header = TRUE, \n                                       sep = \"\\t\",\n                          stringsAsFactors = FALSE)\n\n## This dataset will be imported as a data.frame\nstr(my_imported_dataset)\n#'data.frame':  32 obs. of  12 variables:\n# $ cars: chr  \"Mazda_RX4\" \"Mazda_RX4_Wag\" \"Datsun_710\" \"Hornet_4_Drive\" ...\n# $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n# $ cyl : int  6 6 4 6 8 6 8 4 4 6 ...\n# $ disp: num  160 160 108 258 360 ...\n# $ hp  : int  110 110 93 110 175 105 245 62 95 123 ...\n# $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n# $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n# $ qsec: num  16.5 17 18.6 19.4 17 ...\n# $ vs  : int  0 0 1 1 0 1 0 1 1 1 ...\n# $ am  : int  1 1 1 0 0 0 0 0 0 0 ...\n# $ gear: int  4 4 4 3 3 3 3 4 4 4 ...\n# $ carb: int  4 4 1 1 2 1 4 2 2 4 ...\n\nhead(my_imported_dataset)\n#               cars  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#1         Mazda_RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#2     Mazda_RX4_Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#3        Datsun_710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#4    Hornet_4_Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#5 Hornet_Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numeric_vector <- c(1,3,45,56,1)\nmy_numeric_vector\n#[1]  1  3 45 56  1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "# Notice that get the data of one column you add the '$' follow by the name of column'  \nmy_numeric_car_displacement <- my_imported_dataset$disp\nmy_numeric_car_displacement\n#[1] 160.0 160.0 108.0 258.0 360.0 225.0 360.0 146.7 140.8 167.6 167.6 275.8 275.8 275.8 472.0 460.0 440.0  78.7  75.7  71.1 120.1\n#[22] 318.0 304.0 350.0 400.0  79.0 120.3  95.1 351.0 145.0 301.0 121.0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "str(my_numeric_vector)\n#num [1:5] 1 3 45 56 1\nstr(my_numeric_car_displacement)\n#num [1:32] 160 160 108 258 360 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "class(my_numeric_vector)\n#[1] \"numeric\"\nclass(my_numeric_car_displacement)\n#[1] \"numeric\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_character_vector <- c(\"my\", \"bioinformatics\", \"class\")\nmy_character_vector\n#[1] \"my\"             \"bioinformatics\" \"class\"         \nstr(my_character_vector)\n#chr [1:3] \"my\" \"bioinformatics\" \"class\"\nclass(my_character_vector)\n#[1] \"character\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_character_car_names <- my_imported_dataset$cars\nmy_character_car_names\n#[1] \"Mazda_RX4\"           \"Mazda_RX4_Wag\"       \"Datsun_710\"          \"Hornet_4_Drive\"      \"Hornet_Sportabout\"  \n# [6] \"Valiant\"             \"Duster_360\"          \"Merc_240D\"           \"Merc_230\"            \"Merc_280\"           \n#[11] \"Merc_280C\"           \"Merc_450SE\"          \"Merc_450SL\"          \"Merc_450SLC\"         \"Cadillac_Fleetwood\" \n#[16] \"Lincoln_Continental\" \"Chrysler_Imperial\"   \"Fiat_128\"            \"Honda_Civic\"         \"Toyota_Corolla\"     \n#[21] \"Toyota_Corona\"       \"Dodge_Challenger\"    \"AMC_Javelin\"         \"Camaro_Z28\"          \"Pontiac_Firebird\"   \n#[26] \"Fiat_X1_9\"           \"Porsche_914_2\"       \"Lotus_Europa\"        \"Ford_Pantera_L\"      \"Ferrari_Dino\"       \n#[31] \"Maserati_Bora\"       \"Volvo_142E\" \nstr(my_character_car_names)\n#chr [1:32] \"Mazda_RX4\" \"Mazda_RX4_Wag\" \"Datsun_710\" \"Hornet_4_Drive\" \"Hornet_Sportabout\" \"Valiant\" \"Duster_360\" \"Merc_240D\" ...\nclass(my_character_car_names)\n#[1] \"character\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_mix_vector <- c(\"my\", \"bioinformatics\", \"class\", 3.141593)\nmy_mix_vector\n#[1] \"my\"             \"bioinformatics\" \"class\"          \"3.141593\"      \nstr(my_mix_vector)\n#chr [1:4] \"my\" \"bioinformatics\" \"class\" \"3.141593\"\nclass(my_mix_vector)\n#[1] \"character\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_factor_vector <- c(\"white\", \"black\", \"white\", \"white\", \"black\")\nmy_factor_vector <- factor(my_factor_vector)\nmy_factor_vector\n#[1] white black white white black\n#Levels: black white\nstr(my_factor_vector)\n#Factor w/ 2 levels \"black\",\"white\": 2 1 2 2 1\nclass(my_factor_vector)\n#[1] \"factor\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_factor_vector <- c(1,0,1,1,1,0)\nmy_factor_vector <- factor(my_factor_vector)\nmy_factor_vector\n#[1] 1 0 1 1 1 0\n#Levels: 0 1\nstr(my_factor_vector)\n#Factor w/ 2 levels \"0\",\"1\": 2 1 2 2 2 1\nclass(my_factor_vector)\n#[1] \"factor\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_vs_vector <- my_imported_dataset$vs\nmy_vs_vector\n#[1] 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1\nstr(my_vs_vector)\n#int [1:32] 0 0 1 1 0 1 0 1 1 1 ...\n## This is a integer vector (like a numeric vector), we can transform this into a factor vector\nmy_vs_vector_as_factor <- factor(my_vs_vector)\nmy_vs_vector_as_factor\n#[1] 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0 0 1\n#Levels: 0 1\nstr(my_vs_vector_as_factor)\n#Factor w/ 2 levels \"0\",\"1\": 1 1 2 2 1 2 1 2 2 2 ...\n\n## We can add this factor vector to our data.frame \nmy_imported_dataset$vs_factor <- my_vs_vector_as_factor\nhead(my_imported_dataset)\n#               cars  mpg cyl disp  hp drat    wt  qsec vs am gear carb vs_factor\n#1         Mazda_RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4         0\n#2     Mazda_RX4_Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4         0\n#3        Datsun_710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1         1\n#4    Hornet_4_Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1         1\n#5 Hornet_Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2         0\n#6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1         1\nstr(my_imported_dataset)\n#'data.frame':  32 obs. of  13 variables:\n# $ cars     : chr  \"Mazda_RX4\" \"Mazda_RX4_Wag\" \"Datsun_710\" \"Hornet_4_Drive\" ...\n# $ mpg      : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n# $ cyl      : int  6 6 4 6 8 6 8 4 4 6 ...\n# $ disp     : num  160 160 108 258 360 ...\n# $ hp       : int  110 110 93 110 175 105 245 62 95 123 ...\n# $ drat     : num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n# $ wt       : num  2.62 2.88 2.32 3.21 3.44 ...\n# $ qsec     : num  16.5 17 18.6 19.4 17 ...\n# $ vs       : int  0 0 1 1 0 1 0 1 1 1 ...\n# $ am       : int  1 1 1 0 0 0 0 0 0 0 ...\n# $ gear     : int  4 4 4 3 3 3 3 4 4 4 ...\n# $ carb     : int  4 4 1 1 2 1 4 2 2 4 ...\n# $ vs_factor: Factor w/ 2 levels \"0\",\"1\": 1 1 2 2 1 2 1 2 2 2 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "# a numeric vector with number from 1 to 10\nmy_numeric_vector <- 1:10\nmy_numeric_vector\n#[1]  1  2  3  4  5  6  7  8  9 10"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_logical_vector <- ifelse(my_numeric_vector > 5, TRUE, FALSE)\nmy_logical_vector\n# [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\nstr(my_logical_vector)\n#logi [1:10] FALSE FALSE FALSE FALSE FALSE TRUE ...\nclass(my_logical_vector)\n#\"logical\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_logical_vector <- my_numeric_vector > 5\nmy_logical_vector\n#[1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_am_vector <- my_imported_dataset$am\nmy_am_vector\n#[1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\nstr(my_am_vector)\n#int [1:32] 1 1 1 0 0 0 0 0 0 0 ...\n\n## This is a integer vector (like a numeric vector), we can transform this into a logical vector with ifelse test\nmy_logical_am_vector <- ifelse(my_am_vector == 1, TRUE, FALSE)\nmy_logical_am_vector\n#[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE\n#[22] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\nstr(my_logical_am_vector)\n#logi [1:32] TRUE TRUE TRUE FALSE FALSE FALSE ...\n\n## We can add this logical vector to our data.frame \nmy_imported_dataset$am_logical <- my_logical_am_vector\nhead(my_imported_dataset)\n#                cars  mpg cyl disp  hp drat    wt  qsec vs am gear carb vs_factor am_logical\n#1         Mazda_RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4         0       TRUE\n#2     Mazda_RX4_Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4         0       TRUE\n#3        Datsun_710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1         1       TRUE\n#4    Hornet_4_Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1         1      FALSE\n#5 Hornet_Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2         0      FALSE\n#6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1         1      FALSE\n\nstr(my_imported_dataset)\n#'data.frame':  32 obs. of  14 variables:\n#$ cars      : chr  \"Mazda_RX4\" \"Mazda_RX4_Wag\" \"Datsun_710\" \"Hornet_4_Drive\" ...\n#$ mpg       : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n#$ cyl       : int  6 6 4 6 8 6 8 4 4 6 ...\n#$ disp      : num  160 160 108 258 360 ...\n#$ hp        : int  110 110 93 110 175 105 245 62 95 123 ...\n#$ drat      : num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n#$ wt        : num  2.62 2.88 2.32 3.21 3.44 ...\n#$ qsec      : num  16.5 17 18.6 19.4 17 ...\n#$ vs        : int  0 0 1 1 0 1 0 1 1 1 ...\n#$ am        : int  1 1 1 0 0 0 0 0 0 0 ...\n#$ gear      : int  4 4 4 3 3 3 3 4 4 4 ...\n#$ carb      : int  4 4 1 1 2 1 4 2 2 4 ...\n#$ vs_factor : Factor w/ 2 levels \"0\",\"1\": 1 1 2 2 1 2 1 2 2 2 ...\n#$ am_logical: logi  TRUE TRUE TRUE FALSE FALSE FALSE ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numeric_vector <- c(1,2,3,4, NULL)\nmy_numeric_vector\n#[1] 1 2 3 4"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numeric_vector <- c(1,2,3,4, NA)\nmy_numeric_vector\n#[1]  1  2  3  4 NA"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numbers <- 1:10\n#[1]  1  2  3  4  5  6  7  8  9 10\n## Here is an example using our imported dataset\nmy_imported_dataset$gear\n#[1] 4 4 4 3 3 3 3 4 4 4 4 3 3 3 3 3 3 4 4 4 3 3 3 3 3 4 5 5 5 5 5 4"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numbers == 2\n#[1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## Here is an example using our imported dataset\nmy_imported_dataset$gear == 3\n#[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE\n#[22]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numbers != 2\n#[1]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n## Here is an example using our imported dataset\nmy_imported_dataset$gear != 3\n# [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE\n#[22] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numbers < 2\n#[1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## Here is an example using our imported dataset\nmy_imported_dataset$gear < 4\n#[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE\n#[22]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numbers <= 2\n#[1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## Here is an example using our imported dataset\nmy_imported_dataset$gear <= 4\n#1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n#[22]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numbers > 2\n#[1] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n## Here is an example using our imported dataset\nmy_imported_dataset$gear > 4\n#[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#[22] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numbers >= 2\n#[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n## Here is an example using our imported dataset\nmy_imported_dataset$gear >= 4\n#[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE\n#22] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "a <- c(2,10,4) # three elements\nb <- 2:4 # three elements\na == b\n# [1]  TRUE FALSE  TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "## we can compare if vs versus am values are the same, the test is one set of elements at a time\nmy_imported_dataset$vs == my_imported_dataset$am\n#[1] FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n#[22]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "# sequence of numbers between 1 and 10 every 2 numbers\nmy_vector <- seq(1,10,2) \nmy_vector\n#[1] 1 3 5 7 9"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "element_3 <- my_vector[3]\nelement_3\n#[1] 5"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_vector_without_element_3 <- my_vector[-3]\nmy_vector_without_element_3\n#[1] 1 3 7 9"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_vector[c(1,2,5)] # select elements 1, 2 and 5\n#[1] 1 3 9"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "# select elements that are more than 3\nmy_vector[my_vector > 3] \n#[1] 5 7 9"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numbers\n#[1]  1  2  3  4  5  6  7  8  9 10\n# Select even numbers\nmy_numbers[my_numbers %% 2 == 0] \n#[1]  2  4  6  8 10\n# Select numbers divisible by 3\nmy_numbers[my_numbers %% 3 == 0] \n#[1] 3 6 9"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_names <- c(\"juan\", \"c\", \"santos\")\nname_key <- c(\"peter\", \"juan\", \"randy\", \"david\", \"leeann\")\nname_key %in% my_names\n#> [1] FALSE  TRUE FALSE FALSE FALSE\nname_key[name_key %in% my_names]\n#[1] \"juan\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "name_key[!name_key %in% my_names]\n#[1] \"peter\"  \"randy\"  \"david\"  \"leeann\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "my_numbers <- 1:10\nmy_numbers\n#[1]  1  2  3  4  5  6  7  8  9 10\n#Addition\nmy_numbers + 1 \n#[1]  2  3  4  5  6  7  8  9 10 11\n#Subtraction\nmy_numbers - 1 \n#[1] 0 1 2 3 4 5 6 7 8 9\n#Multiplication\nmy_numbers * 2 \n#[1]  2  4  6  8 10 12 14 16 18 20\n#Division\nmy_numbers / 3 \n#[1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667 2.0000000 2.3333333 2.6666667 3.0000000 3.3333333\n#Exponentiation\nmy_numbers ^ 2 \n#[1]  1   4   9  16  25  36  49  64  81 100\n#Other functions \u2013 I did not add the corresponding results\nlog(my_numbers)\nsqrt(my_numbers)\nsin(my_numbers)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "# append 11 to vector\nmy_numbers <- c(my_numbers,11)\nmy_numbers\n#[1]  1  2  3  4  5  6  7  8  9 10 11"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "rep(c(0, 0, 7), times = 3)\n#[1] 0 0 7 0 0 7 0 0 7"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "rep(c(2, 4, 2), each = 3)\n#[1] 2 2 2 4 4 4 2 2 2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "rep(c(0, 7), times = c(4,2))\n#[1] 0 0 0 0 7 7"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.1 Scalars and vectors",
        "code": "rep(1:3,length.out=7)\n#[1] 1 2 3 1 2 3 1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.2 Matrices",
        "code": "my_matrix <- matrix(data = c(1,2,3,11,12,13), \n                    nrow = 2, \n                    ncol = 3, \n                   byrow = TRUE)\nmy_matrix \n#     [,1] [,2] [,3]\n#[1,]    1    2    3\n#[2,]   11   12   13\nstr(my_matrix)\n#num [1:2, 1:3] 1 11 2 12 3 13\nclass(my_matrix)\n#[1] \"matrix\"\nmy_matrix + 1\n#     [,1] [,2] [,3]\n#[1,]    2    3    4\n#[2,]   12   13   14\nmy_matrix * 2\n#     [,1] [,2] [,3]\n#[1,]    2    4    6\n#[2,]   22   24   26"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.3 Arrays",
        "code": "# Five input vectors.\nvector1 <- c(1,2,3)\nvector2 <- c(4,5,6,7)\nvector3 <- c(8,9,10,11,12)\nvector4 <- c(13,14,15,16,17)\nvector5 <- c(18,19,20,21,22)\n\n# Take these vectors as input to the array.\nmy_array <- array(c(vector1,vector2,vector3,vector4,vector5),dim = c(2,3,5))\nmy_array\n#, , 1\n#\n#     [,1] [,2] [,3]\n#[1,]    1    3    5\n#[2,]    2    4    6\n#\n#, , 2\n#\n#     [,1] [,2] [,3]\n#[1,]    7    9   11\n#[2,]    8   10   12\n#\n#, , 3\n#\n#     [,1] [,2] [,3]\n#[1,]   13   15   17\n#[2,]   14   16   18\n#\n#, , 4\n#\n#     [,1] [,2] [,3]\n#[1,]   19   21    1\n#[2,]   20   22    2\n#\n#, , 5\n#\n#     [,1] [,2] [,3]\n#[1,]    3    5    7\n#[2,]    4    6    8\n\nstr(my_array)\n#num [1:2, 1:3, 1:5] 1 2 3 4 5 6 7 8 9 10 ...\nclass(my_array)\n#[1] \"array\"\n\n## Print the second row (2) of the fifth matrix (5) of the array\nmy_array[2,,5]\n#[1] 4 6 8"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.3 Arrays",
        "code": "## add the matrices 2 and 5\nmy_array[,,2] + my_array[,,5]\n#    [,1] [,2] [,3]\n#[1,]   10   14   18\n#[2,]   12   16   20\n\n## multiply matrices 2 and 5\nmy_array[,,2] * my_array[,,5]\n#      [,1] [,2] [,3]\n#[1,]   21   45   77\n#[2,]   32   60   96\n\n## Use apply to calculate the sum of the rows, which is indicated by c(1), across all the matrices. It will be vector with two elements (i.e., the sums of each of the rows of matrices in the array).\napply(my_array, c(1), sum)\n#[1] 137 152\n\n## Use apply to calculate the sum of the columns, which is indicated by c(2),  across all the matrices. It will be a vector with three elements because each matrix has three columns.\napply(my_array, c(2), sum)\n#[1]  91 111  87"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe <- data.frame(my_numbers = c(1,2,3,4,5),\n                              my_text = c(\"apple\", \"pear\", \"grape\", \"pomegranate\", \"banana\"),\n                          my_boroughs = c(\"queens\", \"the_bronx\", \"brooklyn\", \"manhattan\", \"staten_island\"),\n                     stringsAsFactors = FALSE)\nmy_dataframe\n#  my_numbers     my_text   my_boroughs\n#1          1       apple        queens\n#2          2        pear     the_bronx\n#3          3       grape      brooklyn\n#4          4 pomegranate     manhattan\n#5          5      banana staten_island\nstr(my_dataframe)\n#'data.frame':  5 obs. of  3 variables:\n#$ my_numbers : num  1 2 3 4 5\n#$ my_text    : chr  \"apple\" \"pear\" \"grape\" \"pomegranate\" ...\n#$ my_boroughs: chr  \"queens\" \"the_bronx\" \"brooklyn\" \"manhattan\" ...\nclass(my_dataframe)\n#[1] \"data.frame\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "# the object 'my_dataframe' has 5 rows and 3 columns\ndim(my_dataframe)\n#[1] 5 3"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "## NOTE: remember to update the path to file with your dataset in your computer -- THIS IS EXCLUSIVE TO YOUR COMPUTER AND IT IS NOT THE PATH SHOWN BELOW\n\nmy_dataframe <- read.table(file = \"~/Desktop/Teach_R/my_dataframe_csv.csv\", \n                         header = TRUE, \n                            sep = \",\",\n               stringsAsFactors = FALSE)\n\nmy_dataframe <- read.table(file = \"~/Desktop/Teach_R/my_dataframe_tab.txt\", \n                         header = TRUE, \n                            sep = \"\\t\",\n               stringsAsFactors = FALSE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe$my_boroughs\n#[1] \"queens\"        \"the_bronx\"     \"brooklyn\"      \"manhattan\"     \"staten_island\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe[,3]\n#[1] \"queens\"        \"the_bronx\"     \"brooklyn\"      \"manhattan\"     \"staten_island\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe[,\"my_boroughs\"]\n#[1] \"queens\"        \"the_bronx\"     \"brooklyn\"      \"manhattan\"     \"staten_island\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe[4,]\n#  my_numbers     my_text my_boroughs\n#4          4 pomegranate   manhattan"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe[1,3]\n#[1] \"queens\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "subset(my_dataframe, select = my_boroughs)\n#    my_boroughs\n#1        queens\n#2     the_bronx\n#3      brooklyn\n#4     manhattan\n#5 staten_island"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "subset(my_dataframe, my_numbers >= 3)\n#  my_numbers     my_text   my_boroughs\n#3          3       grape      brooklyn\n#4          4 pomegranate     manhattan\n#5          5      banana staten_island"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "subset(my_dataframe, my_text %in% \"banana\")\n#  my_numbers my_text   my_boroughs\n#5          5  banana staten_island"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "subset(my_dataframe, grepl(pattern = \"_island\", my_dataframe$my_boroughs))\n#  my_numbers my_text   my_boroughs\n#5          5  banana staten_island"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe$my_colors <- c(\"red\",\"orange\",\"blue\",\"black\",\"green\")\nmy_dataframe\n#   my_numbers     my_text   my_boroughs my_colors\n#1          1       apple        queens       red\n#2          2        pear     the_bronx    orange\n#3          3       grape      brooklyn      blue\n#4          4 pomegranate     manhattan     black\n#5          5      banana staten_island     green"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "not_NYC <- data.frame(my_numbers = 6,\n                         my_text = \"potato\",\n                     my_boroughs = \"not_NYC\",\n                       my_colors = \"purple\",\n                stringsAsFactors = FALSE)\nmy_dataframe_2 <- rbind(my_dataframe,not_NYC)\nmy_dataframe_2\n#  my_numbers     my_text   my_boroughs my_colors\n#1          1       apple        queens       red\n#2          2        pear     the_bronx    orange\n#3          3       grape      brooklyn      blue\n#4          4 pomegranate     manhattan     black\n#5          5      banana staten_island     green\n#6          6      potato       not_NYC    purple"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe_2[-6,]\n#  my_numbers     my_text   my_boroughs my_colors\n#1          1       apple        queens       red\n#2          2        pear     the_bronx    orange\n#3          3       grape      brooklyn      blue\n#4          4 pomegranate     manhattan     black\n#5          5      banana staten_island     green"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe_2[,-2]\n#  my_numbers   my_boroughs my_colors\n#1          1        queens       red\n#2          2     the_bronx    orange\n#3          3      brooklyn      blue\n#4          4     manhattan     black\n#5          5 staten_island     green\n#6          6       not_NYC    purple"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe_for_names <- my_dataframe\n#get a vector of names of columns\nnames(my_dataframe_for_names)\n#[1] \"my_numbers\"  \"my_text\"     \"my_boroughs\" \"my_colors\" \n# to change names, you provide a vector with new names\nnames(my_dataframe_for_names) <- c(\"numbers\", \"fruits\", \"boroughs\", \"colors\")\nmy_dataframe_for_names\n#  numbers      fruits      boroughs colors\n#1       1       apple        queens    red\n#2       2        pear     the_bronx orange\n#3       3       grape      brooklyn   blue\n#4       4 pomegranate     manhattan  black\n#5       5      banana staten_island  green"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "names(my_dataframe_for_names)[3] <- \"the_boroughs\"\nmy_dataframe_for_names\n#  numbers      fruits  the_boroughs colors\n#1       1       apple        queens    red\n#2       2        pear     the_bronx orange\n#3       3       grape      brooklyn   blue\n#4       4 pomegranate     manhattan  black\n#5       5      banana staten_island  green"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe_with_NAs <- data.frame (numbers_A = c(1,2,3,4),\n                                     numbers_B = c(5,NA,7,NA),\n                                     numbers_C = c(9, NA, 11,12),\n                                     stringsAsFactors = FALSE)\nmy_dataframe_with_NAs\n#  numbers_A numbers_B numbers_C\n#1         1         5         9\n#2         2        NA        NA\n#3         3         7        11\n#4         4        NA        12"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "na.omit(my_dataframe_with_NAs)\n#  numbers_A numbers_B numbers_C\n#1         1         5         9\n#3         3         7        11"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_dataframe_with_NAs[complete.cases(my_dataframe_with_NAs[,\"numbers_C\"]),]\n#  numbers_A numbers_B numbers_C\n#1         1         5         9\n#3         3         7        11\n#4         4        NA        12"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "my_long_dataframe <- mtcars\nstr(my_long_dataframe)\n#'data.frame':  32 obs. of  11 variables:\n#$ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n#$ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n#$ disp: num  160 160 108 258 360 ...\n#$ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n#$ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n#$ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n#$ qsec: num  16.5 17 18.6 19.4 17 ...\n#$ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n#$ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n#$ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n#$ carb: num  4 4 1 1 2 1 4 2 2 4 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "head(my_long_dataframe)\n#                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "tail(my_long_dataframe)\n#                mpg cyl  disp  hp drat    wt qsec vs am gear carb\n#Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\n#Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\n#Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\n#Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\n#Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\n#Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "#returns a 2-element vector with the number of rows in the first element, and the number of columns as the second element (the dimensions of the object)\ndim(my_long_dataframe) \n#[1] 32 11"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "nrow(my_long_dataframe)\n#[1] 32"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "ncol(my_long_dataframe)\n#[1] 11"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.4 Data Frames",
        "code": "# names of columns\nnames(my_long_dataframe)\n#[1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" \"carb\"\nsummary(my_long_dataframe)\n#      mpg             cyl             disp             hp             drat             wt             qsec             vs        \n#Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0   Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n#1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5   1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n#Median :19.20   Median :6.000   Median :196.3   Median :123.0   Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n#Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7   Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n#3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0   3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n#Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0   Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n#      am              gear            carb      \n#Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n#1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n#Median :0.0000   Median :4.000   Median :2.000  \n#Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n#3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n#Max.   :1.0000   Max.   :5.000   Max.   :8.000  "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "my_dataframe_3 <- rbind(my_dataframe,my_dataframe_2, my_dataframe_2[-1,])"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "table(my_dataframe_3$my_boroughs)\n# brooklyn     manhattan       not_NYC        queens staten_island     the_bronx \n#        3             3             2             2             3             3 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "table(my_dataframe_3$my_text)\n#      apple      banana       grape        pear pomegranate      potato \n#          2           3           3           3           3           2 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "table(my_dataframe_3$my_boroughs, my_dataframe_3$my_text) \n#               apple banana grape pear pomegranate potato\n# brooklyn          0      0     3    0           0      0\n# manhattan         0      0     0    0           3      0\n# not_NYC           0      0     0    0           0      2\n# queens            2      0     0    0           0      0\n# staten_island     0      3     0    0           0      0\n# the_bronx         0      0     0    3           0      0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "my_dataframe_4 <- data.frame(my_numbers = c(6,NA),\n                         my_text = c(NA,\"potato\"),\n                     my_boroughs = c(\"not_NYC\",NA),\n                       my_colors = c(NA,\"purple\"),\n                stringsAsFactors = FALSE)\nmy_dataframe_5 <- rbind(my_dataframe_3,my_dataframe_4)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "table(my_dataframe_5$my_boroughs, my_dataframe_5$my_text)\n#               apple banana grape pear pomegranate potato\n# brooklyn          0      0     3    0           0      0\n# manhattan         0      0     0    0           3      0\n# not_NYC           0      0     0    0           0      2\n# queens            2      0     0    0           0      0\n# staten_island     0      3     0    0           0      0\n# the_bronx         0      0     0    3           0      0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "table(my_dataframe_5$my_boroughs, my_dataframe_5$my_text, useNA = \"always\") \n#               apple banana grape pear pomegranate potato <NA>\n# brooklyn          0      0     3    0           0      0    0\n# manhattan         0      0     0    0           3      0    0\n# not_NYC           0      0     0    0           0      2    1\n# queens            2      0     0    0           0      0    0\n# staten_island     0      3     0    0           0      0    0\n# the_bronx         0      0     0    3           0      0    0\n# <NA>              0      0     0    0           0      1    0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "table_subset <- table(my_dataframe_5$my_boroughs, my_dataframe_5$my_text) \ndimnames(table_subset)\n#[[1]]\n#[1] \"brooklyn\"      \"manhattan\"     \"not_NYC\"       \"queens\"        \"staten_island\" \"the_bronx\"    \n#[[2]]\n#[1] \"apple\"       \"banana\"      \"grape\"       \"pear\"        \"pomegranate\" \"potato\"     "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "names(dimnames(table_subset)) <- c(\"my_boroughs\", \"my_text\")\ntable_subset\n#               my_text\n#my_boroughs     apple banana grape pear pomegranate potato\n# brooklyn          0      0     3    0           0      0\n# manhattan         0      0     0    0           3      0\n# not_NYC           0      0     0    0           0      2\n# queens            2      0     0    0           0      0\n# staten_island     0      3     0    0           0      0\n# the_bronx         0      0     0    3           0      0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "prop.table(table_subset)\n#               my_text\n#my_boroughs     apple banana  grape   pear pomegranate potato\n# brooklyn      0.0000 0.0000 0.1875 0.0000      0.0000 0.0000\n# manhattan     0.0000 0.0000 0.0000 0.0000      0.1875 0.0000\n# not_NYC       0.0000 0.0000 0.0000 0.0000      0.0000 0.1250\n# queens        0.1250 0.0000 0.0000 0.0000      0.0000 0.0000\n# staten_island 0.0000 0.1875 0.0000 0.0000      0.0000 0.0000\n# the_bronx     0.0000 0.0000 0.0000 0.1875      0.0000 0.0000"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.5 Tables",
        "code": "## Let's find the proportion of names within a vector of 'my_boroughs'\nprop.table(table(my_dataframe_5$my_boroughs))\n#     brooklyn     manhattan       not_NYC        queens staten_island     the_bronx \n#    0.1764706     0.1764706     0.1764706     0.1176471     0.1764706     0.1764706\n\nproportions_my_boroughs <- as.numeric(prop.table(table(my_dataframe_5$my_boroughs)))\nproportions_my_boroughs\n#[1] 0.1764706 0.1764706 0.1764706 0.1176471 0.1764706 0.1764706\n\nstr(proportions_my_boroughs)\n#num [1:6] 0.176 0.176 0.176 0.118 0.176 ...\n\n## Let's assign the same names as in the table\nnames(proportions_my_boroughs) <- names(table(my_dataframe_5$my_boroughs))\nproportions_my_boroughs\n#     brooklyn     manhattan       not_NYC        queens staten_island     the_bronx \n#    0.1764706     0.1764706     0.1764706     0.1176471     0.1764706     0.1764706\n\n## This vector should add up to 1 (i.e., 100%)\nsum(proportions_my_boroughs)\n#[1] 1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.6 Lists",
        "code": "# We can put a collection of diverse vector\nmy_list <- list(c(1,2,3), my_dataframe, table_subset) \nmy_list\n#[[1]]\n#[1] 1 2 3\n#[[2]]\n#  my_numbers     my_text   my_boroughs my_colors\n#1          1       apple        queens       red\n#2          2        pear     the_bronx    orange\n#3          3       grape      brooklyn      blue\n#4          4 pomegranate     manhattan     black\n#5          5      banana staten_island     green\n#[[3]]\n#               my_text\n#my_boroughs     apple banana grape pear pomegranate potato\n# brooklyn          0      0     3    0           0      0\n# manhattan         0      0     0    0           3      0\n# not_NYC           0      0     0    0           0      2\n# queens            2      0     0    0           0      0\n# staten_island     0      3     0    0           0      0\n# the_bronx         0      0     0    3           0      0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.6 Lists",
        "code": "my_list_to_fill <- list()\nmy_list_to_fill\n#list()\nmy_list_to_fill[[1]] <- \"one\"\nmy_list_to_fill[[2]] <- 1:10\nmy_list_to_fill[[3]] <- mean(my_list_to_fill[[2]]) # mean of an already an element of the list\nmy_list_to_fill\n#[[1]]\n#[1] \"one\"\n#[[2]]\n#[1]  1  2  3  4  5  6  7  8  9 10\n#[[3]]\n#[1] 5.5"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.6 Lists",
        "code": "my_list <- list(some_numbers = c(1,2,3), a_data_frame = my_dataframe)\nmy_list\n#$some_numbers\n#[1] 1 2 3\n#$a_data_frame\n#  my_numbers     my_text   my_boroughs my_colors\n#1          1       apple        queens       red\n#2          2        pear     the_bronx    orange\n#3          3       grape      brooklyn      blue\n#4          4 pomegranate     manhattan     black\n#5          5      banana staten_island     green\nmy_list[[\"a_data_frame\"]]\n#  my_numbers     my_text   my_boroughs my_colors\n#1          1       apple        queens       red\n#2          2        pear     the_bronx    orange\n#3          3       grape      brooklyn      blue\n#4          4 pomegranate     manhattan     black\n#5          5      banana staten_island     green"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.6 Lists",
        "code": "#fist element of list\nmy_list[[1]]\n#[1] 1 2 3\n#get the third element of the first list \nmy_list[[1]][3]\n#[1] 3"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.6 Lists",
        "code": "my_list\n#$some_numbers\n#[1] 1 2 3\n#$a_data_frame\n#  my_numbers     my_text   my_boroughs my_colors\n#1          1       apple        queens       red\n#2          2        pear     the_bronx    orange\n#3          3       grape      brooklyn      blue\n#4          4 pomegranate     manhattan     black\n#5          5      banana staten_island     green\nmy_list[[2]] <- NULL\nmy_list\n#$some_numbers\n#[1] 1 2 3"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.6 Lists",
        "code": "my_list <- list(some_numbers = c(1,2,3), a_data_frame = my_dataframe)\nmy_list\n#$some_numbers\n#[1] 1 2 3\n#$a_data_frame\n#  my_numbers     my_text   my_boroughs my_colors\n#1          1       apple        queens       red\n#2          2        pear     the_bronx    orange\n#3          3       grape      brooklyn      blue\n#4          4 pomegranate     manhattan     black\n#5          5      banana staten_island     green\nmy_flatten_list <- unlist(my_list)\nmy_flatten_list\n#            some_numbers1             some_numbers2             some_numbers3  a_data_frame.my_numbers1  a_data_frame.my_numbers2 \n#                      \"1\"                       \"2\"                       \"3\"                       \"1\"                       \"2\" \n# a_data_frame.my_numbers3  a_data_frame.my_numbers4  a_data_frame.my_numbers5     a_data_frame.my_text1     a_data_frame.my_text2 \n#                     \"3\"                       \"4\"                       \"5\"                   \"apple\"                    \"pear\" \n#   a_data_frame.my_text3     a_data_frame.my_text4     a_data_frame.my_text5 a_data_frame.my_boroughs1 a_data_frame.my_boroughs2 \n#                 \"grape\"             \"pomegranate\"                  \"banana\"                  \"queens\"               \"the_bronx\" \n#a_data_frame.my_boroughs3 a_data_frame.my_boroughs4 a_data_frame.my_boroughs5   a_data_frame.my_colors1   a_data_frame.my_colors2 \n#              \"brooklyn\"               \"manhattan\"           \"staten_island\"                     \"red\"                  \"orange\" \n# a_data_frame.my_colors3   a_data_frame.my_colors4   a_data_frame.my_colors5 \n#                  \"blue\"                   \"black\"                   \"green\" "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.7 Data Tables",
        "code": "# if you do not have installed this R-package\ninstall.packages(\"data.table\") \nlibrary(data.table)\ninput_csv_file <- \"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv\"\nflights <- fread(input_csv_file)\nflights\n#        year month day dep_delay arr_delay carrier origin dest air_time distance hour\n#     1: 2014     1   1        14        13      AA    JFK  LAX      359     2475    9\n#     2: 2014     1   1        -3        13      AA    JFK  LAX      363     2475   11\n#     3: 2014     1   1         2         9      AA    JFK  LAX      351     2475   19\n#     4: 2014     1   1        -8       -26      AA    LGA  PBI      157     1035    7\n#     5: 2014     1   1         2         1      AA    JFK  LAX      350     2475   13\n#    ---                                                                              \n#253312: 2014    10  31         1       -30      UA    LGA  IAH      201     1416   14\n#253313: 2014    10  31        -5       -14      UA    EWR  IAH      189     1400    8\n#253314: 2014    10  31        -8        16      MQ    LGA  RDU       83      431   11\n#253315: 2014    10  31        -4        15      MQ    LGA  DTW       75      502   11\n#253316: 2014    10  31        -5         1      MQ    LGA  SDF      110      659    8\nstr(flights)\n#Classes \u2018data.table\u2019 and 'data.frame': 253316 obs. of  11 variables:\n#$ year     : int  2014 2014 2014 2014 2014 2014 2014 2014 2014 2014 ...\n#$ month    : int  1 1 1 1 1 1 1 1 1 1 ...\n#$ day      : int  1 1 1 1 1 1 1 1 1 1 ...\n#$ dep_delay: int  14 -3 2 -8 2 4 -2 -3 -1 -2 ...\n#$ arr_delay: int  13 13 9 -26 1 0 -18 -14 -17 -14 ...\n#$ carrier  : chr  \"AA\" \"AA\" \"AA\" \"AA\" ...\n#$ origin   : chr  \"JFK\" \"JFK\" \"JFK\" \"LGA\" ...\n#$ dest     : chr  \"LAX\" \"LAX\" \"LAX\" \"PBI\" ...\n#$ air_time : int  359 363 351 157 350 339 338 356 161 349 ...\n#$ distance : int  2475 2475 2475 1035 2475 2454 2475 2475 1089 2422 ...\n#$ hour     : int  9 11 19 7 13 18 21 15 15 18 ...\n#- attr(*, \".internal.selfref\")=<externalptr> \nclass(flights)\n#[1] \"data.table\" \"data.frame\"\nnrow(flights) # get number of rows of data.table\n#[1] 253316"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.8 Tibbles",
        "code": "## install or load R-package 'readr' which is a powerful data parser for large text (tab or csv) files\ninstall.packages('readr')\nlibrary(readr)\nreader_file_path <- readr_example(\"mtcars.csv\") # this a common long dataset of car specifications\nmy_tibble <- read_delim(file = reader_file_path,\n                       delim = \",\")\n#Rows: 32 Columns: 11                                                                                                                                                     \n#\u2500\u2500 Column specification \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n#Delimiter: \",\"\n#dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\n#\n#\u2139 Use `spec()` to retrieve the full column specification for this data.\n#\u2139 Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n## use function spec() to extract the full column specification from a tibble created by readr.\n\nspec(my_tibble)\n#cols(\n#  mpg = col_double(),\n#  cyl = col_double(),\n#  disp = col_double(),\n#  hp = col_double(),\n#  drat = col_double(),\n#  wt = col_double(),\n#  qsec = col_double(),\n#  vs = col_double(),\n#  am = col_double(),\n#  gear = col_double(),\n#  carb = col_double()\n#)\n\nmy_tibble\n# A tibble: 32 x 11\n#     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n#   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n# 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n# 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n# 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n# 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n# 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n# 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n# 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n# 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n# 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n#10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# \u2026 with 22 more rows"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.9 DNAStringSets, RNAStringSets and AAStringSets",
        "code": "# if you need to install R-packages 'Biostrings' and 'rentrez'\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\n# remember that you might not need to update all other packages (type n)\n\nBiocManager::install(\"Biostrings\") \n\n# if you need to install \u201crentrez\u201d\n\ninstall.packages(\"rentrez\")\n\n# load these libraries\n\nlibrary(Biostrings)\nlibrary(rentrez)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.9 DNAStringSets, RNAStringSets and AAStringSets",
        "code": "froggy_name <- \"Allobates kingsburyi[Organism]\"\nfroggy_seq_IDs <- entrez_search(db=\"nuccore\", term=froggy_name)\n# revising the structure of 'froggy_seq_IDs' that there are 17 sequences in NCBI nuccore database\nstr(froggy_seq_IDs)\n#List of 5\n#$ ids             : chr [1:17] \"1845966712\" \"1248341807\" \"328728168\" \"328728030\" ...\n#$ count           : int 17\n#$ retmax          : int 17\n#$ QueryTranslation: chr \"\\\"Allobates kingsburyi\\\"[Organism]\"\n#$ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n#- attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\nfroggy_seqs_fasta <- entrez_fetch(db=\"nuccore\", id=froggy_seq_IDs$ids, rettype=\"fasta\")\nfroggy_seqs_fasta\n#[1] \">MT524123.1 Allobates kingsburyi voucher QCAZA68477 large subunit ribosomal RNA gene, partial sequence; \n#mitochondrial\\nCCTGATTAACCATAAGAGGTCAAGCCTGCCCAGTGACATTTGTTTAACGGCCGCGGTATCCTAACCGTGC\\nGAAGGTAGCGTAATCACTTGTCCTT\n#TAAATGAGGACTAGTATGAACGGCTTCACGAAGGCTATGCTGTCT\\nCCTTTATCTAATCAGTTAAACTAATCTCCCCGTGAAGAAGCGGGGATACACCTATAAGACGAGAA\n#...\ncat(froggy_seqs_fasta)\n#>MT524123.1 Allobates kingsburyi voucher QCAZA68477 large subunit ribosomal RNA gene, partial sequence; mitochondrial\n#CCTGATTAACCATAAGAGGTCAAGCCTGCCCAGTGACATTTGTTTAACGGCCGCGGTATCCTAACCGTGC\n#GAAGGTAGCGTAATCACTTGTCCTTTAAATGAGGACTAGTATGAACGGCTTCACGAAGGCTATGCTGTCT\n#CCTTTATCTAATCAGTTAAACTAATCTCCCCGTGAAGAAGCGGGGATACACCTATAAGACGAGAAGACCC\n#TATGGAGCTTTAAATACTTTAAAACACCTGAATCTGACACTAGAAACTTCCAGAAAACTTTATTTAACAT\n#ATCACTTTGTTTTAAACTTTAGGTTGGGGTGACCACGGAGAAAAAACCAACCTCCACGTAGAATGAAATT\n#TTCTTTCTAAGCGATAAGCTACATCTTTATGCATCAATACATTGACCTAAATTGACCCAATTTTTTGATC\n#AACGAAC\n#\n#>MF580102.1 Allobates kingsburyi nicotinic acetylcholine receptor beta-2 (chrnb2) gene, partial cds\n#ATGACGGTTCTCCTCCTCCTCCTGCACCTCAGCCTGTTCGGCCTGGTCACCAGGAGTATGGGCACGGACA\n#CCGAGGAGCGGCTCGTGGAATTCCTGCTGGACCCGTCCCAGTACAACAAGCTGATCCGGCCCGCCACCAA\n#TGGATCCGAGCAGGTCACCGTCCAGCTGATGGTATCTCTGGCCCAGCTGATCAGCGTGCACGAGCGGGAG\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.9 DNAStringSets, RNAStringSets and AAStringSets",
        "code": "# this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/my_working_directory\")\nwrite(froggy_seqs_fasta, \"my_froggy_seqs_fasta.txt\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.9 DNAStringSets, RNAStringSets and AAStringSets",
        "code": "my_Biostrings_set <- readDNAStringSet(filepath = \"~/Desktop/Teach_R/my_working_directory/my_froggy_seqs_fasta.txt\", \n                                         format = \"fasta\")\nmy_Biostrings_set\n#A DNAStringSet instance of length 17\n#    width seq                                                                                                      names               \n# [1]   427 CCTGATTAACCATAAGAGGTCAAGCCTGCCCAGTGACATTTGTTTAACGGC...TATGCATCAATACATTGACCTAAATTGACCCAATTTTTTGATCAACGAAC MT524123.1 Alloba...\n# [2]   899 ATGACGGTTCTCCTCCTCCTCCTGCACCTCAGCCTGTTCGGCCTGGTCACC...CCCCCGACGTCCCTGGACGTCCCGCTCGTCGGCAAGTACCTGATGTTCAC MF580102.1 Alloba...\n# [3]  4881 AAGGTTTGGTCCTAGCCTTGAAGTCAGTTACTAATTAATATACACATGCAA...CCTTTGTTTACTTCCTATCTCCCCATCCCTTCTCTGCCTGCTCAGAAACT HQ290963.1 Alloba...\n# [4]   576 GTACATCATAATGTGAGCAGATGGGAAAGCTTTGATGTCACACCAGCTATT...TCTACCTTGATGAAAATGAAAAAGTTGTTTTGAAAAACTATCAAGACATG HQ291024.1 Alloba...\n# [5]   510 AACTCCCCTTCAGGTTCACAATTTCCCTTCAGCGGCATTGACGACCGGGAA...TGCTTCAATGGGAGCATGAAATTCAGAAGCTCACGGGTGACGAGAACTTC HQ290901.1 Alloba...\n#...   ... ...\n#[13]  2389 AGGCTTGGTCCTAACCTTGAAGTCAGTTACTAATTAATATACACATGCAAG...CGACCTCGATGTTGGATCAGGATGTCCCAGTGGTGCAGCAGCTACTAATG EU342528.1 Alloba...\n#[14]  2392 TAAAGGTTTGGTCCTAGCCTTGAAGTCAGTTACTAATTAATATACACATGC...CGACCTCGATGTTGGATCAGGATGTCCCAGTGGTGCAGCAGCTACTAATG EU342527.1 Alloba...\n#[15]  2393 TTAAAGGTTTGGTCCTAGCCTTGAAGTCAGTTACTAATTAATATACACATG...CGACCTCGATGTTGGATCAGGATGTCCCAGTGGTGCAGCAGCTACTAATG EU342526.1 Alloba...\n#[16]  2457 AAAGTTCTCCAACATAAAGGCTTGGTCCTAACCTTGAAGTCAGTTACTAAT...GTTCGTTTGTTCAACGATTAAAATCCTACGTGATCTGAGTTCAGACCGGA AY364550.1 Colost...\n#[17]  2446 ATTAAAGGTTTGGTCCTAGCCTTGAAGTCAGTTACTAATTAATATACACAT...TTCGTTTGTTCAACGATTAAAATCCTACGTGATCTGAGTTCAAGACCGGA AY364549.1 Colost..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.9 DNAStringSets, RNAStringSets and AAStringSets",
        "code": "froggy_name <- \"Allobates kingsburyi[Organism]\"\nfroggy_AA_IDs <- entrez_search(db=\"protein\", term=froggy_name)\n# Entrez search result with 11 hits (object contains 11 IDs and no web_history object)\n# Search term (as translated):  \"Allobates kingsburyi\"[Organism] \nstr(froggy_AA_IDs)\n#List of 5\n#$ ids             : chr [1:11] \"1248341808\" \"328728170\" \"328728169\" \"328728031\" ...\n#$ count           : int 11\n#$ retmax          : int 11\n#$ QueryTranslation: chr \"\\\"Allobates kingsburyi\\\"[Organism]\"\n#$ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n#- attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\nfroggy_AA_fasta <- entrez_fetch(db=\"protein\", id=froggy_AA_IDs$ids, rettype=\"fasta\")\nfroggy_AA_fasta\n#[1] \">ATG31804.1 nicotinic acetylcholine receptor beta-2, partial [Allobates kingsburyi]\\nMTVLLLLLHLSLFGLV\n#TRSMGTDTEERLVEFLLDPSQYNKLIRPATNGSEQVTVQLMVSLAQLISVHERE\\nQIMTTNVWLTQEWXXXXXXXXXXXXXXXXXXXXXXXXXWLPDVVLYNNADGMY\n#EVSFYSNAVVSHDGSIF\\nWLPPAIYKSACKIEVKHFPFDQQNCTMKFRSWTYDRTELDLVLKSDVASLDDFTPSGEWDIIALPGRRNE\\nNPEDSTYVDITYDFIIRRKPL\n#...\ncat(froggy_AA_fasta)\n#>ATG31804.1 nicotinic acetylcholine receptor beta-2, partial [Allobates kingsburyi]\n#MTVLLLLLHLSLFGLVTRSMGTDTEERLVEFLLDPSQYNKLIRPATNGSEQVTVQLMVSLAQLISVHERE\n#QIMTTNVWLTQEWXXXXXXXXXXXXXXXXXXXXXXXXXWLPDVVLYNNADGMYEVSFYSNAVVSHDGSIF\n#WLPPAIYKSACKIEVKHFPFDQQNCTMKFRSWTYDRTELDLVLKSDVASLDDFTPSGEWDIIALPGRRNE\n#NPEDSTYVDITYDFIIRRKPLFYTINLIIPCILITSLAILVFYLPSDCGEKMTLCISVLLALTVFLLLIS\n#KIVPPTSLDVPLVGKYLMFT\n#\n#>AEB39272.1 NADH dehydrogenase subunit 2 (mitochondrion) [Allobates kingsburyi]\n#MNPYALFLIISSLALGTSIAVSSFHWILAWIGLEINTLAIIPLMTKNPHPRSIEAATKYFLTQAAASSLI\n#LFSCALNAWLLGEWTINNLMSPASMIFLSIALSTKLGLAPFHFWLPEVLQGLTLQTGWILSTWQKLAPLA\n#ILFQLSQSINLLLMMSMGLLSILVGGWGGINQNQIRKILAFSSIAHLGWMITILKISPQLSLLNFILYII\n#MTSALFYTFIMIDSTNISHLATTWTKIPTLTALSLMSLLSLSGLPPLTGFLPKWLIAQELINQNLIILPF\n#LMLMLTLLALFFYLRLTYTISLTMAPNSTSSVSLWYQKKKNNLTIFILLTLCLLPISPSLLCLL"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.9 DNAStringSets, RNAStringSets and AAStringSets",
        "code": "# this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/my_working_directory\")\nwrite(froggy_AA_fasta, \"my_froggy_AA_fasta.txt\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-data-structures-in-r.html",
        "section": "Session 3 \u2013 Basic Data Structures in R",
        "subsection": "3.9 DNAStringSets, RNAStringSets and AAStringSets",
        "code": "my_AA_Biostrings_set <- readAAStringSet(filepath = \"~/Desktop/Teach_R/my_working_directory/my_froggy_AA_fasta.txt\", \n                                         format = \"fasta\")\nmy_AA_Biostrings_set\n#A  AAStringSet instance of length 11\n#      width seq                                                                                                      names               \n# [1]   300 MTVLLLLLHLSLFGLVTRSMGTDTEERLVEFLLDPSQYNKLIRPATNGSEQ...VFYLPSDCGEKMTLCISVLLALTVFLLLISKIVPPTSLDVPLVGKYLMFT ATG31804.1 nicoti...\n# [2]   344 MNPYALFLIISSLALGTSIAVSSFHWILAWIGLEINTLAIIPLMTKNPHPR...RLTYTISLTMAPNSTSSVSLWYQKKKNNLTIFILLTLCLLPISPSLLCLL AEB39272.1 NADH d...\n# [3]   320 LNIFTLTQSLCYMVPILLAVAFLTLLERKVLGYMQHRKGPNVIGPTGLLQP...LFLWVRASYPRFRYDQLMHLVWKNFLPMTLALTIWFITFPIIFLFSPPIL AEB39271.1 NADH d...\n# [4]   192 VHHNVSRWESFDVTPAIIRWIAHRQPNHGFVVEVTQLDCEKNVTKRHVRIS...STNHAIVQTLVNSVNSNIPKACCVPTELSAISMLYLDENEKVVLKNYQDM AEB39195.1 bone m...\n# [5]   170 NSPSGSQFPFSGIDDRENWPIVFYNRTCQCQGNFMGYNCGDCKFXFTGXNC...YASRDAFLEGDLVWQNIDFAHEAPAFLPWHRFFLLQWEHEIQKLTGDENF AEB39135.1 tyrosi...\n# ...   ... ...\n# [7]   192 TTMDKRNLPESSMNSLFIKLMQADLLKNKIPKQVVNAKEIKQQSTIPKAEI...VTNKSNAIDIRGHQVAVLGEIKTGNSPVKQYFYETRCKDARPVKSGCRGI AEB39015.1 neurot...\n# [8]   414 TIKKPNGETTKTTVRIWNETVSNLTLMALGSSAPEILLSVIEVCGHNFQAG...GIIDDDIFEEDENFLVHLSNVRVNAETTEVNFESNHVTSLACLGSPSTAT AEB38955.1 sodium...\n# [9]   309 CIGLISVNGRMRNNMKAGSSPNSVSSSPTNSAITQLRHKLENGKPLGMNES...PIPLHQHERYLCKMNEEIKAVLQPSENLILNKQGMFAEKQALLLSSVLSE AEB38895.1 zinc f...\n#[10]   201 VRGQSGLAYPGLRTHGTLESIGGPMSSSRGGGLPSLTDTFEHVIEELLEEE...QLKQYFYETKCNPMGYMKEGCRGIDKRYWNSQCRTTQSYVRALTMDSKKK AEB38835.1 brain-...\n#[11]   230 GLCLIAQIITGLFLAMHYTADTTMAFSSIAHICRDVNNGWLLRSLHANGAS...VPFHAYFSYKDALGFIILLVLLSLLSLFSPNLLGDPDNFTPANPLVTPPH AEB33649.1 cytoch..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "library(rentrez)\n# if you need to install R-package 'rentrez', use install.packages(\"rentrez\")\n\n# Download some nucleotide sequences from NCBI for Ameerega bilinguis[Organism] that correspond to the gene COI\nfroggy_name_COX1 <- \"Ameerega bilinguis[Organism] AND COI[Gene]\"\nfroggy_seq_IDs <- entrez_search(db=\"nuccore\", term= froggy_name_COX1)\n#Entrez search result with 1 hits (object contains 1 IDs and no web_history object)\n# Search term (as translated):  \"Ameerega bilinguis\"[Organism] AND COI[Gene] \n\n# revising the structure of 'froggy_seq_IDs' that there are 1 sequence in NCBI nuccore database\nstr(froggy_seq_IDs)\n#List of 5\n# $ ids             : chr \"1952638358\"\n# $ count           : int 1\n# $ retmax          : int 1\n# $ QueryTranslation: chr \"\\\"Ameerega bilinguis\\\"[Organism] AND COI[Gene]\"\n# $ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n# - attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\nfroggy_seqs_fasta <- entrez_fetch(db=\"nuccore\", id=froggy_seq_IDs$ids, rettype=\"fasta\")\nfroggy_seqs_fasta\n#[1] \">MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\\nGTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGG\\nCATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTAATTCGAGCCGAATTAAGCCAGCCCGGGTCCTT\\nACTAGGCGATGACCAGATCTACAACGTTATTGTTACCGCCCATGCTTTCGTTATAATCTTTTTTATAGTA\\nATGCCAATTCTAATCGGTGGCTTTGGGAATTGATTAGTGCCCCTAATAATTGGAGCCCCAGACATAGCTT\\nTTCCCCGAATAAACAATATGAGCTTTTGGCTTCTTCCCCCCTCTTTCCTACTACTCCTAGCATCCGCAGG\\nCGTTGAAGCAGGCGCCGGTACTGGCTGAACTGTGTACCCTCCCCTTGCAGGCAACCTAGCTCATGCTGGC\\nCCATCAGTTGATTTAACTATTTTTTCACTTCATCTCGCCGGTGTTTCTTCTATTCTAGGGGCAATTAACT\\nTTATTACAACAACCTTAAACATAAAACCCCCTTCATTAACACAATATCAAACCCCATTATTTGTCTGATC\\nTGTATTAATTACTGCAGTCCTTCTTCTTCTCTCCCTCCCAGTTCTGGCTGCCGGAATCACTATACTCTTG\\nACTGACCGAAACCTAAACACCACCTTCTTTGACCCAGCAGGTGGAGGCGACCCTGTCCTGTACCAACACC\\nTGTTCTGATTCTTTGGTCACCCCGAAGTCTACATCCTTATCCTGCCTGGATTTGGTATCATCTCCCATGT\\nTGTCACATTCTACTCTAGCAAAAAAGAACCCTTCGGCTATATAGGAATAGTCTGAGCTATAATATCGATT\\nGGTCTCCTAGGTTTCATTGTTTGAGCTCACCACATATTCACAACAGACCTTAATGTAGACACTCGAGCCT\\nACTTTACCTCAGCTACTATAATCATCGCTATCCCAACAGGTGTCAAAGTCTTTAGCTGACTTGCCACCAT\\nGCACGGAGGAATTATTAAATGAGACGCCGCCATATTATGGGCTCTCGGATTCATCTTTTTATTTACAGTT\\nGGAGGACTAACTGGAATCGTTTTAGCCAACTCCTCTTTAGACATTGTTTTGCATGATACATATTATGTAG\\nTAGCCCACTTTCACTACGTTCTTTCTATGGGGGCAGTATTTGCCATTATAGCCGGCTTCGTACACTGATT\\nTCCTCTCTTTTCCGGATTTACCCTTCATGAAGCCTGAACAAAAATTCAATTTGGCGTCATATTTACCGGC\\nGTAAATTTAACATTCTTCCCCCAGCATTTCTTAGGTCTCGCAGGCATGCCTCGACGTTATTCAGACTACC\\nCTGACGCCTACACATTATGAAACACCGTTTCATCAATCGGCTCTTTAATCTCTCTAGTTGCAGTAATCAT\\nTATGATGTTTATCATTTGAGAAGCTTTCTCTTCCAAACGCCTACCTCTACCTGCAGAAATAACCCCAACT\\nAATGTAGAATGATTATACGGATCCCCCCCACCTTACCACACTTTTGAGGAAGCCGTTTACTCCAAAATT\\n\\n\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "# 1) A fasta header starting with '>', the NCBI accession number 'MW042030.1'\n# >MW042030.1\n# 2) A defition as is present in the GenBank format for this sequence 'Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial'\n# Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n# 3) A new line coding indicated by '\\n'\n# \\n\n# 4) The actual nucleotide sequence in capital letters with some new line characters '\\n' interspersed in the sequence\n# GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGG\\nCATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTAATTCGAGCCGAATTAAGCCAGCCCGGGTCCTT\\nACTAGGCGATGACCAGATCTACAACGTTATTGTTACCGCCCATGCTTTCGTTATAATCTTTTTTATAGTA\\nATGCCAATTCTAATCGGTGGCTTTGGGAATTGATTAGTGCCCCTAATAATTGGAGCCCCAGACATAGCTT\\nTTCCCCGAATAAACAATATGAGCTTTTGGCTTCTTCCCCCCTCTTTCCTACTACTCCTAGCATCCGCAGG\\nCGTTGAAGCAGGCGCCGGTACTGGCTGAACTGTGTACCCTCCCCTTGCAGGCAACCTAGCTCATGCTGGC\\nCCATCAGTTGATTTAACTATTTTTTCACTTCATCTCGCCGGTGTTTCTTCTATTCTAGGGGCAATTAACT\\nTTATTACAACAACCTTAAACATAAAACCCCCTTCATTAACACAATATCAAACCCCATTATTTGTCTGATC\\nTGTATTAATTACTGCAGTCCTTCTTCTTCTCTCCCTCCCAGTTCTGGCTGCCGGAATCACTATACTCTTG\\nACTGACCGAAACCTAAACACCACCTTCTTTGACCCAGCAGGTGGAGGCGACCCTGTCCTGTACCAACACC\\nTGTTCTGATTCTTTGGTCACCCCGAAGTCTACATCCTTATCCTGCCTGGATTTGGTATCATCTCCCATGT\\nTGTCACATTCTACTCTAGCAAAAAAGAACCCTTCGGCTATATAGGAATAGTCTGAGCTATAATATCGATT\\nGGTCTCCTAGGTTTCATTGTTTGAGCTCACCACATATTCACAACAGACCTTAATGTAGACACTCGAGCCT\\nACTTTACCTCAGCTACTATAATCATCGCTATCCCAACAGGTGTCAAAGTCTTTAGCTGACTTGCCACCAT\\nGCACGGAGGAATTATTAAATGAGACGCCGCCATATTATGGGCTCTCGGATTCATCTTTTTATTTACAGTT\\nGGAGGACTAACTGGAATCGTTTTAGCCAACTCCTCTTTAGACATTGTTTTGCATGATACATATTATGTAG\\nTAGCCCACTTTCACTACGTTCTTTCTATGGGGGCAGTATTTGCCATTATAGCCGGCTTCGTACACTGATT\\nTCCTCTCTTTTCCGGATTTACCCTTCATGAAGCCTGAACAAAAATTCAATTTGGCGTCATATTTACCGGC\\nGTAAATTTAACATTCTTCCCCCAGCATTTCTTAGGTCTCGCAGGCATGCCTCGACGTTATTCAGACTACC\\nCTGACGCCTACACATTATGAAACACCGTTTCATCAATCGGCTCTTTAATCTCTCTAGTTGCAGTAATCAT\\nTATGATGTTTATCATTTGAGAAGCTTTCTCTTCCAAACGCCTACCTCTACCTGCAGAAATAACCCCAACT\\nAATGTAGAATGATTATACGGATCCCCCCCACCTTACCACACTTTTGAGGAAGCCGTTTACTCCAAAATT\n# 5) Final a couple of new line '\\n' at the end of the vector\n# \\n\\n"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "length(froggy_seqs_fasta)\n#[1] 1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "class(froggy_seqs_fasta)\n#[1] \"character\"\nstr(froggy_seqs_fasta)\n#chr \">MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochon\"| __truncated__"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "is.character(froggy_seqs_fasta) \n#[1] TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "nchar(froggy_seqs_fasta)\n#[1] 1679"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "froggy_seq_split <- strsplit(froggy_seqs_fasta, split = '\\n')\nfroggy_seq_split\n#[[1]]\n# [1] \">MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\"\n# [2] \"GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGG\"                                              \n# [3] \"CATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTAATTCGAGCCGAATTAAGCCAGCCCGGGTCCTT\"                                              \n# [4] \"ACTAGGCGATGACCAGATCTACAACGTTATTGTTACCGCCCATGCTTTCGTTATAATCTTTTTTATAGTA\"                                              \n# [5] \"ATGCCAATTCTAATCGGTGGCTTTGGGAATTGATTAGTGCCCCTAATAATTGGAGCCCCAGACATAGCTT\"                                              \n# [6] \"TTCCCCGAATAAACAATATGAGCTTTTGGCTTCTTCCCCCCTCTTTCCTACTACTCCTAGCATCCGCAGG\"                                              \n# [7] \"CGTTGAAGCAGGCGCCGGTACTGGCTGAACTGTGTACCCTCCCCTTGCAGGCAACCTAGCTCATGCTGGC\"                                              \n# [8] \"CCATCAGTTGATTTAACTATTTTTTCACTTCATCTCGCCGGTGTTTCTTCTATTCTAGGGGCAATTAACT\"                                              \n# [9] \"TTATTACAACAACCTTAAACATAAAACCCCCTTCATTAACACAATATCAAACCCCATTATTTGTCTGATC\"                                              \n#[10] \"TGTATTAATTACTGCAGTCCTTCTTCTTCTCTCCCTCCCAGTTCTGGCTGCCGGAATCACTATACTCTTG\"                                              \n#[11] \"ACTGACCGAAACCTAAACACCACCTTCTTTGACCCAGCAGGTGGAGGCGACCCTGTCCTGTACCAACACC\"                                              \n#[12] \"TGTTCTGATTCTTTGGTCACCCCGAAGTCTACATCCTTATCCTGCCTGGATTTGGTATCATCTCCCATGT\"                                              \n#[13] \"TGTCACATTCTACTCTAGCAAAAAAGAACCCTTCGGCTATATAGGAATAGTCTGAGCTATAATATCGATT\"                                              \n#[14] \"GGTCTCCTAGGTTTCATTGTTTGAGCTCACCACATATTCACAACAGACCTTAATGTAGACACTCGAGCCT\"                                              \n#[15] \"ACTTTACCTCAGCTACTATAATCATCGCTATCCCAACAGGTGTCAAAGTCTTTAGCTGACTTGCCACCAT\"                                              \n#[16] \"GCACGGAGGAATTATTAAATGAGACGCCGCCATATTATGGGCTCTCGGATTCATCTTTTTATTTACAGTT\"                                              \n#[17] \"GGAGGACTAACTGGAATCGTTTTAGCCAACTCCTCTTTAGACATTGTTTTGCATGATACATATTATGTAG\"                                              \n#[18] \"TAGCCCACTTTCACTACGTTCTTTCTATGGGGGCAGTATTTGCCATTATAGCCGGCTTCGTACACTGATT\"                                              \n#[19] \"TCCTCTCTTTTCCGGATTTACCCTTCATGAAGCCTGAACAAAAATTCAATTTGGCGTCATATTTACCGGC\"                                              \n#[20] \"GTAAATTTAACATTCTTCCCCCAGCATTTCTTAGGTCTCGCAGGCATGCCTCGACGTTATTCAGACTACC\"                                              \n#[21] \"CTGACGCCTACACATTATGAAACACCGTTTCATCAATCGGCTCTTTAATCTCTCTAGTTGCAGTAATCAT\"                                              \n#[22] \"TATGATGTTTATCATTTGAGAAGCTTTCTCTTCCAAACGCCTACCTCTACCTGCAGAAATAACCCCAACT\"                                              \n#[23] \"AATGTAGAATGATTATACGGATCCCCCCCACCTTACCACACTTTTGAGGAAGCCGTTTACTCCAAAATT\"                                               \n#[24] \"\"                                                                                                                    \nclass(froggy_seq_split)\n#[1] \"list\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "froggy_one_fasta <- paste(froggy_seq_split[[1]][2:23], collapse = \"\")\nfroggy_one_fasta\n#[1] \"GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTAATTCGAG...\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "names(froggy_one_fasta) <- froggy_seq_split[[1]][1]\nfroggy_one_fasta\n# >MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#\"GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTAATTCGAGCCGAATT...\" "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "library(rentrez)\n# if you need to install R-package 'rentrez', use install.packages(\"rentrez\")\n\n# Download more COX1 nucleotide sequences from NCBI for 3 more species (i.e., three terms)\nseveral_sepecies_COX1 <- c(\"Ameerega parvula[Organism] AND COI[Gene]\", \n                           \"Epipedobates anthonyi[Organism] AND COI[Gene]\",\n                           \"Oophaga sylvatica[Organism] AND COI[Gene]\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "# we create an empty list to collect processed sequences\n\nmy_collected_sequences <- list()\n\n# the loop to retrieve sequences\n\nfor(i in 1:length(several_sepecies_COX1)) {\n                             one_seq_IDs <- entrez_search(db=\"nuccore\", term= several_sepecies_COX1[i])\n                          one_seqs_fasta <- entrez_fetch(db=\"nuccore\", id=one_seq_IDs$ids, rettype=\"fasta\")\n             my_collected_sequences[[i]] <- one_seqs_fasta\n                                          }\n\n# we have a list 'my_collected_sequences' of 3 elements; one per species.\nlength(my_collected_sequences)\n#[1] 3"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "my_collected_sequences[[2]]\n#[1] \">MW042033.1 Epipedobates anthonyi voucher QCAZ16597 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\\nGTGATAA\n#TTACCCGATGATTATTCTCCACAAACCATAAAGATATCGGAACCCTATATTTAGTATTTGGGG\\nCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGAATTAAGTCAACCTGGGTCC\n#TT\\nACTGGGCGATGACCAGATTTATAATGTAATCGTAACTGCCCATGCTTTCGTCATAATCTTCTTCATGGTT\\nATGCCTATTCTAATTGGTGGATTTGGAAATTGACTGGTACCTTTAATAATTGGAGCC\n#CCAGACATAGCCT\\nTTCCCCGAATAAATAATATAAGTTTTTGACTTCTTCCGCCCTCATTCCTTCTTCTCTTAGCATCTGCAGG\\nAGTAGAAGCAGGAGCTGGGACAGGTTGAACTGTTTATCCTCCTCTT\n#GCTGGTAACCTAGCTCATGCAGGC\\nCCATCAGTTGATTTAACCATTTTTTCACTCCATCTTGCAGGGGTCTCTTCAATTCTAGGAGCAATTAATT\\nTTATTACAACCACATTAAACATAAAACCTCCTTCT\n#TTAACTCAATACCAAACTCCTTTATTTGTCTGATC\\nAGTTCTAATCACCGCAGTACTTCTTCTTCTTTCTCTTCCTGTCCTAGCTGCAGGAATTACAATGCTTTTA\\nACTGATCGAAACCTTAACACCACT\n#TTCTTTGACCCAGCAGGTGGAGGTGACCCCATTCTTTATCAACATC\\nTCTTCTGATTTTTTGGACACCCAGAAGTTTATATTCTTATTCTCCCAGGGTTTGGAATTATCTCTCATGT\\nTGTAACTTTTTAT\n#TCTAGCAAAAAAGAACCTTTTGGATATATAGGAATGGTCTGAGCTATAATATCAATT\\nGGCCTCTTAGGTTTTATTGTTTGAGCTCACCATATATTTACTACTGATCTTAACGTTGACACTCGAGCTT\\nAC\n#TTTACCTCAGCTACTATAATTATTGCCATCCCAACAGGCGTAAAAGTCTTTAGCTGACTTGCCACCAT\\nGCATGGAGGAATTATTAAATGAGATGCTGCTATACTTTGAGCCTTAGGCTTTATTTTCTTGTT\n#TACTGTT\\nGGTGGACTAACTGGTATCGTTTTAGCTAATTCCTCTTTGGATATTGTTCTTCATGATACCTACTACGTTG\\nTAGCCCACTTCCATTATGTTCTTTCTATAGGAGCAGTATTTGCCATTATAGC\n#AGGATTTGTTCATTGATT\\nTCCCTTATTTACCGGTTTTACTCTTCATGAAGCCTGAACAAAGATTCATTTTGGCGTCATATTTGCTGGT\\nGTAAATTTAACTTTCTTCCCCCAACATTTTTTAGGATTAGC\n#AGGAATACCTCGACGCTATTCAGATTATC\\nCTGATGCCTACACCTTATGAAACACCGTTTCTTCTGTTGGCTCCCTAATCTCCCTTGTTGCAGTAATCAT\\nCATGATATTCATTATTTGAGAAGCTTTTTC\n#ATCTAAACGTCTATTTTTGAATGCAGAAATAACCCCTACT\\nAATGTTGAATGATTATATGGCTCCCCTCCTCCTTATCACACATTTGAGGAAGCTGTTTATTCTAAAGTA\\n\\n\n#>DQ502853.1 Epipedobates anthonyi isolate 838 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\\nAACCCTATATTTAGTATTT\n#GGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCA\\nGAATTAAGTCAACCTGGGTCCTTACTGGGCGATGACCAGATTTATAATGTAATCGTAACTGCCCATGCTT\\nTCGTCATAA\n#TCTTCTTCATGGTTATGCCTATTCTAATTGGTGGATTTGGAAATTGACTGGTACCTTTAAT\\nAATTGGAGCCCCAGACATAGCCTTTCCCCGAATAAATAATATAAGTTTTTGACTTCTTCCGCCCTCATTC\\\n#nCTTCTTCTCTTAGCATCTACAGGAGTAGAAGCAGGAGCTGGGACAGGTTGAACTGTTTATCCTCCTCTTG\\nCTGGTAACCTAGCTCATGCAGGCCCATCAGTTGATTTAACCATTTTTTCACTCCATCTTGC\n#AGGGGTCTC\\nTTCAATTCTAGGAGCAATTAATTTTATTACAACCACATTAAACATAAAACCTCCTTCTTTAACTCAATAC\\nCAAACTCCTTTATTTGTCTGATCAGTTCTAATCACCGCAGTACTTCTTCTT\n#CTTTCTCTTCCTGTCCTAG\\nCTGCAGGAATTACAATGCTTTTAACTGATCGAAACCTTAACACCACTTTCTTTGACCCAGCAGGTGGAGG\\nTGACCCCATTCTTTATCAACATCTCTTC\\n\\n\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "one_species_all_fasta <- my_collected_sequences[[2]]\none_species_split_by_fasta <- strsplit(one_species_all_fasta, split = '>')\none_species_split_by_fasta\n#[[1]]\n\n#[2] \"MW042033.1 Epipedobates anthonyi voucher QCAZ16597 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\\nGTGATAATTA...\n#[3] \"DQ502853.1 Epipedobates anthonyi isolate 838 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\\nAACCCTATATTTAGTA..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "one_species_split_by_fasta_vector <- unlist(one_species_split_by_fasta)\none_species_split_by_fasta_vector\n\n#[2] \"MW042033.1 Epipedobates anthonyi voucher QCAZ16597 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\\nGTGATAATTA...\n#[3] \"DQ502853.1 Epipedobates anthonyi isolate 838 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\\nAACCCTATATTTAGTA..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "one_species_split_by_fasta_vector <- one_species_split_by_fasta_vector[one_species_split_by_fasta_vector != \"\"]\none_species_split_by_fasta_vector\n#[1] \"MW042033.1 Epipedobates anthonyi voucher QCAZ16597 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\\nGTGATAATTA...\n#[2] \"DQ502853.1 Epipedobates anthonyi isolate 838 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\\nAACCCTATATTTAGTA..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "# we create an empty list to collect processed sequences\n\none_species_processed_seq_list <- list()\n\n# the loop to process sequences\n\nfor(i in 1:length(one_species_split_by_fasta_vector)) {\n    # split and unlist\n                 one_species_clean_data <- unlist(strsplit(one_species_split_by_fasta_vector[i], split = '\\n'))\n    # remove empty element \"\"\n                 one_species_clean_data <- one_species_clean_data[one_species_clean_data != \"\"]\n    # we know the first element will be always the accession number and the rest sequence but the length migh vary so we use length() to determine that.\n                   one_species_only_seq <- paste(one_species_clean_data[2:length(one_species_clean_data)], collapse = \"\") \n    # we name that sequence with the corresponding accession number on the first element of 'one_species_clean_data'.\n            names(one_species_only_seq) <- one_species_clean_data[1]\n    # finally, collected the processed sequences\n    one_species_processed_seq_list[[i]] <- one_species_only_seq\n                                        }\n\n# we the unlist this final output for species to a vector\none_species_end <- unlist(one_species_processed_seq_list)\none_species_end\n#MW042033.1 Epipedobates anthonyi voucher QCAZ16597 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#\"GTGATAATTACCCGATGATTATTCTCCACAAACCATAAAGATATCGGAACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGAATT...\"\n#DQ502853.1 Epipedobates anthonyi isolate 838 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#\"AACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGAATTAAGTCAACCTGGGTCCTTACTGGGCGATGACCAGATTTATAATGTAA...\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "list_final_fasta <- list()\n\nfor(j in 1:length(my_collected_sequences)) {\n    # j <- 3\none_species_all_fasta <- my_collected_sequences[[j]]\none_species_split_by_fasta <- strsplit(one_species_all_fasta, split = '>')\none_species_split_by_fasta_vector <- unlist(one_species_split_by_fasta)\none_species_split_by_fasta_vector <- one_species_split_by_fasta_vector[one_species_split_by_fasta_vector != \"\"]\n\none_species_processed_seq_list <- list()\n\nfor(i in 1:length(one_species_split_by_fasta_vector)) {\n                 one_species_clean_data <- unlist(strsplit(one_species_split_by_fasta_vector[i], split = '\\n'))\n                 one_species_clean_data <- one_species_clean_data[one_species_clean_data != \"\"]\n                   one_species_only_seq <- paste(one_species_clean_data[2:length(one_species_clean_data)], collapse = \"\") \n            names(one_species_only_seq) <- one_species_clean_data[1]\n    one_species_processed_seq_list[[i]] <- one_species_only_seq\n                                        }\n\nlist_final_fasta[[j]] <- unlist(one_species_processed_seq_list)\n                                            }\n\nfinal_fasta_vector <- unlist(list_final_fasta)\nfinal_fasta_vector\n#MW042033.1 Epipedobates anthonyi voucher QCAZ16597 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#\"GTGATAATTACCCGATGATTATTCTCCACAAACCATAAAGATATCGGAACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGAATT...\"\n#DQ502853.1 Epipedobates anthonyi isolate 838 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#\"AACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGAATTAAGTCAACCTGGGTCCTTACTGGGCGATGACCAGATTTATAATGTAA...\"\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "final_fasta_vector <- c(froggy_one_fasta, final_fasta_vector)\nfinal_fasta_vector\n# >MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#\"GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTAATTCGAGCCGAATT...\" \n#MW042033.1 Epipedobates anthonyi voucher QCAZ16597 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#\"GTGATAATTACCCGATGATTATTCTCCACAAACCATAAAGATATCGGAACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGAATT...\"\n#DQ502853.1 Epipedobates anthonyi isolate 838 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#\"AACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGAATTAAGTCAACCTGGGTCCTTACTGGGCGATGACCAGATTTATAATGTAA...\"\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "length(final_fasta_vector)\n[1] 24"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "nchar(final_fasta_vector)\n#>MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#                                                                                                                  1539 \n#     MW042032.1 Ameerega parvula voucher QCAZ16584 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#                                                                                                                  1539 \n#MW042033.1 Epipedobates anthonyi voucher QCAZ16597 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#                                                                                                                  1539 \n#     DQ502853.1 Epipedobates anthonyi isolate 838 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#                                                                                                                   658 \n#         MH589864.1 Oophaga sylvatica isolate CH2 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#                                                                                                                   523 \n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "tolower(final_fasta_vector)[1]\n#>MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#\"gtgataattactcgatgattattttctaccaaccacaaagacatcggaactttatacctagtgtttggggcatgagcaggcatagtcggcactgctcttagcctttt...\"\ntoupper(final_fasta_vector)[1]\n#>MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#\"GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTA...\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "one_sequence <- final_fasta_vector[1]\nnames(one_sequence) <- NULL\none_sequence_nucleotides <- unlist(strsplit(one_sequence, split = \"\"))\none_sequence_nucleotides\n#  [1] \"G\" \"T\" \"G\" \"A\" \"T\" \"A\" \"A\" \"T\" \"T\" \"A\" \"C\" \"T\" \"C\" \"G\" \"A\" \"T\" \"G\" \"A\" \"T\" \"T\" \"A\" \"T\" \"T\" \"T\" \"T\" \"C\" \"T\" \"A\" \"C\" \"C\" \"A\" \"A\"\n# [33] \"C\" \"C\" \"A\" \"C\" \"A\" \"A\" \"A\" \"G\" \"A\" \"C\" \"A\" \"T\" \"C\" \"G\" \"G\" \"A\" \"A\" \"C\" \"T\" \"T\" \"T\" \"A\" \"T\" \"A\" \"C\" \"C\" \"T\" \"A\" \"G\" \"T\" \"G\" \"T\"\n# [65] \"T\" \"T\" \"G\" \"G\" \"G\" \"G\" \"C\" \"A\" \"T\" \"G\" \"A\" \"G\" \"C\" \"A\" \"G\" \"G\" \"C\" \"A\" \"T\" \"A\" \"G\" \"T\" \"C\" \"G\" \"G\" \"C\" \"A\" \"C\" \"T\" \"G\" \"C\" \"T\"\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "one_sequence <- final_fasta_vector[1]\nnames(one_sequence) <- NULL\none_sequence_codons <- sapply(seq(from=1, to=nchar(one_sequence), by=3), \n                                   function(i) substr(one_sequence, i, i+2))\none_sequence_codons\n# [1] \"GTG\" \"ATA\" \"ATT\" \"ACT\" \"CGA\" \"TGA\" \"TTA\" \"TTT\" \"TCT\" \"ACC\" \"AAC\" \"CAC\" \"AAA\" \"GAC\" \"ATC\" \"GGA\" \"ACT\" \"TTA\" \"TAC\" \"CTA\" \"GTG\"\n#[22] \"TTT\" \"GGG\" \"GCA\" \"TGA\" \"GCA\" \"GGC\" \"ATA\" \"GTC\" \"GGC\" \"ACT\" \"GCT\" \"CTT\" \"AGC\" \"CTT\" \"TTA\" \"ATT\" \"CGA\" \"GCC\" \"GAA\" \"TTA\" \"AGC\"\n#[43] \"CAG\" \"CCC\" \"GGG\" \"TCC\" \"TTA\" \"CTA\" \"GGC\" \"GAT\" \"GAC\" \"CAG\" \"ATC\" \"TAC\" \"AAC\" \"GTT\" \"ATT\" \"GTT\" \"ACC\" \"GCC\" \"CAT\" \"GCT\" \"TTC\"\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.1 Working with character strings",
        "code": "chartr(\"T\", \"U\", final_fasta_vector[1])\n#>MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) >MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#\"GUGAUAAUUACUCGAUGAUUAUUUUCUACCAACCACAAAGACAUCGGAACUUUAUACCUAGUGUUUGGGGCAUGAGCAGGCAUAGUCGGCACUGCUCUUAGCCUUUUAAUUCG...\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_pattern <- \"ACTGGCTGAACTGTGTACCC\"\nwhat_sequences <- grep(pattern = my_pattern, final_fasta_vector, ignore.case = FALSE, fixed = FALSE, invert = FALSE)\nwhat_sequences\n#[1] 1 2\nfinal_fasta_vector[what_sequences]\n#>MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n\"GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTAATTCGAGCCGAA...\" \n#MW042032.1 Ameerega parvula voucher QCAZ16584 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#\"GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGATATTGGAACCTTATACCTAGTGTTTGGGGCGTGAGCGGGCATAGTCGGCACTGCTCTTAGCCTCTTAATTCGAGCCGAG...\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_pattern <- \"ACTGGCTGAACTGTGTACCC\"\nwhat_sequences <- grepl(pattern = my_pattern, final_fasta_vector, ignore.case = FALSE, fixed = FALSE)\nwhat_sequences\n#[1]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#[23] FALSE FALSE\nfinal_fasta_vector[what_sequences]\n#>MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#\"GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTAATTCGAGCCGAA...\" \n#MW042032.1 Ameerega parvula voucher QCAZ16584 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#\"GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGATATTGGAACCTTATACCTAGTGTTTGGGGCGTGAGCGGGCATAGTCGGCACTGCTCTTAGCCTCTTAATTCGAGCCGAG...\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_pattern <- \"CAAACAAA\"\nmy_replacement <-\"!!!found_it!!!\"\nfasta_vector_replacements <- sub(pattern = my_pattern,\n                             replacement = my_replacement,\n                            final_fasta_vector)\nfasta_vector_replacements\n#...\n#DQ502853.1Epipedobatesanthonyiisolate838cytochromeoxidasesubunitI(COI)gene,partialcds;mitochondrial\n#\"AACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGAATTAAGTCAACCTGGGTCCTTACT...\"\n#MH589864.1OophagasylvaticaisolateCH2cytochromeoxidasesubunitI(COI)gene,partialcds;mitochondrial\n#\"TTACATTCTCATCCTCCCAGGCTTCGGAATCATCTCCCATGTAGTCACGTTTTACT!!!found_it!!!AAAGAGCCATTTGGCTACATAGGAAT...\"\n#MH589863.1OophagasylvaticaisolateCH1cytochromeoxidasesubunitI(COI)gene,partialcds;mitochondrial\n#\"TTACATTCTCATCCTCCCAGGCTTCGGAATCATCTCTCATGTAGTCACGTTTTACT!!!found_it!!!AAAGAGCCATTTGGCTACATAGGAAT...\"\n#MH589862.1OophagasylvaticaisolateMC2cytochromeoxidasesubunitI(COI)gene,partialcds;mitochondrial\n#\"TTACATTCTCATCCTCCCAGGGTTCGGAATCATCTCCCATGTAGTCACGTTTTACT!!!found_it!!!AAAGAGCCATTTGGTTACATAGGAAT...\"\n#...\n\n# using gsub\n\nfasta_vector_replacements <- gsub(pattern = my_pattern,\n                              replacement = my_replacement,\n                            final_fasta_vector)\nfasta_vector_replacements\n#...\n#DQ502853.1Epipedobatesanthonyiisolate838cytochromeoxidasesubunitI(COI)gene,partialcds;mitochondrial\n#\"AACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGAATTAAGTCAACCTGGGTCCTTACT...\"\n#MH589864.1OophagasylvaticaisolateCH2cytochromeoxidasesubunitI(COI)gene,partialcds;mitochondrial\n#\"TTACATTCTCATCCTCCCAGGCTTCGGAATCATCTCCCATGTAGTCACGTTTTACT!!!found_it!!!AAAGAGCCATTTGGCTACATAGGAAT...\"\n#MH589863.1OophagasylvaticaisolateCH1cytochromeoxidasesubunitI(COI)gene,partialcds;mitochondrial\n#\"TTACATTCTCATCCTCCCAGGCTTCGGAATCATCTCTCATGTAGTCACGTTTTACT!!!found_it!!!AAAGAGCCATTTGGCTACATAGGAAT...\"\n#MH589862.1OophagasylvaticaisolateMC2cytochromeoxidasesubunitI(COI)gene,partialcds;mitochondrial\n#\"TTACATTCTCATCCTCCCAGGGTTCGGAATCATCTCCCATGTAGTCACGTTTTACT!!!found_it!!!AAAGAGCCATTTGGTTACATAGGAAT...\"\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_pattern <- c(\"TCATCTCCCATGTA\", \"GTGATAATTACTCGATGATTATTTT\")\nmy_pattern <- paste0(my_pattern, collapse = \"|\")\nmy_pattern\n#[1] \"TCATCTCCCATGTA|GTGATAATTACTCGATGATTATTTT\"\nwhat_sequences <- grepl(my_pattern, final_fasta_vector, ignore.case = FALSE, fixed = FALSE)\nwhat_sequences\n#[[1]  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n#[23]  TRUE  TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_pattern <- c(\"GTGATAATTACTCGATGATTATTTTCTA\", \"ACTTTATACCTAGTGTTTGGGGCA\")\nmy_pattern <- paste0(my_pattern, collapse = \".*\")\nmy_pattern\n#[1] \"GTGATAATTACTCGATGATTATTTTCTA.*ACTTTATACCTAGTGTTTGGGGCA\"\nwhat_sequences <- grepl(my_pattern, final_fasta_vector, ignore.case = FALSE, fixed = FALSE)\nwhat_sequences\n# [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#[23] FALSE FALSE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_pattern <- c(\"GTGATAATTACTCGATGATTATTTTCTA\", \"ACTTTATACCTAGTGTTTGGGGCA\")\nmy_pattern <- paste0(my_pattern, collapse = \".*\")\nmy_pattern\n#[1] \"GTGATAATTACTCGATGATTATTTTCTA.*ACTTTATACCTAGTGTTTGGGGCA\"\nwhat_sequences <- grepl(my_pattern, final_fasta_vector, ignore.case = FALSE, fixed = TRUE)\n\n# This result in all cases as FALSE because we fixed to match EXACTLY the text pattern \"GTGATAATTACTCGATGATTATTTTCTA.*ACTTTATACCTAGTGTTTGGGGCA\"\n\nwhat_sequences\n# [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#[23] FALSE FALSE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_random_vector <- c(\"text_file.txt\", \"text_file.csv\", \"text_file2.txt\", \"multiple\\ndots\\nin\\nthis.line\", \"multiple\\tdots\\tin\\tthis.line\", \"multiple.dots.in.this.line\", \"CaPiTaL_123_NYC\")\nmy_random_vector\n#[1] \"text_file.txt\"                 \"text_file.csv\"                 \"text_file2.txt\"                \"multiple\\ndots\\nin\\nthis.line\"\n#[5] \"multiple\\tdots\\tin\\tthis.line\" \"multiple.dots.in.this.line\"    \"CaPiTaL_123_NYC\"              \ncat(my_random_vector)\n#text_file.txt text_file.csv text_file2.txt multiple\n#dots\n#in\n#this.line multiple dots    in  this.line multiple.dots.in.this.line CaPiTaL_123_NYC"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_vector_processed <- gsub(pattern = \"\\n|\\t\", replacement = \"-\", my_random_vector)\nmy_random_vector[4:5]\n#[1] \"multiple\\ndots\\nin\\nthis.line\" \"multiple\\tdots\\tin\\tthis.line\"\nmy_vector_processed[4:5]\n#[1] \"multiple-dots-in-this.line\" \"multiple-dots-in-this.line\"          "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_vector_processed <- gsub(pattern = \"[[:digit:]]\", replacement = \"-\", my_random_vector)\nmy_random_vector[c(3,7)]\n#[1] \"text_file2.txt\"  \"CaPiTaL_123_NYC\"\nmy_vector_processed[c(3,7)]\n#[1] \"text_file-.txt\"  \"CaPiTaL_---_NYC\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_vector_processed <- gsub(pattern = \"\\\\D\", replacement = \"-\", my_random_vector)\nmy_random_vector\n#[1] \"text_file.txt\"                 \"text_file.csv\"                 \"text_file2.txt\"                \"multiple\\ndots\\nin\\nthis.line\"\n#[5] \"multiple\\tdots\\tin\\tthis.line\" \"multiple.dots.in.this.line\"    \"CaPiTaL_123_NYC\"              \nmy_vector_processed\n#[1] \"-------------\"              \"-------------\"              \"---------2----\"             \"--------------------------\"\n#[5] \"--------------------------\" \"--------------------------\" \"--------123----\"\nmy_vector_processed <- gsub(pattern = \"[^[:digit:]]\", replacement = \"-\", my_random_vector)\nmy_vector_processed\n#[1] \"-------------\"              \"-------------\"              \"---------2----\"             \"--------------------------\"\n#[5] \"--------------------------\" \"--------------------------\" \"--------123----\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_vector_processed <- gsub(pattern = \"[.]\", replacement = \" \", my_random_vector)\nmy_random_vector[6]\n#[1] \"multiple.dots.in.this.line\"\nmy_vector_processed[6]\n#[1] \"multiple dots in this line\"\nmy_vector_processed <- gsub(pattern = \"[.]\", replacement = \"\", my_random_vector)\nmy_vector_processed[6]\n#[1] \"multipledotsinthisline\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "these_strings <- grepl(pattern = \"^text\", my_random_vector, ignore.case = FALSE, fixed = FALSE)\nmy_random_vector[these_strings]\n#[1] \"text_file.txt\"  \"text_file.csv\"  \"text_file2.txt\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "these_are_txt_files <- grepl(pattern = \"*.txt$\", my_random_vector, ignore.case = FALSE, fixed = FALSE)\nmy_random_vector[these_are_txt_files]\n#[1] \"text_file.txt\"  \"text_file2.txt\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.2 Regular expressions (Regex)",
        "code": "my_pattern <- c(\"GTGATAATTACTCGATGATTATTTTCTA\", \"ACTTTATACCTAGTGTTTGGGGCA\")\nmy_pattern <- paste0(\"^.*\", my_pattern[1], \"\\\\s*|\\\\s*\", my_pattern[2], \".*$\")\nmy_pattern\n#[1] \"^.*GTGATAATTACTCGATGATTATTTTCTA\\\\s*|\\\\s*ACTTTATACCTAGTGTTTGGGGCA.*$\"\nis_the_pattern_present <- grepl(pattern = my_pattern, final_fasta_vector)\nis_the_pattern_present\n# [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#[23] FALSE FALSE\nsequences_that_have_pattern <- final_fasta_vector[is_the_pattern_present]\nmy_extracted_sequences <- gsub(pattern = my_pattern, replacement = '', sequences_that_have_pattern)\nmy_extracted_sequences\n#>MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial \n#\"CCAACCACAAAGACATCGGA\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "my_vector_1 <- c(\"Allobates\", \"Epipedobates\", \"Dendrobates\", \"Hyloxalus\", \"Mannophryne\", \"Hyloxalus\", \"Silverstoneia\")\nmy_vector_2 <- c(\"Epipedobates\", \"Epipedobates\",\"Dendrobates\", \"Hyloxalus\", \"Mannophryne\", \"Hyloxalus\", \"Rheobates\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "unique(my_vector_1)\n#[1] \"Allobates\"     \"Epipedobates\"  \"Dendrobates\"   \"Hyloxalus\"     \"Mannophryne\"   \"Silverstoneia\"\nunique(my_vector_2)\n#[1] \"Epipedobates\" \"Dendrobates\"  \"Hyloxalus\"    \"Mannophryne\"  \"Rheobates\"   "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "union(my_vector_1, my_vector_2)\n#[1] \"Allobates\"     \"Epipedobates\"  \"Dendrobates\"   \"Hyloxalus\"     \"Mannophryne\"   \"Silverstoneia\" \"Rheobates\"  "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "intersect(my_vector_1, my_vector_2)\n#[1] \"Epipedobates\" \"Dendrobates\"  \"Hyloxalus\"    \"Mannophryne\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "setdiff(my_vector_1, my_vector_2)\n#[1] \"Allobates\"     \"Silverstoneia\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "setdiff(my_vector_2, my_vector_1)\n#[1] \"Rheobates\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "setequal(my_vector_2, my_vector_1)\n#[1] FALSE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "is.element(c(\"Allobates\", \"Rheobates\"), my_vector_1)\n#[[1]  TRUE FALSE\nis.element(c(\"Allobates\", \"Rheobates\"), my_vector_2)\n#[1] FALSE  TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "c(\"Allobates\", \"Rheobates\") %in% my_vector_1\n#[[1]  TRUE FALSE\nc(\"Allobates\", \"Rheobates\") %in% my_vector_2\n#[1] FALSE  TRUE"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "sort(my_vector_1)\n#[1] \"Allobates\"     \"Dendrobates\"   \"Epipedobates\"  \"Hyloxalus\"     \"Hyloxalus\"     \"Mannophryne\"   \"Silverstoneia\"\nsort(my_vector_1, decreasing = TRUE)\n#[1] \"Silverstoneia\" \"Mannophryne\"   \"Hyloxalus\"     \"Hyloxalus\"     \"Epipedobates\"  \"Dendrobates\"   \"Allobates\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.3 Comparing, ordering and simplifying vectors",
        "code": "my_vector_1_2 <- sort(unique(c(my_vector_1,my_vector_2)))\nmy_vector_1_2\n#[1] \"Allobates\"     \"Dendrobates\"   \"Epipedobates\"  \"Hyloxalus\"     \"Mannophryne\"   \"Rheobates\"     \"Silverstoneia\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.4 Useful functions of stringr",
        "code": "# to install R-package stringr\ninstall.packages(\"stringr\")\nlibrary(stringr)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.4 Useful functions of stringr",
        "code": "adenine   <- str_count(final_fasta_vector, pattern = \"A\")\ncytocine  <- str_count(final_fasta_vector, pattern = \"C\")\nguanine   <- str_count(final_fasta_vector, pattern = \"G\")\nthymidine <- str_count(final_fasta_vector, pattern = \"T\")\nnucleotide_numbers <- data.frame(n_adenine = adenine,\n                                 n_cytocine = cytocine,\n                                 n_guanine = guanine,\n                                 n_thymidine = thymidine,\n                                 genbank_accession = names(final_fasta_vector),\n                                 stringsAsFactors = FALSE)\nhead(nucleotide_numbers)\n#  n_adenine n_cytocine n_guanine n_thymidine\n#1       384        410       256         489\n#2       369        399       273         498\n#3       395        340       250         554\n#4       169        161       108         220\n#5       136        116        94         177\n#6       137        117        92         177\n#                                                                                                       genbank_accession\n#1   >MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#2      MW042032.1 Ameerega parvula voucher QCAZ16584 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#3 MW042033.1 Epipedobates anthonyi voucher QCAZ16597 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#4       DQ502853.1 Epipedobates anthonyi isolate 838 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#5           MH589864.1 Oophaga sylvatica isolate CH2 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#6           MH589863.1 Oophaga sylvatica isolate CH1 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.4 Useful functions of stringr",
        "code": "restriction_sites_to_cut_with_BFAL <- str_locate_all(final_fasta_vector, pattern = \"CTAG\")\nnames(restriction_sites_to_cut_with_BFAL) <- names(final_fasta_vector)\nrestriction_sites_to_cut_with_BFAL[1:2]\n#`>MW042030.1 Ameerega bilinguis voucher QCAZ28835 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial`\n#     start  end\n#[1,]    58   61\n#[2,]   142  145\n#[3,]   337  340\n#[4,]   406  409\n#[5,]   475  478\n#[6,]   785  788\n#[7,]   847  850\n#[8,]  1384 1387\n#$`MW042032.1 Ameerega parvula voucher QCAZ16584 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial`\n#     start  end\n#[1,]    58   61\n#[2,]   475  478\n#[3,]   785  788\n#[4,]   847  850\n#[5,]  1024 1027\n#[6,]  1072 1075\n#[7,]  1384 1387"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "my_vector <- 1:10\nmy_vector\n#[1]  1  2  3  4  5  6  7  8  9 10\nmy_list <- as.list(my_vector)\nmy_list"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "unlist(my_list)\n#[1]  1  2  3  4  5  6  7  8  9 10"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "my_data_frame <- as.data.frame(my_vector, stringsAsFactors = FALSE)\nhead(my_data_frame)\n#  my_vector\n#1         1\n#2         2\n#3         3\n#4         4\n#5         5\n#6         6"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "# create a list of two vectors of numbers\nmy_list2 <- list(odd_numbers = c(1,3,5,7,9),\n               prime_numbers = c(1,2,3,5,7,11,13,17))\nmy_list2\n#$odd_numbers\n#[1] 1 3 5 7 9\n#$prime_numbers\n#[1]  1  2  3  5  7 11 13 17"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "lapply(my_list2, mean)\n#$odd_numbers\n#[1] 5\n#$prime_numbers\n#[1] 7.375"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "my_data_frame <- data.frame(A = c(1,2,NA,3,4), \n                            B = c(NA,4,1,67,-2), \n                            C = c(-2,3,1,99,NA), \n                            D = c(78,56,9,3,NA), stringsAsFactors = FALSE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "rownames(my_data_frame) <- c(\"row_1\", \"row_2\", \"row_3\", \"row_4\", \"row_5\")\nmy_data_frame\n#         A  B  C  D\n#  row_1  1 NA -2 78\n#  row_2  2  4  3 56\n#  row_3 NA  1  1  9\n#  row_4  3 67 99  3\n#  row_5  4 -2 NA NA"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "names_columns <- names(my_data_frame)\nmax_values <- apply(my_data_frame,1,max)\nnames(max_values) <- rownames(my_data_frame)\nmax_values\n#row_1 row_2 row_3 row_4 row_5 \n#   NA    56    NA    99    NA "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "max_values_no_NA <- apply(my_data_frame,1,max, na.rm = TRUE)\nnames(max_values_no_NA) <- rownames(my_data_frame)\nmax_values_no_NA\n#row_1 row_2 row_3 row_4 row_5 \n#   78    56     9    99     4 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "max_values_columns_no_NA <- apply(my_data_frame,2,max, na.rm = TRUE)\nnames(max_values_columns_no_NA) <- names(my_data_frame)\nmax_values_columns_no_NA\n# A  B  C  D \n# 4 67 99 78 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "colSums (my_data_frame, na.rm = TRUE)\n#  A   B   C   D \n# 10  70 101 146 \nrowSums (my_data_frame, na.rm = TRUE)\n#row_1 row_2 row_3 row_4 row_5 \n#   77    65    11   172     2 \ncolMeans(my_data_frame, na.rm = TRUE)\n#    A     B     C     D \n# 2.50 17.50 25.25 36.50 \nrowMeans(my_data_frame, na.rm = TRUE)\n#    row_1     row_2     row_3     row_4     row_5 \n#25.666667 16.250000  3.666667 43.000000  1.000000 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "# install R-package 'purrr' if not present\ninstall.packages(\"purrr\")\nlibrary(purrr)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "my_data_frame_1_0 <- purrr::modify(my_data_frame,function(x)ifelse(x>=0,1,0))\nrownames(my_data_frame_1_0) <- rownames(my_data_frame)\nmy_data_frame_1_0\n#       A  B  C  D\n#row_1  1 NA  0  1\n#row_2  1  1  1  1\n#row_3 NA  1  1  1\n#row_4  1  1  1  1\n#row_5  1  0 NA NA"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "my_data_frame$sum_of_my_rows <- rowSums (my_data_frame, na.rm = TRUE)\nmy_data_frame\n#       A  B  C  D sum_of_my_rows\n#row_1  1 NA -2 78             77\n#row_2  2  4  3 56             65\n#row_3 NA  1  1  9             11\n#row_4  3 67 99  3            172\n#row_5  4 -2 NA NA              2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "my_column_sums <- colSums (my_data_frame, na.rm = TRUE)\n# we add this row using rbind() and modify my_data_frame\nmy_data_frame <- rbind(my_data_frame, my_column_sums)\nmy_data_frame\n#       A  B   C   D sum_of_my_rows\n#row_1  1 NA  -2  78             77\n#row_2  2  4   3  56             65\n#row_3 NA  1   1   9             11\n#row_4  3 67  99   3            172\n#row_5  4 -2  NA  NA              2\n#6     10 70 101 146            327"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "rownames(my_data_frame)[6] <- \"row_6\"\nmy_data_frame\n#       A  B   C   D sum_of_my_rows\n#row_1  1 NA  -2  78             77\n#row_2  2  4   3  56             65\n#row_3 NA  1   1   9             11\n#row_4  3 67  99   3            172\n#row_5  4 -2  NA  NA              2\n#row_6 10 70 101 146            327"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "my_data_frame_1_0[6,] <- c(NA,NA,NA,NA)\nrownames(my_data_frame_1_0)[6] <- \"row_6\"\nmy_data_frame_1_0\n#       A  B  C  D\n#row_1  1 NA  0  1\n#row_2  1  1  1  1\n#row_3 NA  1  1  1\n#row_4  1  1  1  1\n#row_5  1  0 NA NA\n#row_6 NA NA NA NA"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "names_my_data_frame_1_0 <- names(my_data_frame_1_0)\nnew_names_my_data_frame_1_0 <- paste0(names_my_data_frame_1_0, \"_as_1_0\")\nnames(my_data_frame_1_0) <- new_names_my_data_frame_1_0\nmy_data_frame_1_0\n#      A_as_1_0 B_as_1_0 C_as_1_0 D_as_1_0\n#row_1        1       NA        0        1\n#row_2        1        1        1        1\n#row_3       NA        1        1        1\n#row_4        1        1        1        1\n#row_5        1        0       NA       NA\n#row_6       NA       NA       NA       NA"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "my_data_frame$index <- rownames(my_data_frame)\nmy_data_frame_1_0$index <- rownames(my_data_frame_1_0)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/text-editing-and-data-transformations.html",
        "section": "Session 4 \u2013 Text Editing and Data Transformations",
        "subsection": "4.5 Data transformations",
        "code": "my_combined_data_frame <- merge(my_data_frame, my_data_frame_1_0, by = 'index')\nmy_combined_data_frame\n#  index  A  B   C   D sum_of_my_rows A_as_1_0 B_as_1_0 C_as_1_0 D_as_1_0\n#1 row_1  1 NA  -2  78             77        1       NA        0        1\n#2 row_2  2  4   3  56             65        1        1        1        1\n#3 row_3 NA  1   1   9             11       NA        1        1        1\n#4 row_4  3 67  99   3            172        1        1        1        1\n#5 row_5  4 -2  NA  NA              2        1        0       NA       NA\n#6 row_6 10 70 101 146            327       NA       NA       NA       NA"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "## We have downloaded this R-package before, so you just need to load it in the R environment.\nlibrary(rentrez)\n## We define our working folder, where we can download our retrieved sequences -- THIS IS EXCLUSIVE FOR YOUR COMPUTER AND IT IS NOT THE PATH SHOWN BELOW\nsetwd(\"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "entrez_dbs()\n#  [1] \"pubmed\"          \"protein\"         \"nuccore\"         \"ipg\"             \"nucleotide\"      \"structure\"       \"genome\"         \n# [8] \"annotinfo\"       \"assembly\"        \"bioproject\"      \"biosample\"       \"blastdbinfo\"     \"books\"           \"cdd\"            \n#[15] \"clinvar\"         \"gap\"             \"gapplus\"         \"grasp\"           \"dbvar\"           \"gene\"            \"gds\"            \n#[22] \"geoprofiles\"     \"medgen\"          \"mesh\"            \"nlmcatalog\"      \"omim\"            \"orgtrack\"        \"pmc\"            \n#[29] \"proteinclusters\" \"pcassay\"         \"protfam\"         \"pccompound\"      \"pcsubstance\"     \"seqannot\"        \"snp\"            \n#[36] \"sra\" "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "# Brief description of what the database is\nentrez_db_summary(\"nuccore\")\n#DbName: nuccore\n#MenuName: Nucleotide\n#Description: Core Nucleotide db\n#DbBuild: Build250217-2005m.1\n#Count: 648904443\n#LastUpdate: 2025/02/18 23:22\n\n# Set of search terms that can used with this database\nentrez_db_searchable(\"nuccore\")\n#Searchable fields for database 'nuccore'\n#  ALL   All terms from all searchable fields \n#  UID   Unique number assigned to each sequence \n#  FILT      Limits the records \n#  WORD      Free text associated with record \n#  TITL      Words in definition line \n#  KYWD      Nonstandardized terms provided by submitter \n#  AUTH      Author(s) of publication \n#  JOUR      Journal abbreviation of publication \n#  VOL   Volume number of publication \n#  ISS   Issue number of publication \n#  PAGE      Page number(s) of publication \n#  ORGN      Scientific and common names of organism, and all higher levels of taxonomy \n#  ACCN      Accession number of sequence \n#  PACC      Does not include retired secondary accessions \n#  GENE      Name of gene associated with sequence \n#  PROT      Name of protein associated with sequence \n#  ECNO      EC number for enzyme or CAS registry number \n#  PDAT      Date sequence added to GenBank \n#  MDAT      Date of last update \n#  SUBS      CAS chemical name or MEDLINE Substance Name \n#  PROP      Classification by source qualifiers and molecule type \n#  SQID      String identifier for sequence \n#  GPRJ      BioProject \n#  SLEN      Length of sequence \n#  FKEY      Feature annotated on sequence \n#  PORG      Scientific and common names of primary organism, and all higher levels of taxonomy \n#  COMP      Component accessions for an assembly \n#  ASSM      Assembly \n#  DIV   Division \n#  STRN      Strain \n#  ISOL      Isolate \n#  CULT      Cultivar \n#  BRD   Breed \n#  BIOS      BioSample\n\n# Set of databases that might contain linked records    \nentrez_db_links(\"nuccore\")  \n#Databases with linked records for database 'nuccore'\n# [1] assembly        assembly        biocollections  bioproject      bioproject      bioproject      biosample       biosystems     \n# [9] ccds            clone           nuccore         dbvar           gene            genome          genome          geoprofiles    \n#[17] homologene      nuccore         nuccore         nuccore         nuccore         nuccore         nuccore         nuccore        \n#[25] nuccore         nuccore         nuccore         omim            pccompound      pcsubstance     pmc             popset         \n#[33] probe           protein         protein         protein         protein         protein         protein         protein        \n#[41] protein         proteinclusters pubmed          pubmed          pubmed          snp             sparcle         sra            \n#[49] sra             structure       taxonomy        trace    "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "my_MF580102 <- entrez_search(db = \"nuccore\", term =  \"MF580102.1\")\nmy_MF580102\n#Entrez search result with 1 hits (object contains 1 IDs and no web_history object)\n# Search term (as translated):\nstr(my_MF580102)\n#List of 5\n# $ ids             : chr \"1248341807\"\n# $ count           : int 1\n# $ retmax          : int 1\n# $ QueryTranslation: chr \"\"\n# $ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n# - attr(*, \"class\")= chr [1:2] \"esearch\" \"list\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "# sequence Id for Allobates kingsburyi CHRNB2\nmy_MF580102$ids\n#[1] \"1248341807\"\n# retrieving this sequence\n\nmy_MF580102_data <- entrez_fetch(db = \"nuccore\",\n                                 id = my_MF580102$ids,\n                            rettype = \"fasta\")\n\ncat(my_MF580102_data)\n#>MF580102.1 Allobates kingsburyi nicotinic acetylcholine receptor beta-2 (chrnb2) gene, partial cds\n#ATGACGGTTCTCCTCCTCCTCCTGCACCTCAGCCTGTTCGGCCTGGTCACCAGGAGTATGGGCACGGACA\n#CCGAGGAGCGGCTCGTGGAATTCCTGCTGGACCCGTCCCAGTACAACAAGCTGATCCGGCCCGCCACCAA\n#TGGATCCGAGCAGGTCACCGTCCAGCTGATGGTATCTCTGGCCCAGCTGATCAGCGTGCACGAGCGGGAG\n#CAGATAATGACGACGAATGTCTGGCTCACTCAGGAATGGGANNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n#NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCTGGCTGCCAGACGTCGTCCTGTACAA\n#CAACGCTGATGGGATGTACGAGGTCTCATTCTACTCGAATGCGGTGGTCTCGCATGACGGCAGCATCTTC\n#TGGCTACCCCCCGCCATCTATAAGAGTGCCTGTAAGATTGAGGTGAAGCATTTCCCCTTTGATCAGCAGA\n#ACTGCACCATGAAGTTTCGCTCATGGACKTACGACCGCACGGAGCTGGACCTGGTGCTGAAGAGCGACGT\n#GGCCAGTTTGGATGACTTCACCCCCAGCGGGGAGTGGGACATCATCGCCCTGCCGGGACGCCGGAATGAG\n#AACCCCGAGGACTCCACCTACGTTGACATCACTTACGATTTTATCATCCGCCGCAAGCCGCTGTTCTACA\n#CCATCAACTTGATCATCCCCTGCATCCTCATCACCTCACTGGCAATTCTGGTCTTCTACCTGCCCTCGGA\n#CTGTGGCGAGAAGATGACGCTCTGCATCTCCGTGCTGCTGGCGCTCACCGTCTTCTTACTGCTCATCTCC\n#AAGATTGTGCCCCCGACGTCCCTGGACGTCCCGCTCGTCGGCAAGTACCTGATGTTCAC"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "my_related_nuccore_sequences <- entrez_search(db = \"nuccore\", term = \"popset+representative+uid+1248341807[word]\")\nmy_related_nuccore_sequences\n#Entrez search result with 0 hits (object contains 0 IDs and no web_history object)\n# Search term (as translated):  (popset+representative+uid+1248341807[word]) "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "my_related_nuccore_sequences <- entrez_search(db = \"nuccore\", term = \"popset+representative+uid+1248341763[word]\")\nmy_related_nuccore_sequences\n#Entrez search result with 30 hits (object contains 20 IDs and no web_history object)\n# Search term (as translated):  popset+representative+uid+1248341763[word] \nstr(my_related_nuccore_sequences)\n#List of 5\n# $ ids             : chr [1:20] \"1248341821\" \"1248341819\" \"1248341817\" \"1248341815\" ...\n# $ count           : int 30\n# $ retmax          : int 20\n# $ QueryTranslation: chr \"popset+representative+uid+1248341763[word]\"\n# $ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n# - attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\nmy_related_nuccore_sequences_ids <- my_related_nuccore_sequences$ids\nmy_related_nuccore_sequences_ids\n# [1] \"1248341821\" \"1248341819\" \"1248341817\" \"1248341815\" \"1248341813\" \"1248341811\" \"1248341809\" \"1248341807\" \"1248341805\" \"1248341803\"\n#[11] \"1248341801\" \"1248341799\" \"1248341797\" \"1248341795\" \"1248341793\" \"1248341791\" \"1248341789\" \"1248341787\" \"1248341785\" \"1248341783\"\n\n# we need to append the original nuccore `1248341763`\nmy_related_nuccore_sequences_ids <- c(1248341763, my_related_nuccore_sequences_ids)\nmy_related_nuccore_sequences_ids\n# [1] \"1248341763\" \"1248341821\" \"1248341819\" \"1248341817\" \"1248341815\" \"1248341813\" \"1248341811\" \"1248341809\" \"1248341807\" \"1248341805\"\n#[11] \"1248341803\" \"1248341801\" \"1248341799\" \"1248341797\" \"1248341795\" \"1248341793\" \"1248341791\" \"1248341789\" \"1248341787\" \"1248341785\"\n#[21] \"1248341783\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "acetylcholine_receptor_data <- entrez_fetch(db = \"nuccore\",\n                                            id = my_related_nuccore_sequences_ids,\n                                       rettype = \"fasta\")\nacetylcholine_receptor_data\n#[1] \">MF580080.1 Espadarana callistomma nicotinic acetylcholine receptor beta-2 (chrnb2) gene, complete cds\\nATGACGGTTCTCCTC...\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "name_of_file <- paste0(\"acetylcholine_receptor_nuccore_data.txt\")\nname_of_file\n#[1] \"acetylcholine_receptor_nuccore_data.txt\"\nwrite(acetylcholine_receptor_data, file = name_of_file)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "my_nuccore_links <- entrez_link(dbfrom='nuccore', id=1248341763, db='all')\nstr(my_nuccore_links)\n#List of 2\n# $ links:List of 5\n#  ..$ nuccore_popset  : chr \"1248341763\"\n#  ..$ nuccore_protein : chr \"1248341764\"\n#  ..$ nuccore_pubmed  : chr \"28935799\"\n#  ..$ nuccore_taxonomy: chr \"526126\"\n#  ..$ nuccore_pmc     : chr \"5834227\"\n#  ..- attr(*, \"class\")= chr [1:2] \"elink_classic\" \"list\"\n# $ file :Classes 'XMLInternalElementNode', 'XMLInternalNode', 'XMLAbstractNode' <externalptr> \n# - attr(*, \"content\")= chr \" $links: IDs for linked records from NCBI\\n \"\n# - attr(*, \"class\")= chr [1:2] \"elink\" \"list\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "my_nuccore_links$links$nuccore_pmc\n#[1] \"5834227\"\npmc_ids <- my_nuccore_links$links$nuccore_pmc\npmc_ids\n#[1] \"5834227\"\nmy_literature <- entrez_fetch(db = \"pmc\", id = pmc_ids, rettype=\"native\")\nmy_literature\n#[1] \"1:  Interacting Amino Acid Replacements Allow Poison Frogs to Evolve Epibatidine Resistance\\nRebecca D. Tarvin, Cecilia M. Borghese, Wiebke Sachs, Juan C. Santos, Ying Lu, Lauren A. O\u2019Connell, David C. Cannatella, R. Adron Harris, Harold H. Zakon\\nScience. Author manuscript; available in PMC 2018 Mar 22.Published in final edited form as: Science. 2017 Sep 22; 357(6357): 1261\u20131266.  doi: 10.1126/science.aan5061\\nPMCID: PMC5834227\\n\\n\"\ncat(my_literature)\n#1:  Interacting Amino Acid Replacements Allow Poison Frogs to Evolve Epibatidine Resistance\n#Rebecca D. Tarvin, Cecilia M. Borghese, Wiebke Sachs, Juan C. Santos, Ying Lu, Lauren A. O\u2019Connell, David C. Cannatella, R. Adron Harris, Harold H. Zakon\n#Science. Author manuscript; available in PMC 2018 Mar 22.Published in final edited form as: Science. 2017 Sep 22; 357(6357): 1261\u20131266.  doi: 10.1126/science.aan5061\n#PMCID: PMC5834227"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "my_nuccore_links$links$nuccore_protein\n#[1] \"1248341764\"\nprotein_ids <- my_nuccore_links$links$nuccore_protein\nprotein_ids\n#[1] \"1248341764\"\nmy_related_protein_sequences <- entrez_search(db = \"protein\", term = \"popset+representative+uid+1248341763[word]\")\nmy_related_protein_sequences\n#Entrez search result with 30 hits (object contains 20 IDs and no web_history object)\n# Search term (as translated):  popset+representative+uid+1248341763[word] \nstr(my_related_protein_sequences)\n#List of 5\n# $ ids             : chr [1:20] \"1248341822\" \"1248341820\" \"1248341818\" \"1248341816\" ...\n# $ count           : int 30\n# $ retmax          : int 20\n# $ QueryTranslation: chr \"popset+representative+uid+1248341763[word]\"\n# $ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n# - attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\nmy_related_protein_sequences_ids <- my_related_protein_sequences$ids\nmy_related_protein_sequences_ids\n# [1] \"1248341822\" \"1248341820\" \"1248341818\" \"1248341816\" \"1248341814\" \"1248341812\" \"1248341810\" \"1248341808\" \"1248341806\" \"1248341804\"\n#[11] \"1248341802\" \"1248341800\" \"1248341798\" \"1248341796\" \"1248341794\" \"1248341792\" \"1248341790\" \"1248341788\" \"1248341786\" \"1248341784\"\n\n# we need to append the original PROTEIN \"1248341764\"\n\nmy_related_protein_sequences_ids <- c(1248341764, my_related_protein_sequences_ids)\nmy_related_protein_sequences_ids\n# [1] \"1248341764\" \"1248341822\" \"1248341820\" \"1248341818\" \"1248341816\" \"1248341814\" \"1248341812\" \"1248341810\" \"1248341808\" \"1248341806\"\n#[11] \"1248341804\" \"1248341802\" \"1248341800\" \"1248341798\" \"1248341796\" \"1248341794\" \"1248341792\" \"1248341790\" \"1248341788\" \"1248341786\"\n#[21] \"1248341784\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "acetylcholine_receptor_protein_data <- entrez_fetch(db = \"protein\", id = my_related_protein_sequences_ids, rettype=\"fasta\")\nacetylcholine_receptor_protein_data\n\n#[1] \">ATG31782.1 nicotinic acetylcholine receptor beta-2 [Espadarana callistomma]\\nMTVLLXXXXLGLLGLVTRCLXTDTEERLVEFLLDSSRYNKLIRPA...\n\ncat(acetylcholine_receptor_protein_data)\n\n#>ATG31782.1 nicotinic acetylcholine receptor beta-2 [Espadarana callistomma]\n#MTVLLXXXXLGLLGLVTRCLXTDTEERLVEFLLDSSRYNKLIRPATNGSEQVTVQLMVSLAQLISVHERE\n#QIMTTNVWLTQEWEDYRLTWDPVEFDNMKKVRLPSKHIWLPDVVLYNNADGMYEVSFYSNAVVSYDGSIF\n#WLPPAIYKSACKIEVKHFPFDQQNCTMKFRSWTYDRTELDLVLKSDVASLDDFTPSGEWDIIALPGRRNE\n#NPEDSTYVDITYDFIIRRKPLFYTINLIIPCILITSLAILVFYLPSDCGEKMTLCISVLLALTVFLLLIS\n#KIVPPTSLDVPLVGKYLMFTMVLVTFSIVTSVCVLNVHHRSPTTHTMPPWVKVIFLDKLPTLLFMKQPRQ\n#NCARQRLRQQRKSQERVTGSFFLRDSAKSCTCYVNQATVKKYGGXXGQLPELPEGVNGFRDRQGKVRQCL\n#CGLEEAVDGVRFIADHMKSEDDDQSVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTTNTL\n#LQLNHAAPASN\n\nname_of_file <- paste0(\"acetylcholine_receptor_protein_data.txt\")\nname_of_file\n#[1] \"acetylcholine_receptor_protein_data.txt\"\nwrite(acetylcholine_receptor_protein_data, file = name_of_file)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "## you might have already installed the library Biostrings\nlibrary(Biostrings)\n## get the path to the file with the nucleotide sequences -- THIS IS EXCLUSIVE FOR YOUR COMPUTER AND IT IS NOT THE PATH SHOWN BELOW\nmy_nuccore_as_dna_stringset <- readDNAStringSet(filepath = \"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/acetylcholine_receptor_nuccore_data.txt\", \n                                         format = \"fasta\")\nmy_nuccore_as_dna_stringset\n\n# DNAStringSet object of length 21:\n#     width seq                                                                                                                   names               \n# [1]  1506 ATGACGGTTCTCCTCNNNNNNNNNNNNCTCGGTCTGCTCGGCCTCGTCACAAGATGT...AACTACACAACAAACACGTTATTACAGTTGAACCATGCAGCTCCCGCCTCCAACTAA MF580080.1 Espada...\n# [2]   195 GCTGATGGGATGTATGAGGTCTCCTTCTACTCTAACGCGGTGGTCTCGCACGACGGC...TGCACCATGAAGTTCCGCTCGTGGACTTATGACCGCACCGAGCTGGACCTGGTGCTG MF580109.1 Phyllo...\n# [3]  1506 ATGACGGCTCTCCTCCTCGTCCTGCACCTCAGCCTGCTCGGCCTGGTCACCAGAAGT...AACTACACATCAAACACGTTAATACAGCTGAACCATGGGACCCCCGCCTCCAACTAA MF580108.1 Phyllo...\n# [4]   203 GCTGATGGGATGTATGAGGTCTCCTTCTACTCTAACGCGGTGGTCTCACACGACGGC...GAAGTTCCGCTCATGGACTTATGACCGCACTGAGCTGGACCTGGTGCTGAAGAGTGA MF580107.1 Ranito...\n# [5]   134 GCTGATGGGATGTACGAGGTCTCCTTCTACTCCAACGCGGTGGTCTCGCACGAYGGC...CGCCATCTATAAGAGCGCCTGTAAGATCGAGGTGAAGCACTTTCCGTTCGACCAGCA MF580106.1 Rheoba...\n# ...   ... ...\n#[17]  1506 ATGACGGCTCTCCTCCTCGTCCTGCACCTCAGCCTGCTGGGCCTGGTCACCAGAAGT...AACTACACATCAAACACGTTACTACAGCTAAACCATGGGGCTCCTGCCTCCAACTGA MF580094.1 Epiped...\n#[18]  1462 AAGTATGGGCACGGACACCGAGGAGCGGCTCCTGGAATTCCTGCTGGACCCATCTCG...TCAAACACGTTACTACAGCTGAACCATGGGGCTCCTGCCTCCAACTGAAGGCGAACC MF580093.1 Epiped...\n#[19]  1506 ATGACGGCTCTCCTCCTCGTCCTGCACCTCAGCCTGCTGGGCCTGGTCACCAGAAGT...AACTACACATCAAACACGTTACTACAGCTGAACCATGGGGCTCCTGCCTCCAACTGA MF580092.1 Epiped...\n#[20]  1506 ATGACGGCTCTCCTCCTCGTCCTGCACCTCAGCCTGTTGGGCCTGGTCACCAGAAGT...AACTACACATCAAACACGTTACTACAGCTGAACCATGGGGCTCCTGCCTCCAACTGA MF580091.1 Epiped...\n#[21]  1506 ATGACGGCTCTCCTCCTCGTCCTGCACCTCAGCCTGCTGGGCCTGGTCACCAGAAGT...AACTACACATCAAACACRTTACTACAGCTGAACCATGGGGCTCCTGCCTCCAACTGA MF580090.1 Epiped..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.2 Accessing NCBI within R: rentrez",
        "code": "# get the path to the file with the amino acid sequences -- THIS IS EXCLUSIVE FOR YOUR COMPUTER AND IT IS NOT THE PATH SHOWN BELOW\nmy_protein_as_aa_stringset <- readAAStringSet(filepath = \"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/acetylcholine_receptor_protein_data.txt\", \n                                         format = \"fasta\")\nmy_protein_as_aa_stringset\n#AAStringSet object of length 21:\n#     width seq                                                                                                                   names               \n# [1]   501 MTVLLXXXXLGLLGLVTRCLXTDTEERLVEFLLDSSRYNKLIRPATNGSEQVTVQLM...SVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTTNTLLQLNHAAPASN ATG31782.1 nicoti...\n# [2]    65 ADGMYEVSFYSNAVVSHDGSIFWLPPAIYKSACKIEVKHFPFDQQNCTMKFRSWTYDRTELDLVL                                                     ATG31811.1 nicoti...\n# [3]   501 MTALLLVLHLSLLGLVTRSMGTDTEERLVEFLLDPSRYNKLIRPATNGSEQVTVQLM...SVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTSNTLIQLNHGTPASN ATG31810.1 nicoti...\n# [4]    67 ADGMYEVSFYSNAVVSHDGSIFWLPPAIYKSACKIEVKHFPFDQQNCTMKFRSWTYDRTELDLVLKS                                                   ATG31809.1 nicoti...\n# [5]    44 ADGMYEVSFYSNAVVSHDGSIFWLPPAIYKSACKIEVKHFPFDQ                                                                          ATG31808.1 nicoti...\n# ...   ... ...\n#[17]   501 MTALLLVLHLSLLGLVTRSMGTDTEERLVEFLLDPSRYNKLIRPATNGSEQVTVQLM...SVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTSNTLLQLNHGAPASN ATG31796.1 nicoti...\n#[18]   483 SMGTDTEERLLEFLLDPSRYNKLIRPATNGSEQVTVQLMVSLAQLISVHERXXXXXX...SVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTSNTLLQLNHGAPASN ATG31795.1 nicoti...\n#[19]   501 MTALLLVLHLSLLGLVTRSMGTDTEERLVEFLLDPSRYNKLIRPATNGSEQVTVQLM...SVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTSNTLLQLNHGAPASN ATG31794.1 nicoti...\n#[20]   501 MTALLLVLHLSLLGLVTRSMGTDTEERLVEFLLDPSRYNKLIRPATNGSEQVTVQLM...SVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTSNTLLQLNHGAPASN ATG31793.1 nicoti...\n#[21]   501 MTALLLVLHLSLLGLVTRSMGTDTEERLVEFLLDPSRYNKLIRPATNGSEQVTVQLM...SVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTSNTLLQLNHGAPASN ATG31792.1 nicoti..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.3 Retrieving PubMed references",
        "code": "## make sure that 'rentrez' is loaded\nrequire(rentrez)\n## retrieve IDs from NCBI\ngenus_publications_IDs <- entrez_search(db=\"pubmed\", term=\"Ameerega\")\nstr(genus_publications_IDs)\n#List of 5\n# $ ids             : chr [1:20] \"39646486\" \"39473883\" \"37889647\" \"35391365\" ...\n# $ count           : int 21\n# $ retmax          : int 20\n# $ QueryTranslation: chr \"\\\"Ameerega\\\"[All Fields]\"\n# $ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n# - attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\n\ngenus_publications_medline <- entrez_fetch(db=\"pubmed\", id=genus_publications_IDs$ids, rettype=\"medline\")\ncat(genus_publications_medline)\n\n#PMID- 39473883\n#OWN - NLM\n#STAT- PubMed-not-MEDLINE\n#LR  - 20241030\n#IS  - 1045-2249 (Print)\n#IS  - 1465-7279 (Electronic)\n#IS  - 1045-2249 (Linking)\n#VI  - 35\n#IP  - 6\n#DP  - 2024 Nov-Dec\n#TI  - Detectability of a poison frog and its Batesian mimic depends on body posture and \n#      viewing angle.\n#PG  - arae077\n#LID - 10.1093/beheco/arae077 [doi]\n#LID - arae077\n#AB  - Aposematic signals warn predators that prey should be avoided due to dangerous \n#      secondary defences. However, as warning signals do not always produce avoidance, \n#      warning colors may evolve as a trade-off balancing detectability against signal \n#      saliency. For Batesian mimics, which display salient signals but lack secondary \n#      defenses, the costs of predator encounters are greater, potentially increasing \n#      the benefit of crypsis. This raises the question of whether imperfect mimicry may \n#      reduce detectability while retaining mimetic efficacy. We tested this hypothesis \n#      with the poisonous frog Ameerega bilinguis and undefended Batesian mimic \n#      Allobates zaparo, using computational visual modeling and screen-based detection \n#      trials with human participants. We found that both species incorporate camouflage \n#      into their warning colors, but to different degrees depending on viewing angle \n#      and behavior. Contrary to expectation, we found differences in detectability \n#      between model and mimic that do not adhere to the hypothesized cryptic mimetic \n#      phenotype. To aerial observers, we found the mimic to be more detectable than the \n#      model. To terrestrial observers, likely owing to the model's bright ventral \n#      color, we found the model more detectable in viewing angles that highlight the \n#      ventral coloration, whereas the mimic was more detectable in viewing angles that \n#      highlight the dorsal coloration. Consequently, we suggest that in addition to \n#      being the result of perceptual or developmental constraints, imperfect mimicry \n#      may also evolve as an adaptive strategy which balances camouflage with different \n#      signaling functions. Our findings complement the emerging view that aposematic \n#      signals may evolve in response to a multitude of selection pressures beyond \n#      aversion alone.\n#CI  - (c) The Author(s) 2024. Published by Oxford University Press on behalf of the \n#      International Society for Behavioral Ecology.\n#FAU - McEwen, Brendan L\n#AU  - McEwen BL\n#AUID- ORCID: 0000-0003-1672-0638\n#AD  - Department of Psychology, Neuroscience, & Behaviour, McMaster University, \n#      Hamilton, ON L8S 4L8, Canada.\n#FAU - Yeager, Justin\n#AU  - Yeager J\n#AUID- ORCID: 0000-0001-8692-6311\n#AD  - Grupo de Investigacion en Biodiversidad, Medio Ambiente y Salud (BIOMAS), \n#      Facultad de Ingenierias y Ciencas Aplicadas, Universidad de Las Americas, \n#      Ecuador.\n#FAU - Kinley, Isaac\n#AU  - Kinley I\n#AUID- ORCID: 0000-0003-2057-9606\n#AD  - Department of Psychology, Neuroscience, & Behaviour, McMaster University, \n#      Hamilton, ON L8S 4L8, Canada.\n#AD  - Rotman Research Institute at Baycrest, Toronto, ON M6A 1W1, Canada.\n#FAU - Anderson, Hannah M\n#AU  - Anderson HM\n#AUID- ORCID: 0000-0002-3620-4641\n#AD  - Department of Psychology, Neuroscience, & Behaviour, McMaster University, \n#      Hamilton, ON L8S 4L8, Canada.\n#FAU - Barnett, James B\n#AU  - Barnett JB\n#AUID- ORCID: 0000-0001-9789-4132\n#AD  - Department of Psychology, Neuroscience, & Behaviour, McMaster University, \n#      Hamilton, ON L8S 4L8, Canada.\n#AD  - School of Natural Sciences, Trinity College Dublin, Dublin 2 D02 PN40, Ireland.\n#LA  - eng\n#SI  - Dryad/10.5061/dryad.bzkh189k7\n#PT  - Journal Article\n#DEP - 20241004\n#PL  - United States\n#TA  - Behav Ecol\n#JT  - Behavioral ecology : official journal of the International Society for Behavioral \n#      Ecology\n#JID - 9426330\n#PMC - PMC11520748\n#OTO - NOTNLM\n#OT  - Aposematism\n#OT  - Batesian mimicry\n#OT  - detectability\n#OT  - imperfect mimicry\n#OT  - poison frogs\n#OT  - visual ecology\n#COIS- The authors declare they have no conflicts of interest.\n#EDAT- 2024/10/30 10:54\n#MHDA- 2024/10/30 10:55\n#PMCR- 2024/10/04\n#CRDT- 2024/10/30 04:41\n#PHST- 2023/12/06 00:00 [received]\n#PHST- 2024/07/17 00:00 [revised]\n#PHST- 2024/10/01 00:00 [accepted]\n#PHST- 2024/10/30 10:55 [medline]\n#PHST- 2024/10/30 10:54 [pubmed]\n#PHST- 2024/10/30 04:41 [entrez]\n#PHST- 2024/10/04 00:00 [pmc-release]\n#AID - arae077 [pii]\n#AID - 10.1093/beheco/arae077 [doi]\n#PST - epublish\n#SO  - Behav Ecol. 2024 Oct 4;35(6):arae077. doi: 10.1093/beheco/arae077. eCollection \n#      2024 Nov-Dec.\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.3 Retrieving PubMed references",
        "code": "# this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/my_working_directory\")\nwrite(genus_publications_medline, \"my_genus_publications_as_medline_format.txt\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.3 Retrieving PubMed references",
        "code": "## make sure that 'rentrez' is loaded\nrequire(rentrez)\n## retrieve IDs from NCBI\ngenus_publications_IDs <- entrez_search(db=\"pubmed\", term=\"Ameerega\")\nstr(genus_publications_IDs)\n#List of 5\n# $ ids             : chr [1:20] \"39646486\" \"39473883\" \"37889647\" \"35391365\" ...\n# $ count           : int 21\n# $ retmax          : int 20\n# $ QueryTranslation: chr \"\\\"Ameerega\\\"[All Fields]\"\n# $ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n# - attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\n\ngenus_publications_abstract <- entrez_fetch(db=\"pubmed\", id=genus_publications_IDs$ids, rettype=\"abstract\")\ncat(genus_publications_abstract)\n\n\n#Behav Ecol. 2024 Oct 4;35(6):arae077. doi: 10.1093/beheco/arae077. eCollection \n#2024 Nov-Dec.\n#\n#Detectability of a poison frog and its Batesian mimic depends on body posture \n#and viewing angle.\n#\n#McEwen BL(1), Yeager J(2), Kinley I(1)(3), Anderson HM(1), Barnett JB(1)(4).\n#\n#Author information:\n#(1)Department of Psychology, Neuroscience, & Behaviour, McMaster University, \n#Hamilton, ON\u00a0L8S 4L8, Canada.\n#(2)Grupo de Investigaci\u00f3n en Biodiversidad, Medio Ambiente y Salud (BIOMAS), \n#Facultad de Ingenier\u00edas y Ciencas Aplicadas, Universidad de Las Am\u00e9ricas, \n#Ecuador.\n#(3)Rotman Research Institute at Baycrest, Toronto, ON M6A 1W1, Canada.\n#(4)School of Natural Sciences, Trinity College Dublin, Dublin 2 D02 PN40, \n#Ireland.\n#\n#Aposematic signals warn predators that prey should be avoided due to dangerous \n#secondary defences. However, as warning signals do not always produce avoidance, \n#warning colors may evolve as a trade-off balancing detectability against signal \n#saliency. For Batesian mimics, which display salient signals but lack secondary \n#defenses, the costs of predator encounters are greater, potentially increasing \n#the benefit of crypsis. This raises the question of whether imperfect mimicry \n#may reduce detectability while retaining mimetic efficacy. We tested this \n#hypothesis with the poisonous frog Ameerega bilinguis and undefended Batesian \n#mimic Allobates zaparo, using computational visual modeling and screen-based \n#detection trials with human participants. We found that both species incorporate \n#camouflage into their warning colors, but to different degrees depending on \n#viewing angle and behavior. Contrary to expectation, we found differences in \n#detectability between model and mimic that do not adhere to the hypothesized \n#cryptic mimetic phenotype. To aerial observers, we found the mimic to be more \n#detectable than the model. To terrestrial observers, likely owing to the model's \n#bright ventral color, we found the model more detectable in viewing angles that \n#highlight the ventral coloration, whereas the mimic was more detectable in \n#viewing angles that highlight the dorsal coloration. Consequently, we suggest \n#that in addition to being the result of perceptual or developmental constraints, \n#imperfect mimicry may also evolve as an adaptive strategy which balances \n#camouflage with different signaling functions. Our findings complement the \n#emerging view that aposematic signals may evolve in response to a multitude of \n#selection pressures beyond aversion alone.\n#\n#\u00a9 The Author(s) 2024. Published by Oxford University Press on behalf of the \n#International Society for Behavioral Ecology.\n#\n#DOI: 10.1093/beheco/arae077\n#PMCID: PMC11520748\n#PMID: 39473883\n#\n#Conflict of interest statement: The authors declare they have no conflicts of \n#interest.\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.3 Retrieving PubMed references",
        "code": "# this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/my_working_directory\")\nwrite(genus_publications_abstract, \"my_genus_publications_as_abstract_format.txt\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.4 Comparing sequences: BLAST",
        "code": ">MF580102.1 Allobates kingsburyi nicotinic acetylcholine receptor beta-2 (chrnb2) gene, partial cds\nATGACGGTTCTCCTCCTCCTCCTGCACCTCAGCCTGTTCGGCCTGGTCACCAGGAGTATGGGCACGGACA\nCCGAGGAGCGGCTCGTGGAATTCCTGCTGGACCCGTCCCAGTACAACAAGCTGATCCGGCCCGCCACCAA\nTGGATCCGAGCAGGTCACCGTCCAGCTGATGGTATCTCTGGCCCAGCTGATCAGCGTGCACGAGCGGGAG\nCAGATAATGACGACGAATGTCTGGCTCACTCAGGAATGGGANNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCTGGCTGCCAGACGTCGTCCTGTACAA\nCAACGCTGATGGGATGTACGAGGTCTCATTCTACTCGAATGCGGTGGTCTCGCATGACGGCAGCATCTTC\nTGGCTACCCCCCGCCATCTATAAGAGTGCCTGTAAGATTGAGGTGAAGCATTTCCCCTTTGATCAGCAGA\nACTGCACCATGAAGTTTCGCTCATGGACKTACGACCGCACGGAGCTGGACCTGGTGCTGAAGAGCGACGT\nGGCCAGTTTGGATGACTTCACCCCCAGCGGGGAGTGGGACATCATCGCCCTGCCGGGACGCCGGAATGAG\nAACCCCGAGGACTCCACCTACGTTGACATCACTTACGATTTTATCATCCGCCGCAAGCCGCTGTTCTACA\nCCATCAACTTGATCATCCCCTGCATCCTCATCACCTCACTGGCAATTCTGGTCTTCTACCTGCCCTCGGA\nCTGTGGCGAGAAGATGACGCTCTGCATCTCCGTGCTGCTGGCGCTCACCGTCTTCTTACTGCTCATCTCC\nAAGATTGTGCCCCCGACGTCCCTGGACGTCCCGCTCGTCGGCAAGTACCTGATGTTCAC"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.5 Other databases: UniProt",
        "code": "#install and load the package\ninstall.packages(\"UniprotR\")\n\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"GenomicAlignments\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.5 Other databases: UniProt",
        "code": "# load required libraries\nlibrary(UniprotR)\nlibrary(GenomicAlignments)\nlibrary(Biostrings)\n\n# retrieve sequences\nother_CHRNB2_ids <- c(\"P17787\", \"Q9ERK7\", \"P09484\", \"A0A3Q1MJN8\", \"E7F4S7\", \"H3B5V5\", \"H9GMJ0\", \"A4IIS6\")\nother_CHRNB2_raw <- UniprotR::GetSequences(other_CHRNB2_ids)\nclass(other_CHRNB2_raw)\n#[1] \"data.frame\"\n# this is a complex data structure and we need the sequences that can be later process as AAStringSet\nstr(other_CHRNB2_raw)\n#'data.frame':  8 obs. of  23 variables:\n#$ Fragment                       : logi  NA NA NA NA NA NA ...\n#$ Gene.encoded.by                : logi  NA NA NA NA NA NA ...\n#$ Alternative.products..isoforms.: logi  NA NA NA NA NA NA ...\n#$ Erroneous.gene.model.prediction: logi  NA NA NA NA NA NA ...\n#$ Erroneous.initiation           : logi  NA NA NA NA NA NA ...\n#$ Erroneous.termination          : logi  NA NA NA NA NA NA ...\n#$ Erroneous.translation          : logi  NA NA NA NA NA NA ...\n#$ Frameshift                     : logi  NA NA NA NA NA NA ...\n#$ Mass.spectrometry              : logi  NA NA NA NA NA NA ...\n#$ Polymorphism                   : logi  NA NA NA NA NA NA ...\n#$ RNA.editing                    : logi  NA NA NA NA NA NA ...\n#$ Sequence.caution               : logi  NA NA NA NA NA NA ...\n#$ Length                         : int  502 501 491 509 543 478 509 499\n#$ Mass                           : Factor w/ 8 levels \"57,019\",\"57,113\",..: 1 2 3 4 5 6 7 8\n#$ Sequence                       : Factor w/ 8 levels \"MARRCGPVALLLGFGLLRLCSGVWGTDTEERLVEHLLDPSRYNKLIRPATNGSELVTVQLMVSLAQLISVHEREQIMTTNVWLTQEWEDYRLTWKPEEFDNMKKVRLPSKH\"| __truncated__,..: 1 2 3 4 5 6 7 8\n#$ Alternative.sequence           : logi  NA NA NA NA NA NA ...\n#$ Natural.variant                : Factor w/ 1 level \"VARIANT 287;  /note=V -> L (in ENFL3; dbSNP:rs74315291);  /evidence=ECO:0000269|PubMed:11062464;  /id=VAR_01271\"| __truncated__: 1 NA NA NA NA NA NA NA\n#$ Non.adjacent.residues          : logi  NA NA NA NA NA NA ...\n#$ Non.standard.residue           : logi  NA NA NA NA NA NA ...\n#$ Non.terminal.residue           : logi  NA NA NA NA NA NA ...\n#$ Sequence.conflict              : Factor w/ 2 levels \"CONFLICT 26;  /note=T -> A (in Ref. 4; CAA05108);  /evidence=ECO:0000305; CONFLICT 426;  /note=E -> A (in Ref. \"| __truncated__,..: 1 2 NA NA NA NA NA NA\n#$ Sequence.uncertainty           : logi  NA NA NA NA NA NA ...\n#$ Version..sequence.             : int  1 2 1 1 1 1 1 1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.5 Other databases: UniProt",
        "code": "other_CHRNB2_aa <- other_CHRNB2_raw$Sequence\nclass(other_CHRNB2_aa)\n#[1] \"factor\"\n# we transform to a character vector\nother_CHRNB2_aa <- as.character(other_CHRNB2_aa)\nclass(other_CHRNB2_aa)\nother_CHRNB2_aa\n#[1] \"MARRCGPVALLLGFGLLRLCSGVWGTDTEERLVEHLLDPSRYNKLIRPATNGSELVTVQLMVSLAQLISVHEREQIMTTNVWLTQEWEDYRLTWKPEEFDNMKKVRL...\"                                         \n#[2] \"MARCSNSMALLFSFGLLWLCSGVLGTDTEERLVEHLLDPSRYNKLIRPATNGSELVTVQLMVSLAQLISVHEREQIMTTNVWLTQEWEDYRLTWKPEDFDNMKKVRL...\"                                          \n#[3] \"MALLRVLCLLAALRRSLCTDTEERLVEYLLDPTRYNKLIRPATNGSQLVTVQLMVSLAQLISVHEREQIMTTNVWLTQEWEDYRLTWKPEDFDNMKKVRLPSKHIWL...\" "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.5 Other databases: UniProt",
        "code": "# get a names character vector\nnames_of_other_CHRNB2_aa <- rownames(other_CHRNB2_raw)\nnames_of_other_CHRNB2_aa\n#[1] \"P17787\"     \"Q9ERK7\"     \"P09484\"     \"A0A3Q1MJN8\" \"E7F4S7\"     \"H3B5V5\"     \"H9GMJ0\"     \"A4IIS6\"\nnames_of_organism <- c(\"human\", \"mouse\", \"chicken\", \"Bos_taurus\", \"Danio_rerio\", \"coelacanth\", \"Anolis\", \"Xenopus_tropicalis\")\n# we can combine names\nfinal_names <- character()\nfor(i in 1:length(names_of_organism)) { final_names[i] <- paste0(\">\",names_of_organism[i],\"_\",names_of_other_CHRNB2_aa[i],\"\\n\")}\nfinal_names\n#[1] \">human_P17787\\n\"              \">mouse_Q9ERK7\\n\"              \">chicken_P09484\\n\"           \n#[4] \">Bos_taurus_A0A3Q1MJN8\\n\"     \">Danio_rerio_E7F4S7\\n\"        \">coelacanth_H3B5V5\\n\"        \n#[7] \">Anolis_H9GMJ0\\n\"             \">Xenopus_tropicalis_A4IIS6\\n\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.5 Other databases: UniProt",
        "code": "end_uniprot_fasta <- paste0(final_names,other_CHRNB2_aa, collapse = \"\\n\")\nend_uniprot_fasta\n#[1] \">human_P17787\\nMARRCGPVALLLGFGLLRLCSGVWGTDTEERLVEHLLDPSRYNKLIRPATNGSELVTVQLMVSLAQLISVHEREQIMTTNVWLTQEWEDYRLTWKPEEFDNMKKVRL..\ncat(end_uniprot_fasta)\n#>human_P17787\n#MARRCGPVALLLGFGLLRLCSGVWGTDTEERLVEHLLDPSRYNKLIRPATNGSELVTVQLMVSLAQLISVHEREQIMTTNVWLTQEWEDYRLTWKPEEFDNMKKVRLPSKHIWLPDVVLYNNADGMY...\n#>mouse_Q9ERK7\n#MARCSNSMALLFSFGLLWLCSGVLGTDTEERLVEHLLDPSRYNKLIRPATNGSELVTVQLMVSLAQLISVHEREQIMTTNVWLTQEWEDYRLTWKPEDFDNMKKVRLPSKHIWLPDVVLYNNADGMY...\n#>chicken_P09484\n#MALLRVLCLLAALRRSLCTDTEERLVEYLLDPTRYNKLIRPATNGSQLVTVQLMVSLAQLISVHEREQIMTTNVWLTQEWEDYRLTWKPEDFDNMKKVRLPSKHIWLPDVVLYNNADGMYEVSFYSN...\n\n# we write the output to a text file -- REMEMBER TO SET A PATH TO THE FOLDER THAT YOU WANT IN YOUR COMPUTER\nname_of_file <- paste0(\"acetylcholine_receptor_Uniprot.txt\")\nname_of_file\n#[1] \"acetylcholine_receptor_popset_1248341763.txt\"\nwrite(end_uniprot_fasta, file = name_of_file)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.5 Other databases: UniProt",
        "code": "# get the path to the uniprot file with the amino acid sequences -- THIS IS EXCLUSIVE FOR YOUR COMPUTER AND IT IS NOT THE PATH SHOWN BELOW\nmy_uniprot_as_aa_stringset <- readAAStringSet(filepath = \"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/acetylcholine_receptor_Uniprot.txt\", \n                                               format = \"fasta\")\nmy_uniprot_as_aa_stringset\n#  A AAStringSet instance of length 8\n#   width seq                                                                                       names               \n#[1]   502 MARRCGPVALLLGFGLLRLCSGVWGTDTEERLVEHLLDPSRYN...RLFLWIFVFVCVFGTIGMFLQPLFQNYTTTTFLHSDHSAPSSK human_P17787\n#[2]   501 MARCSNSMALLFSFGLLWLCSGVLGTDTEERLVEHLLDPSRYN...RLFLWIFVFVCVFGTIGMFLQPLFQNYTATTFLHSDHSAPSSK mouse_Q9ERK7\n#[3]   491 MALLRVLCLLAALRRSLCTDTEERLVEYLLDPTRYNKLIRPAT...RLFLWIFVFVCVFGTVGMFLQPLFQNYATNSLLQLGQGTPTSK chicken_P09484\n#[4]   509 MAWLSGPKAMLLSFGLLGLCSGVWGTDTEERLVEHLLDPSRYN...FVCVFGTIGMFLQPLFQNYATATFLHADHSAPSSKCVLSPPEI Bos_taurus_A0A3Q1...\n#[5]   543 MMALWTLFCILAIVKSGYGADTEERLVEHLLNPAHYNKLIRPA...VAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTAKTITHTPG Danio_rerio_E7F4S7\n#[6]   478 SLAMDTEERLVGHLLNPAHYNKLIRPATNRSEVVTVQLMVSLA...MVIDRLFLWIFVFVCIFGTLGMFLQPVFQNSSFDSLPQKTNAA coelacanth_H3B5V5\n#[7]   509 CAASSHFAACPASGSLLGLSAGVLGTDTEERLVEHLLDPLRYN...RLFLWIFVFVCVFGTIGMFLQPLFQNYATNSLLQIHQGAPGSK Anolis_H9GMJ0\n#[8]   499 MIRTGMAPLLAALYLLLGLLPGCLGTDTEERLVEHLLDPSRYN...VIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTTNALVHMNHAAN Xenopus_tropicali..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.5 Other databases: UniProt",
        "code": "all_aa_stringset <- c(my_protein_as_aa_stringset, my_uniprot_as_aa_stringset)\nall_aa_stringset\n#AAStringSet object of length 29:\n#     width seq                                                                                                                      names               \n# [1]   501 MTVLLXXXXLGLLGLVTRCLXTDTEERLVEFLLDSSRYNKLIRPATNGSEQVTVQLMVS...QSVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTTNTLLQLNHAAPASN ATG31782.1 nicoti...\n# [2]    65 ADGMYEVSFYSNAVVSHDGSIFWLPPAIYKSACKIEVKHFPFDQQNCTMKFRSWTYDRTELDLVL                                                        ATG31811.1 nicoti...\n# [3]   501 MTALLLVLHLSLLGLVTRSMGTDTEERLVEFLLDPSRYNKLIRPATNGSEQVTVQLMVS...QSVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTSNTLIQLNHGTPASN ATG31810.1 nicoti...\n# [4]    67 ADGMYEVSFYSNAVVSHDGSIFWLPPAIYKSACKIEVKHFPFDQQNCTMKFRSWTYDRTELDLVLKS                                                      ATG31809.1 nicoti...\n# [5]    44 ADGMYEVSFYSNAVVSHDGSIFWLPPAIYKSACKIEVKHFPFDQ                                                                             ATG31808.1 nicoti...\n# ...   ... ...\n#[25]   509 MAWLSGPKAMLLSFGLLGLCSGVWGTDTEERLVEHLLDPSRYNKLIRPATNGSELVTVQ...YVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYATATFLHADHSAPSSKCVLSPPEI Bos_taurus_A0A3Q1...\n#[26]   543 MMALWTLFCILAIVKSGYGADTEERLVEHLLNPAHYNKLIRPATNGSEVVTVQLMVSLA...KSEDDDRSVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTAKTITHTPG Danio_rerio_E7F4S7\n#[27]   478 SLAMDTEERLVGHLLNPAHYNKLIRPATNRSEVVTVQLMVSLAQLISVHERAQIMTTNC...EDKKRSVIEDWKYVAMVIDRLFLWIFVFVCIFGTLGMFLQPVFQNSSFDSLPQKTNAA coelacanth_H3B5V5\n#[28]   509 CAASSHFAACPASGSLLGLSAGVLGTDTEERLVEHLLDPLRYNKLIRPATNGSELVTVQ...QSVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYATNSLLQIHQGAPGSK Anolis_H9GMJ0\n#[29]   499 MIRTGMAPLLAALYLLLGLLPGCLGTDTEERLVEHLLDPSRYNKLIRPATNGSEQVTVQ...DDDQSVSEDWKYVAMVIDRLFLWIFVFVCVFGTIGMFLQPLFQNYTTNALVHMNHAAN Xenopus_tropicali..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.6 Other databases: Ensembl",
        "code": "BiocManager::install(\"biomaRt\")\nlibrary(biomaRt)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.6 Other databases: Ensembl",
        "code": "listMarts()\n#               biomart                version\n#1 ENSEMBL_MART_ENSEMBL      Ensembl Genes 102\n#2   ENSEMBL_MART_MOUSE      Mouse strains 102\n#3     ENSEMBL_MART_SNP  Ensembl Variation 102\n#4 ENSEMBL_MART_FUNCGEN Ensembl Regulation 102"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.6 Other databases: Ensembl",
        "code": "mart <- useMart('ensembl')\n# this will give you at least 203 dataset to search\nlistDatasets(mart)\n#                           dataset                                                  description                           version\n#1         acalliptera_gene_ensembl                             Eastern happy genes (fAstCal1.2)                        fAstCal1.2\n#2       acarolinensis_gene_ensembl                               Anole lizard genes (AnoCar2.0)                         AnoCar2.0\n#3        acchrysaetos_gene_ensembl                              Golden eagle genes (bAquChr1.2)                        bAquChr1.2\n#4        acitrinellus_gene_ensembl                               Midas cichlid genes (Midas_v5)                          Midas_v5\n#5        amelanoleuca_gene_ensembl                                        Panda genes (ailMel1)                           ailMel1\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.6 Other databases: Ensembl",
        "code": "xenopus_mart <- useMart(\"ensembl\", dataset=\"xtropicalis_gene_ensembl\")\nlistFilters(xenopus_mart)\n#                              name                                                      description\n#1                  chromosome_name                                         Chromosome/scaffold name\n#2                            start                                                            Start\n#3                              end                                                              End\n#4                           strand                                                           Strand\n#5               chromosomal_region                           e.g. 1:100:10000:-1, 1:100000:200000:1\n#6       with_entrezgene_trans_name                            With EntrezGene transcript name ID(s)\n#7                        with_embl                           With European Nucleotide Archive ID(s)\n#8                with_arrayexpress                                      With Expression Atlas ID(s)\n#9                          with_go                                                    With GO ID(s)\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/getting-biological-data-from-public-repositories.html",
        "section": "Session 5 \u2013 Getting Biological Data from Public Repositories",
        "subsection": "5.6 Other databases: Ensembl",
        "code": "xenopus_CHRNB2_seq_hgnc_symbol <- getSequence(id = \"chrnb2\", \n                                            type = \"uniprot_gn_symbol\", \n                                         seqType = \"peptide\", \n                                            mart = xenopus_mart)\n\nxenopus_CHRNB2_seq_uniprot_id <- getSequence(id = \"A4IIS6\", \n                                            type = \"uniprot_gn_id\", \n                                         seqType = \"peptide\", \n                                            mart = xenopus_mart, verbose = TRUE)\n\n\nshow(xenopus_CHRNB2_seq_uniprot_id)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "## NOTE: remember to update the path to files with the datasets where you downloaded in your computer -- THIS IS EXCLUSIVE TO YOUR COMPUTER AND IT IS NOT THE PATH SHOWN BELOW\n\n#define a working directory\nsetwd(\"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory\")\n#load get mtcars dataset -- this a preloaded dataset in R\ncars_data <- mtcars\ncars_data\n#                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#...\n#load get 'airway_scaledcounts.csv' dataset \nairway_data <- read.table(\"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/airway_scaledcounts.csv\",\n               header = TRUE, sep = \",\", stringsAsFactors = FALSE)\n#          ensgene SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 SRR1039520 SRR1039521\n#1 ENSG00000000003        723        486        904        445       1170       1097        806        604\n#2 ENSG00000000005          0          0          0          0          0          0          0          0\n#3 ENSG00000000419        467        523        616        371        582        781        417        509\n#4 ENSG00000000457        347        258        364        237        318        447        330        324\n#5 ENSG00000000460         96         81         73         66        118         94        102         74\n#6 ENSG00000000938          0          0          1          0          2          0          0          0\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "summary(cars_data)\n#     mpg             cyl             disp             hp             drat             wt             qsec             vs        \n# Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0   Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n# 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5   1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n# Median :19.20   Median :6.000   Median :196.3   Median :123.0   Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n# Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7   Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n# 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0   3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n# Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0   Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n#       am              gear            carb      \n# Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n# 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n# Median :0.0000   Median :4.000   Median :2.000  \n# Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n# 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n# Max.   :1.0000   Max.   :5.000   Max.   :8.000  \nsummary(airway_data)\n#   ensgene            SRR1039508         SRR1039509         SRR1039512         SRR1039513         SRR1039516    \n# Length:38694       Min.   :     0.0   Min.   :     0.0   Min.   :     0.0   Min.   :     0.0   Min.   :     0  \n# Class :character   1st Qu.:     0.0   1st Qu.:     0.0   1st Qu.:     0.0   1st Qu.:     0.0   1st Qu.:     0  \n# Mode  :character   Median :     1.0   Median :     1.0   Median :     1.0   Median :     0.0   Median :     1  \n#                    Mean   :   546.5   Mean   :   501.1   Mean   :   673.6   Mean   :   405.3   Mean   :   649  \n#                    3rd Qu.:   203.0   3rd Qu.:   172.0   3rd Qu.:   237.0   3rd Qu.:   128.0   3rd Qu.:   228  \n#                    Max.   :287372.0   Max.   :244921.0   Max.   :510107.0   Max.   :304818.0   Max.   :410979  \n#   SRR1039517         SRR1039520         SRR1039521      \n# Min.   :     0.0   Min.   :     0.0   Min.   :     0.0  \n# 1st Qu.:     0.0   1st Qu.:     0.0   1st Qu.:     0.0  \n# Median :     1.0   Median :     1.0   Median :     1.0  \n# Mean   :   822.5   Mean   :   509.0   Mean   :   565.7  \n# 3rd Qu.:   261.0   3rd Qu.:   185.8   3rd Qu.:   183.0  \n# Max.   :416837.0   Max.   :378108.0   Max.   :372973.0  "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "#car data boxplot\nboxplot(mpg~cyl, data=cars_data, col=(c(\"#DA291CFF\", \"#56A8CBFF\", \"#53A567FF\")), main=\"car data boxplots\", xlab=\"cylinders\") "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "# you might need to install R-package 'reshape2' \ninstall.packages(\"reshape2\")\nlibrary(reshape2)\n# reduce the \"airway_data\" to only the continuous variables.\n\nairway_data_very_high_low <- airway_data\nairway_data_reduced2 <- airway_data[,2:ncol(airway_data_very_high_low)]\nhead(airway_data_reduced2)\n#  SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 SRR1039520 SRR1039521\n#1        723        486        904        445       1170       1097        806        604\n#2          0          0          0          0          0          0          0          0\n#3        467        523        616        371        582        781        417        509\n#4        347        258        364        237        318        447        330        324\n#5         96         81         73         66        118         94        102         74\n#6          0          0          1          0          2          0          0          0\nairway_data_reduced2_melted <- melt(airway_data_reduced2)\n#No id variables; using all as measure variables\n# we will change the names of the columns to reflect what they represent.\nnames(airway_data_reduced2_melted) <- c(\"sample\", \"expression\")\nhead(airway_data_reduced2_melted)\n#    sample expression\n#1 SRR1039508   723\n#2 SRR1039508     0\n#3 SRR1039508   467\n#4 SRR1039508   347\n#5 SRR1039508    96\n#6 SRR1039508     0\n\n#airway_data boxplots\nboxplot(expression~sample, data=airway_data_reduced2_melted, main=\"airway_data boxplots\", xlab=\"samples\") "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "# we already installed R-package 'purrr' \nlibrary(purrr)\n# we create an alternative object, so we original raw data airway_data\nairway_data_very_high_low <- airway_data\n# We will apply a the conditional\nairway_data_very_high_low <- purrr::modify(airway_data_very_high_low,function(x) {ifelse(x >= 10000, \"very_high\",\n                                                                                     ifelse( x >= 100, \"high\", \"low\"))})\nhead(airway_data_very_high_low)\n#    ensgene SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 SRR1039520 SRR1039521\n#1 very_high       high       high       high       high       high       high       high       high\n#2 very_high        low        low        low        low        low        low        low        low\n#3 very_high       high       high       high       high       high       high       high       high\n#4 very_high       high       high       high       high       high       high       high       high\n#5 very_high        low        low        low        low       high        low       high        low\n#6 very_high        low        low        low        low        low        low        low        low\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "airway_data_very_high_low$ensgene <- airway_data$ensgene\nhead(airway_data_very_high_low)\n#          ensgene SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 SRR1039520 SRR1039521\n#1 ENSG00000000003       high       high       high       high       high       high       high       high\n#2 ENSG00000000005        low        low        low        low        low        low        low        low\n##3 ENSG00000000419       high       high       high       high       high       high       high       high\n#4 ENSG00000000457       high       high       high       high       high       high       high       high\n#5 ENSG00000000460        low        low        low        low       high        low       high        low\n#6 ENSG00000000938        low        low        low        low        low        low        low        low\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "airway_data_reduced <- airway_data_very_high_low[,2:ncol(airway_data_very_high_low)]\n# collect frequencies on samples\nsummary_frequencies_airway_data <- list()\nfor(i in 1:ncol(airway_data_reduced)) {\n                    sample_name <- names(airway_data_reduced[i])\n                      one_table <- table(airway_data_reduced[i])\n                      # from table to vector\n          one_contigency_vector <- as.numeric(one_table)\n                      # add names of categories\n   names(one_contigency_vector) <- names(one_table)\n                 one_data_frame <- as.data.frame(one_contigency_vector)\n                     # add name of sample\n          names(one_data_frame) <- sample_name\n                     # collect results in list\n    summary_frequencies_airway_data[[i]] <- one_data_frame     \n                                }\nsummary_frequencies_airway_data\n#[[[1]]\n#          SRR1039508\n#high           11051\n#low            27372\n#very_high        271\n#\n#[[2]]\n#          SRR1039509\n#high           10708\n#low            27722\n#very_high        264\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "final_summary_all_samples_df <- do.call(cbind, summary_frequencies_airway_data)\nfinal_summary_all_samples_df\n#          SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 SRR1039520 SRR1039521\n#high           11051      10708      11268      10107      11203      11242      10946      10813\n#low            27372      27722      27066      28402      27148      26961      27510      27595\n#very_high        271        264        360        185        343        491        238        286"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "sample_names <- names(airway_data_reduced)[1:2]\ntitle_test <- paste0(sample_names, collapse =\"..vs..\")\ncontigency_result <- summary(table(airway_data_reduced[,1], airway_data_reduced[,2]))\ncat(title_test, \"\\n\"); print(contigency_result)\n#SRR1039508..vs..SRR1039509 \n#Number of cases in table: 38694 \n#Number of factors: 2 \n#Test for independence of all factors:\n#   Chisq = 58193, df = 4, p-value = 0\n#   Chi-squared approximation may be incorrect"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.1 Exploring your data",
        "code": "counter <- 0\ncollect_test_independence <- list()\n\nfor(i in 1:ncol(airway_data_reduced)) {\n               # i <- 1\n               names_sample_i <- names(airway_data_reduced)[i]\n                n <- i + 1\n      upper_limit <- ncol(airway_data_reduced)+1\n                if(n < upper_limit) {\n                    cat(\"sample:\",names_sample_i, \"..vs..\")\n                      for(j in n:ncol(airway_data_reduced)) {\n                                    counter <- counter + 1\n                                    names_sample_j <- names(airway_data_reduced)[j]\n                                    cat(names_sample_j, \"....\")\n                                  list_name <- paste0(names_sample_i,\"..vs..\", names_sample_j)\n       collect_test_independence[[counter]] <- summary(table(airway_data_reduced[,i], airway_data_reduced[,j]))\n  names(collect_test_independence)[counter] <- list_name\n                                                             }\n                                                           cat(\"\\n\")                                             \n                                   } else {break}\n                                        }\n\n#sample: SRR1039508 ..vs..SRR1039509 ....SRR1039512 ....SRR1039513 ....SRR1039516 ....SRR1039517 ....SRR1039520 ....SRR1039521 ....\n#sample: SRR1039509 ..vs..SRR1039512 ....SRR1039513 ....SRR1039516 ....SRR1039517 ....SRR1039520 ....SRR1039521 ....\n#sample: SRR1039512 ..vs..SRR1039513 ....SRR1039516 ....SRR1039517 ....SRR1039520 ....SRR1039521 ....\n#sample: SRR1039513 ..vs..SRR1039516 ....SRR1039517 ....SRR1039520 ....SRR1039521 ....\n#sample: SRR1039516 ..vs..SRR1039517 ....SRR1039520 ....SRR1039521 ....\n#sample: SRR1039517 ..vs..SRR1039520 ....SRR1039521 ....\n#sample: SRR1039520 ..vs..SRR1039521 ....\n\n# if you call the collect_test_independence, you will get the statistics for independence\ncollect_test_independence\n#$SRR1039508..vs..SRR1039509\n#Number of cases in table: 38694 \n#Number of factors: 2 \n#Test for independence of all factors:\n#   Chisq = 58193, df = 4, p-value = 0\n#   Chi-squared approximation may be incorrect\n#\n#$SRR1039508..vs..SRR1039512\n#Number of cases in table: 38694 \n#Number of factors: 2 \n#Test for independence of all factors:\n#   Chisq = 58274, df = 4, p-value = 0\n#   Chi-squared approximation may be incorrect"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.2 Sub-setting your dataset",
        "code": "## we can install MASS and load the dataset for this example\ninstall.packages(\"MASS\")\nlibrary(MASS)\n## We assign Cars93 dataset to an object\nmy_cars <- Cars93\nstr(my_cars)\n#'data.frame':  93 obs. of  27 variables:\n# $ Manufacturer      : Factor w/ 32 levels \"Acura\",\"Audi\",..: 1 1 2 2 3 4 4 4 4 5 ...\n# $ Model             : Factor w/ 93 levels \"100\",\"190E\",\"240\",..: 49 56 9 1 6 24 54 74 73 35 ...\n# $ Type              : Factor w/ 6 levels \"Compact\",\"Large\",..: 4 3 1 3 3 3 2 2 3 2 ...\n# $ Min.Price         : num  12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ...\n# $ Price             : num  15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ...\n# $ Max.Price         : num  18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ...\n# $ MPG.city          : int  25 18 20 19 22 22 19 16 19 16 ...\n# $ MPG.highway       : int  31 25 26 26 30 31 28 25 27 25 ...\n# $ AirBags           : Factor w/ 3 levels \"Driver & Passenger\",..: 3 1 2 1 2 2 2 2 2 2 ...\n# $ DriveTrain        : Factor w/ 3 levels \"4WD\",\"Front\",..: 2 2 2 2 3 2 2 3 2 2 ...\n# $ Cylinders         : Factor w/ 6 levels \"3\",\"4\",\"5\",\"6\",..: 2 4 4 4 2 2 4 4 4 5 ...\n# $ EngineSize        : num  1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ...\n# $ Horsepower        : int  140 200 172 172 208 110 170 180 170 200 ...\n# $ RPM               : int  6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ...\n# $ Rev.per.mile      : int  2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ...\n# $ Man.trans.avail   : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 1 1 1 1 1 ...\n# $ Fuel.tank.capacity: num  13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ...\n# $ Passengers        : int  5 5 5 6 4 6 6 6 5 6 ...\n# $ Length            : int  177 195 180 193 186 189 200 216 198 206 ...\n# $ Wheelbase         : int  102 115 102 106 109 105 111 116 108 114 ...\n# $ Width             : int  68 71 67 70 69 69 74 78 73 73 ...\n# $ Turn.circle       : int  37 38 37 37 39 41 42 45 41 43 ...\n# $ Rear.seat.room    : num  26.5 30 28 31 27 28 30.5 30.5 26.5 35 ...\n# $ Luggage.room      : int  11 15 14 17 13 16 17 21 14 18 ...\n# $ Weight            : int  2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ...\n# $ Origin            : Factor w/ 2 levels \"USA\",\"non-USA\": 2 2 2 2 2 1 1 1 1 1 ...\n# $ Make              : Factor w/ 93 levels \"Acura Integra\",..: 1 2 4 3 5 6 7 9 8 10 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.2 Sub-setting your dataset",
        "code": "subset_my_cars <- subset(my_cars, select = c(Origin, Manufacturer, Price, Passengers, MPG.city, EngineSize))\nhead(subset_my_cars)\n#  Origin Manufacturer Price Passengers MPG.city EngineSize\n#1 non-USA        Acura  15.9          5       25        1.8\n#2 non-USA        Acura  33.9          5       18        3.2\n#3 non-USA         Audi  29.1          5       20        2.8\n#4 non-USA         Audi  37.7          6       19        2.8\n#5 non-USA          BMW  30.0          4       22        3.5\n#6     USA        Buick  15.7          6       22        2.2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.2 Sub-setting your dataset",
        "code": "only_usa_subset_my_cars <- subset(subset_my_cars, Origin == \"USA\")\nhead(only_usa_subset_my_cars)\n#   Origin Manufacturer Price Passengers MPG.city EngineSize\n#6     USA        Buick  15.7          6       22        2.2\n#7     USA        Buick  20.8          6       19        3.8\n#8     USA        Buick  23.7          6       16        5.7\n#9     USA        Buick  26.3          5       19        3.8\n#10    USA     Cadillac  34.7          6       16        4.9\n#11    USA     Cadillac  40.1          5       16        4.6"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.2 Sub-setting your dataset",
        "code": "only_large_engine_subset_my_cars <- subset(subset_my_cars, EngineSize >= 3.0)\nhead(only_large_engine_subset_my_cars)\n#       Origin Manufacturer Price Passengers MPG.city EngineSize\n#2  non-USA        Acura  33.9          5       18        3.2\n#5  non-USA          BMW  30.0          4       22        3.5\n#7      USA        Buick  20.8          6       19        3.8\n#8      USA        Buick  23.7          6       16        5.7\n#9      USA        Buick  26.3          5       19        3.8\n#10     USA     Cadillac  34.7          6       16        4.9"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.2 Sub-setting your dataset",
        "code": "some_of_my_cars <- subset(subset_my_cars, Origin == \"non-USA\" & EngineSize <= 4.0)\nhead(some_of_my_cars)\n#    Origin Manufacturer Price Passengers MPG.city EngineSize\n#1  non-USA        Acura  15.9          5       25        1.8\n#2  non-USA        Acura  33.9          5       18        3.2\n#3  non-USA         Audi  29.1          5       20        2.8\n#4  non-USA         Audi  37.7          6       19        2.8\n#5  non-USA          BMW  30.0          4       22        3.5\n#39 non-USA          Geo   8.4          4       46        1.0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.3 Transposing (rotating) your dataset",
        "code": "## this is time series dataset as a data frame\nUK_deaths <- data.frame(year_1974=c(3035,2552,2704,2554,2014,1655,1721,1524,1596,2074,2199,2512),\n                        year_1975 = c(2933,2889,2938,2497,1870,1726,1607,1545,1396,1787,2076,2837),\n                        year_1976 = c(2787,3891,3179,2011,1636,1580,1489,1300,1356,1653,2013,2823),\n                        year_1977 = c(3102,2294,2385,2444,1748,1554,1498,1361,1346,1564,1640,2293),\n                        year_1978 = c(2815,3137,2679,1969,1870,1633,1529,1366,1357,1570,1535,2491),\n                        year_1979 = c(3084,2605,2573,2143,1693,1504,1461,1354,1333,1492,1781,1915), stringsAsFactors = FALSE)\nrownames(UK_deaths) <- c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\n\n## this dataset has months as rows and years as columns\n\nUK_deaths\n#    year_1974 year_1975 year_1976 year_1977 year_1978 year_1979\n# Jan      3035      2933      2787      3102      2815      3084\n# Feb      2552      2889      3891      2294      3137      2605\n# Mar      2704      2938      3179      2385      2679      2573\n# Apr      2554      2497      2011      2444      1969      2143\n# May      2014      1870      1636      1748      1870      1693\n# Jun      1655      1726      1580      1554      1633      1504\n# Jul      1721      1607      1489      1498      1529      1461\n# Aug      1524      1545      1300      1361      1366      1354\n# Sep      1596      1396      1356      1346      1357      1333\n# Oct      2074      1787      1653      1564      1570      1492\n# Nov      2199      2076      2013      1640      1535      1781\n# Dec      2512      2837      2823      2293      2491      1915\nstr(UK_deaths)\n#'data.frame':  12 obs. of  6 variables:\n# $ year_1974: num  3035 2552 2704 2554 2014 ...\n# $ year_1975: num  2933 2889 2938 2497 1870 ...\n# $ year_1976: num  2787 3891 3179 2011 1636 ...\n# $ year_1977: num  3102 2294 2385 2444 1748 ...\n# $ year_1978: num  2815 3137 2679 1969 1870 ...\n# $ year_1979: num  3084 2605 2573 2143 1693 ..\n\n## we can transpose this UK_deaths to have months as columns\nUK_deaths_t <- as.data.frame(t(UK_deaths),stringsAsFactors = FALSE)\nclass(UK_deaths_t)\n#[1] \"data.frame\"\n\nUK_deaths_t\n#           Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec\n# year_1974 3035 2552 2704 2554 2014 1655 1721 1524 1596 2074 2199 2512\n# year_1975 2933 2889 2938 2497 1870 1726 1607 1545 1396 1787 2076 2837\n# year_1976 2787 3891 3179 2011 1636 1580 1489 1300 1356 1653 2013 2823\n# year_1977 3102 2294 2385 2444 1748 1554 1498 1361 1346 1564 1640 2293\n# year_1978 2815 3137 2679 1969 1870 1633 1529 1366 1357 1570 1535 2491\n# year_1979 3084 2605 2573 2143 1693 1504 1461 1354 1333 1492 1781 1915"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.4 Dealing with missing (NA) values",
        "code": "## the mtcars is comparisons between 32 automobiles (1973\u201374 models)\nmy_mtcars <- mtcars\nmy_mtcars$car_name <- rownames(my_mtcars)\nrownames(my_mtcars) <- NULL\nmy_mtcars\n#    mpg cyl  disp  hp drat    wt  qsec vs am gear carb            car_name\n# 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4           Mazda RX4\n# 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4       Mazda RX4 Wag\n# 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1          Datsun 710\n# 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1      Hornet 4 Drive\n# 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2   Hornet Sportabout\n# 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1             Valiant\n# 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4          Duster 360\n# 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2           Merc 240D\n# 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2            Merc 230\n# 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4            Merc 280\n# 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4           Merc 280C\n# 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3          Merc 450SE\n# 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3          Merc 450SL\n# 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3         Merc 450SLC\n# 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4  Cadillac Fleetwood\n# 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 Lincoln Continental\n# 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4   Chrysler Imperial\n# 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1            Fiat 128\n# 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2         Honda Civic\n# 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1      Toyota Corolla\n# 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1       Toyota Corona\n# 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2    Dodge Challenger\n# 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2         AMC Javelin\n# 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4          Camaro Z28\n# 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2    Pontiac Firebird\n# 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1           Fiat X1-9\n# 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2       Porsche 914-2\n# 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2        Lotus Europa\n# 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4      Ford Pantera L\n# 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6        Ferrari Dino\n# 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8       Maserati Bora\n# 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2          Volvo 142E\n\n## Lets introduce some NA values randomly\nmy_mtcars_with_NA <- as.data.frame(lapply(my_mtcars, function(x_df) x_df[ sample(c(TRUE, NA), prob = c(0.85, 0.15), size = length(x_df), replace = TRUE) ]))\nmy_mtcars_with_NA\n#    mpg cyl  disp  hp drat    wt  qsec vs am gear carb            car_name\n# 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4                <NA>\n# 2  21.0   6 160.0  NA 3.90 2.875 17.02  0 NA    4   NA                <NA>\n# 3  22.8   4 108.0  93 3.85 2.320    NA NA  1    4    1          Datsun 710\n# 4    NA   6 258.0 110 3.08 3.215    NA  1  0    3    1      Hornet 4 Drive\n# 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2   Hornet Sportabout\n# 6  18.1   6 225.0 105 2.76 3.460 20.22  1 NA    3   NA             Valiant\n# 7  14.3   8 360.0  NA 3.21 3.570    NA  0  0    3   NA          Duster 360\n# 8  24.4   4 146.7  62   NA 3.190 20.00  1  0    4    2           Merc 240D\n# 9  22.8   4    NA  95   NA 3.150 22.90  1  0    4   NA            Merc 230\n# 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0   NA   NA                <NA>\n# 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4   NA           Merc 280C\n# 12 16.4   8 275.8  NA 3.07 4.070 17.40  0  0    3    3          Merc 450SE\n# 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3          Merc 450SL\n# 14 15.2   8    NA 180 3.07 3.780    NA  0  0    3    3                <NA>\n# 15 10.4  NA 472.0 205 2.93    NA 17.98  0  0    3    4  Cadillac Fleetwood\n# 16 10.4  NA 460.0 215 3.00 5.424 17.82  0 NA    3    4 Lincoln Continental\n# 17 14.7   8 440.0  NA 3.23 5.345    NA  0  0    3    4   Chrysler Imperial\n# 18 32.4   4  78.7  66   NA 2.200 19.47  1  1   NA    1            Fiat 128\n# 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2         Honda Civic\n# 20 33.9   4  71.1  NA 4.22 1.835 19.90 NA NA    4    1      Toyota Corolla\n# 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1       Toyota Corona\n# 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2                <NA>\n# 23 15.2   8    NA 150 3.15    NA 17.30  0  0    3    2         AMC Javelin\n# 24   NA   8    NA 245 3.73    NA 15.41  0 NA    3    4          Camaro Z28\n# 25   NA   8 400.0 175   NA 3.845 17.05  0  0    3    2    Pontiac Firebird\n# 26   NA   4  79.0  66 4.08 1.935 18.90  1  1   NA    1           Fiat X1-9\n# 27 26.0   4 120.3  91 4.43    NA 16.70  0 NA    5   NA       Porsche 914-2\n# 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5   NA        Lotus Europa\n# 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4      Ford Pantera L\n# 30   NA   6 145.0 175 3.62    NA 15.50  0  1    5    6                <NA>\n# 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8       Maserati Bora\n# 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1   NA   NA          Volvo 142E"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.4 Dealing with missing (NA) values",
        "code": "## remove all rows with at least on NA\nmy_mtcars_complete_rows <- my_mtcars_with_NA[complete.cases(my_mtcars_with_NA), ]\nmy_mtcars_complete_rows\n#     mpg cyl  disp  hp drat    wt  qsec vs am gear carb          car_name\n# 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 Hornet Sportabout\n# 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3        Merc 450SL\n# 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2       Honda Civic\n# 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1     Toyota Corona\n# 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4    Ford Pantera L\n# 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8     Maserati Bora"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.4 Dealing with missing (NA) values",
        "code": "## remove rows with at least one NA in columns \"mpg\" and \"cyl\"\nmy_mtcars_complete_rows_mpg_cyl <- my_mtcars_with_NA[complete.cases(my_mtcars_with_NA[,c(\"mpg\",\"cyl\")]), ]\nmy_mtcars_complete_rows_mpg_cyl\n#    mpg cyl  disp  hp drat    wt  qsec vs am gear carb          car_name\n# 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4              <NA>\n# 2  21.0   6 160.0  NA 3.90 2.875 17.02  0 NA    4   NA              <NA>\n# 3  22.8   4 108.0  93 3.85 2.320    NA NA  1    4    1        Datsun 710\n# 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 Hornet Sportabout\n# 6  18.1   6 225.0 105 2.76 3.460 20.22  1 NA    3   NA           Valiant\n# 7  14.3   8 360.0  NA 3.21 3.570    NA  0  0    3   NA        Duster 360\n# 8  24.4   4 146.7  62   NA 3.190 20.00  1  0    4    2         Merc 240D\n# 9  22.8   4    NA  95   NA 3.150 22.90  1  0    4   NA          Merc 230\n# 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0   NA   NA              <NA>\n# 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4   NA         Merc 280C\n# 12 16.4   8 275.8  NA 3.07 4.070 17.40  0  0    3    3        Merc 450SE\n# 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3        Merc 450SL\n# 14 15.2   8    NA 180 3.07 3.780    NA  0  0    3    3              <NA>\n# 17 14.7   8 440.0  NA 3.23 5.345    NA  0  0    3    4 Chrysler Imperial\n# 18 32.4   4  78.7  66   NA 2.200 19.47  1  1   NA    1          Fiat 128\n# 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2       Honda Civic\n# 20 33.9   4  71.1  NA 4.22 1.835 19.90 NA NA    4    1    Toyota Corolla\n# 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1     Toyota Corona\n# 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2              <NA>\n# 23 15.2   8    NA 150 3.15    NA 17.30  0  0    3    2       AMC Javelin\n# 27 26.0   4 120.3  91 4.43    NA 16.70  0 NA    5   NA     Porsche 914-2\n# 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5   NA      Lotus Europa\n# 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4    Ford Pantera L\n# 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8     Maserati Bora\n# 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1   NA   NA        Volvo 142E"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.4 Dealing with missing (NA) values",
        "code": "## lets get the am variable as a vector\nmy_NA_am_variable <- my_mtcars_with_NA$am\nmy_NA_am_variable\n#[1] 1 NA 1 0 NA 0 0 0 0 0 0 0 0 0 0 0 0 1 1 NA 0 0 0 0 0 1 1 NA 1 1 1 1\n\n## lets replace NA in the variable am for 0\nmy_replaced_am_variable <- ifelse(is.na(my_NA_am_variable),0,my_NA_am_variable)\nmy_replaced_am_variable\n# [1] 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 1 1 1 1\n\n## lets put back the compled am variable in our data frame\nmy_mtcars_with_completed_am <- my_mtcars_with_NA\nmy_mtcars_with_completed_am$am <- my_replaced_am_variable\nmy_mtcars_with_completed_am\n#    mpg cyl  disp  hp drat    wt  qsec vs am gear carb            car_name\n# 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4                <NA>\n# 2  21.0   6 160.0  NA 3.90 2.875 17.02  0  0    4   NA                <NA>\n# 3  22.8   4 108.0  93 3.85 2.320    NA NA  1    4    1          Datsun 710\n# 4    NA   6 258.0 110 3.08 3.215    NA  1  0    3    1      Hornet 4 Drive\n# 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2   Hornet Sportabout\n# 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0   3   NA             Valiant\n# 7  14.3   8 360.0  NA 3.21 3.570    NA  0  0    3   NA          Duster 360\n# 8  24.4   4 146.7  62   NA 3.190 20.00  1  0    4    2           Merc 240D\n# 9  22.8   4    NA  95   NA 3.150 22.90  1  0    4   NA            Merc 230\n# 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0   NA   NA                <NA>\n# 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4   NA           Merc 280C\n# 12 16.4   8 275.8  NA 3.07 4.070 17.40  0  0    3    3          Merc 450SE\n# 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3          Merc 450SL\n# 14 15.2   8    NA 180 3.07 3.780    NA  0  0    3    3                <NA>\n# 15 10.4  NA 472.0 205 2.93    NA 17.98  0  0    3    4  Cadillac Fleetwood\n# 16 10.4  NA 460.0 215 3.00 5.424 17.82  0  0    3    4 Lincoln Continental\n# 17 14.7   8 440.0  NA 3.23 5.345    NA  0  0    3    4   Chrysler Imperial\n# 18 32.4   4  78.7  66   NA 2.200 19.47  1  1   NA    1            Fiat 128\n# 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2         Honda Civic\n# 20 33.9   4  71.1  NA 4.22 1.835 19.90 NA  0    4    1      Toyota Corolla\n# 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1       Toyota Corona\n# 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2                <NA>\n# 23 15.2   8    NA 150 3.15    NA 17.30  0  0    3    2         AMC Javelin\n# 24   NA   8    NA 245 3.73    NA 15.41  0  0   3    4          Camaro Z28\n# 25   NA   8 400.0 175   NA 3.845 17.05  0  0    3    2    Pontiac Firebird\n# 26   NA   4  79.0  66 4.08 1.935 18.90  1  1   NA    1           Fiat X1-9\n# 27 26.0   4 120.3  91 4.43    NA 16.70  0  0    5   NA       Porsche 914-2\n# 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5   NA        Lotus Europa\n# 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4      Ford Pantera L\n# 30   NA   6 145.0 175 3.62    NA 15.50  0  1    5    6                <NA>\n# 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8       Maserati Bora\n# 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1   NA   NA          Volvo 142E"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.4 Dealing with missing (NA) values",
        "code": "## Lets get the mean value of mpg without removing NAs.\nmean(my_mtcars_with_NA$mpg)\n#[1] NA\n\n## we get an NA and a warning. Now, lets repat with the na.rm = TRUE\nmean(my_mtcars_with_NA$mpg,na.rm = TRUE)\n#[1] 20.07407"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.4 Dealing with missing (NA) values",
        "code": "## We need to remove the discrete variable car_name\nmy_mtcars_with_NA_2 <- subset(my_mtcars_with_NA, select = !names(my_mtcars_with_NA) %in% \"car_name\")\nhead(my_mtcars_with_NA_2)\n#   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n# 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n# 2 21.0   6  160  NA 3.90 2.875 17.02  0 NA    4   NA\n# 3 22.8   4  108  93 3.85 2.320    NA NA  1    4    1\n# 4   NA   6  258 110 3.08 3.215    NA  1  0    3    1\n# 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n# 6 18.1   6  225 105 2.76 3.460 20.22  1 NA    3   NA\n\n## We try to get the mean of all columns and fail\ncolMeans(my_mtcars_with_NA_2)\n# mpg  cyl disp   hp drat   wt qsec   vs   am gear carb \n#   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA \n\n## We try now by removing NA\ncolMeans(my_mtcars_with_NA_2,na.rm = TRUE)\n#       mpg         cyl        disp          hp        drat          wt        qsec          vs          am        gear        carb \n# 20.0740741   6.0666667 225.4464286 143.1111111   3.5828571   3.1672963  17.8462963   0.4000000   0.3846154   3.6428571   2.8260870 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.4 Dealing with missing (NA) values",
        "code": "## group of cars with 4 cylinders\nmpg_4 <- subset(my_mtcars_with_NA, cyl == 4, select = mpg)\nmpg_4\n#     mpg\n#3  22.8\n#8  24.4\n#9  22.8\n#18 32.4\n#19 30.4\n#20 33.9\n#21 21.5\n#26   NA\n#27 26.0\n#28 30.4\n#32 21.4\n\n## group of cars with 6 cylinders\nmpg_6 <- subset(my_mtcars_with_NA, cyl == 6, select = mpg)\nmpg_6\n#    mpg\n#1  21.0\n#2  21.0\n#4    NA\n#6  18.1\n#10 19.2\n#11 17.8\n#30   NA\n\n## We try to do a t.test for pair of groups\nt.test(mpg_4, mpg_6, paired = FALSE)\n#   Welch Two Sample t-test\n#\n#data:  mpg_4 and mpg_6\n#t = 4.3493, df = 11.974, p-value = 0.0009507\n#alternative hypothesis: true difference in means is not equal to 0\n#95 percent confidence interval:\n#  3.582259 10.777741\n#sample estimates:\n#mean of x mean of y \n#    26.60     19.42 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.4 Dealing with missing (NA) values",
        "code": "## We try the wilcox.test and fail\nwilcox.test(mpg_4, mpg_6, paired = FALSE)\n# Error in wilcox.test.default(mpg_4, mpg_6, paired = FALSE) : \n#  'x' must be numeric\n\n## We need to remove NA\nmpg_4_c <- mpg_4[complete.cases(mpg_4),]\nmpg_4_c\n#[1] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 26.0 30.4 21.4\nmpg_6_c <- mpg_6[complete.cases(mpg_6),]\nmpg_6_c\n#[1] 21.0 21.0 18.1 19.2 17.8\n\n## We can try now again the wilcox.test\nwilcox.test(mpg_4_c, mpg_6_c, paired = FALSE,)\n#   Wilcoxon rank sum test with continuity correction\n#\n# data:  mpg_4_c and mpg_6_c\n# W = 50, p-value = 0.002624\n# alternative hypothesis: true location shift is not equal to 0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.6 How to read p-values",
        "code": "## the mtcars is comparisons between 32 automobiles (1973\u201374 models)\nmy_mtcars <- mtcars\nmy_mtcars$car_name <- rownames(my_mtcars)\nrownames(my_mtcars) <- NULL\nstr(my_mtcars)\n#'data.frame':  32 obs. of  12 variables:\n# $ mpg     : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n# $ cyl     : num  6 6 4 6 8 6 8 4 4 6 ...\n# $ disp    : num  160 160 108 258 360 ...\n# $ hp      : num  110 110 93 110 175 105 245 62 95 123 ...\n# $ drat    : num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n# $ wt      : num  2.62 2.88 2.32 3.21 3.44 ...\n# $ qsec    : num  16.5 17 18.6 19.4 17 ...\n# $ vs      : num  0 0 1 1 0 1 0 1 1 1 ...\n# $ am      : num  1 1 1 0 0 0 0 0 0 0 ...\n# $ gear    : num  4 4 4 3 3 3 3 4 4 4 ...\n# $ carb    : num  4 4 1 1 2 1 4 2 2 4 ...\n# $ car_name: chr  \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n\n## group of cars with 4 cylinders\nmpg_4 <- subset(my_mtcars, cyl == 4, select = mpg)\n\n## group of 6 cylinders\nmpg_6 <- subset(my_mtcars, cyl == 6, select = mpg)\n\n## We try to do a t.test for pair of groups\nt.test(mpg_4, mpg_6, paired = FALSE)\n#   Welch Two Sample t-test\n#\n# data:  mpg_4 and mpg_6\n# t = 4.7191, df = 12.956, p-value = 0.0004048\n# alternative hypothesis: true difference in means is not equal to 0\n# 95 percent confidence interval:\n#  3.751376 10.090182\n# sample estimates:\n# mean of x mean of y \n#  26.66364  19.74286 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.7 Multiple testing corrections",
        "code": "## we create a vector of p-values\nx <- rnorm(50, mean = c(rep(0, 25), rep(3, 25)))\np <- 2*pnorm(sort(-abs(x)))\np <- round(p, 5)\np\n#[1] 0.00000 0.00000 0.00002 0.00006 0.00019 0.00033 0.00033 0.00053 0.00131 0.00293 0.00348 0.00385 0.00412 0.01391 0.01479 0.01651 0.04093 0.04185\n#[19] 0.04283 0.06150 0.07324 0.07789 0.08126 0.09249 0.11938 0.13048 0.14542 0.15769 0.15990 0.19556 0.22030 0.22422 0.25180 0.25683 0.28846 0.31366\n#[37] 0.37433 0.40006 0.43389 0.51984 0.54879 0.55692 0.55747 0.66131 0.71076 0.71821 0.72748 0.88428 0.90186 0.92672\n\n## how many are significant\np_less_0_05 <- p[p<0.05]\nlength(p_less_0_05)\n#[1] 19\n\n## we adjust these p-values \np.adjust<- p.adjust(p)\np.adjust\n# [1] 0.00000 0.00000 0.00096 0.00282 0.00874 0.01485 0.01485 0.02279 0.05502 0.12013 0.13920 0.15015 0.15656 0.51467 0.53244 0.57785 1.00000 1.00000\n#[19] 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000\n#[37] 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000\n\n## how many are significant\np.adjust_less_0_05 <- p.adjust[p.adjust<0.05]\nlength(p.adjust_less_0_05)\n#[1] 8"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.8 Normalizing your data",
        "code": "## load library purrr\nlibrary(purrr)\n## modify your data by applting scale using purrr\ncars_data <- mtcars\nhead(cars_data)\n#                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\ncars_data_scaled <- purrr::modify(cars_data, scale)\nhead(cars_data_scaled)\n#                        mpg        cyl        disp         hp       drat           wt       qsec         vs         am       gear       carb\n#Mazda RX4          0.1508848 -0.1049878 -0.57061982 -0.5350928  0.5675137 -0.610399567 -0.7771651 -0.8680278  1.1899014  0.4235542  0.7352031\n#Mazda RX4 Wag      0.1508848 -0.1049878 -0.57061982 -0.5350928  0.5675137 -0.349785269 -0.4637808 -0.8680278  1.1899014  0.4235542  0.7352031\n#Datsun 710         0.4495434 -1.2248578 -0.99018209 -0.7830405  0.4739996 -0.917004624  0.4260068  1.1160357  1.1899014  0.4235542 -1.1221521\n#Hornet 4 Drive     0.2172534 -0.1049878  0.22009369 -0.5350928 -0.9661175 -0.002299538  0.8904872  1.1160357 -0.8141431 -0.9318192 -1.1221521\n#Hornet Sportabout -0.2307345  1.0148821  1.04308123  0.4129422 -0.8351978  0.227654255 -0.4637808 -0.8680278 -0.8141431 -0.9318192 -0.5030337\n#Valiant           -0.3302874 -0.1049878 -0.04616698 -0.6080186 -1.5646078  0.248094592  1.3269868  1.1160357 -0.8141431 -0.9318192 -1.1221521"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.8 Normalizing your data",
        "code": "# Create a sequence of numbers between 0 and 100 by 1\nx <- seq(0, 100, by = 1)\n# Choose the mean as 50 and standard deviation as 17.5\ny <- dnorm(x, mean = 50, sd = 17.5)\n# Plot this distribution\nplot(x,y)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.8 Normalizing your data",
        "code": "# we can perfome in a variable of a data frame applying it as vector\nshapiro.test(cars_data$hp)\n#   Shapiro-Wilk normality test\n#\n#data:  cars_data$hp\n#W = 0.93342, p-value = 0.04881\nshapiro.test(cars_data$qsec)\n#   Shapiro-Wilk normality test\n#\n#data:  cars_data$qsec\n#W = 0.97325, p-value = 0.5935"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.8 Normalizing your data",
        "code": "apply(cars_data,2,shapiro.test)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.8 Normalizing your data",
        "code": "hp_vector <- cars_data$hp\nhp_vector\n#[1] 110 110  93 110 175 105 245  62  95 123 123 180 180 180 205 215 230  66  52  65  97 150 150 245 175  66  91 113 264 175 335 109\n# we test for normality\nshapiro.test(hp_vector)\n#   Shapiro-Wilk normality test\n#\n#data:  cars_data$hp\n#W = 0.93342, p-value = 0.04881\nboxplot(hp_vector, xlab = \"hp\", ylab = \"values\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.8 Normalizing your data",
        "code": "hp_vector_sqrt <- sqrt(hp_vector)\nshapiro.test(hp_vector_sqrt)\n#Shapiro-Wilk normality test\n#\n#data:  hp_vector_sqrt\n#W = 0.96456, p-value = 0.3642\nhp_vector_log10 <- log10(hp_vector)\nshapiro.test(hp_vector_log10)\n#   Shapiro-Wilk normality test\n#\n#data:  hp_vector_log10\n#W = 0.97026, p-value = 0.5065\nboxplot(hp_vector_log10, xlab = \"hp\", ylab = \"values_transformed_by_log10\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.8 Normalizing your data",
        "code": "# if you need to install the R-package bestNormalize\ninstall.packages(\"bestNormalize\")\n# load library\nlibrary(bestNormalize)\n# perform Box-Cox power tranformation.\nhp_vector_boxcox_list <- bestNormalize::boxcox(hp_vector)\nhp_vector_boxcox_list\n#Standardized Box Cox Transformation with 32 nonmissing obs.:\n# Estimated statistics:\n# - lambda = 0.0940865 \n# - mean (before standardization) = 6.21272 \n# - sd (before standardization) = 0.7515468 \nstr(hp_vector_boxcox_list)\n#List of 8\n# $ x.t        : num [1:32] -0.401 -0.401 -0.745 -0.401 0.582 ...\n#$ x          : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...\n#$ mean       : num 6.21\n#$ sd         : num 0.752\n#$ lambda     : num 0.0941\n#$ n          : int 32\n#$ norm_stat  : num 1.4\n#$ standardize: logi TRUE\n#- attr(*, \"class\")= chr [1:2] \"boxcox\" \"list\"\nhp_vector_boxcox <- hp_vector_boxcox_list$x.t\nhp_vector_boxcox\n#(1] -0.4005863 -0.4005863 -0.7454816 -0.4005863  0.5821478 -0.4967035  1.3216259 -1.5563448 -0.7020701 -0.1680641 -0.1680641  0.6431660  0.6431660  0.6431660  0.9269679\n#[16]  1.0317736  1.1809841 -1.4333227 -1.8985905 -1.4634315 -0.6594788  0.2511055  0.2511055  1.3216259  0.5821478 -1.4333227 -0.7897473 -0.3447992  1.4889763  0.5821478\n#[31]  2.0305623 -0.4194885\nboxplot(hp_vector_boxcox, xlab = \"hp\", ylab = \"values_transformed_by_boxcox\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.10 Type of variables in dataset",
        "code": "## we can check the structure of car dataset by loading get mtcars dataset -- this a preloaded dataset in R\ncars_data <- mtcars\n\n## we add the 'car brand' as a character variable named 'brand'.\ncars_data$brand <- rownames(cars_data)\n\n## get the type of variable\n\nstr(cars_data)\n#'data.frame':  32 obs. of  12 variables:\n# $ mpg  : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n# $ cyl  : num  6 6 4 6 8 6 8 4 4 6 ...\n# $ disp : num  160 160 108 258 360 ...\n# $ hp   : num  110 110 93 110 175 105 245 62 95 123 ...\n# $ drat : num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n# $ wt   : num  2.62 2.88 2.32 3.21 3.44 ...\n# $ qsec : num  16.5 17 18.6 19.4 17 ...\n# $ vs   : num  0 0 1 1 0 1 0 1 1 1 ...\n# $ am   : num  1 1 1 0 0 0 0 0 0 0 ...\n# $ gear : num  4 4 4 3 3 3 3 4 4 4 ...\n# $ carb : num  4 4 1 1 2 1 4 2 2 4 ...\n# $ brand: chr  \"Mazda RX4\" \"Mazda RX4 Wag\" \"Datsun 710\" \"Hornet 4 Drive\" ...\n\n## how many variables are numeric\nsum(sapply(cars_data, is.numeric))\n#[1] 11\n\n## how many variables are character\nsum(sapply(cars_data, is.character))\n#[1] 1\n\n## how many variables are factors\nsum(sapply(cars_data, is.factor))\n#[1] 0\n\n## we can do a linear regreassion with mpg as dependent and disp, hp and wt as predictors\nexample_regression <- lm(mpg ~ disp + hp + wt, data = cars_data)\nsummary(example_regression)\n# Call:\n# lm(formula = mpg ~ disp + hp + wt, data = cars_data)\n#\n# Residuals:\n#   Min     1Q Median     3Q    Max \n# -3.891 -1.640 -0.172  1.061  5.861 \n#\n# Coefficients:\n#             Estimate Std. Error t value Pr(>|t|)    \n# (Intercept) 37.105505   2.110815  17.579  < 2e-16 ***\n# disp        -0.000937   0.010350  -0.091  0.92851    \n# hp          -0.031157   0.011436  -2.724  0.01097 *  \n# wt          -3.800891   1.066191  -3.565  0.00133 ** \n# ---\n# Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n# Residual standard error: 2.639 on 28 degrees of freedom\n# Multiple R-squared:  0.8268,  Adjusted R-squared:  0.8083 \n# F-statistic: 44.57 on 3 and 28 DF,  p-value: 8.65e-11\n\n## we found taht hp and wt are good predictors of the mpg variable. For more detials on regressions see Session 7."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.10 Type of variables in dataset",
        "code": "## we can install MASS and load the dataset for this example\ninstall.packages(\"MASS\")\nlibrary(MASS)\n\n## Let's explore the Aids2 dataset \nAids2_raw <- Aids2\nstr(Aids2_raw)\n#'data.frame':  2843 obs. of  7 variables:\n# $ state  : Factor w/ 4 levels \"NSW\",\"Other\",..: 1 1 1 1 1 1 1 1 1 1 ...\n# $ sex    : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 2 2 2 2 2 2 ...\n# $ diag   : int  10905 11029 9551 9577 10015 9971 10746 10042 10464 10439 ...\n# $ death  : int  11081 11096 9983 9654 10290 10344 11135 11069 10956 10873 ...\n# $ status : Factor w/ 2 levels \"A\",\"D\": 2 2 2 2 2 2 2 2 2 2 ...\n# $ T.categ: Factor w/ 8 levels \"hs\",\"hsid\",\"id\",..: 1 1 1 5 1 1 8 1 1 2 ...\n# $ age    : int  35 53 42 44 39 36 36 31 26 27 ..\n\n## how many variables are numeric\nsapply(Aids2_raw, is.numeric)\n# state     sex    diag   death  status T.categ     age \n#  FALSE   FALSE    TRUE    TRUE   FALSE   FALSE    TRUE \nsum(sapply(Aids2_raw, is.numeric))\n#[1] 3\nAids2_raw_numeric <- Aids2_raw[,sapply(Aids2_raw, is.numeric)]\nstr(Aids2_raw_numeric)\n#data.frame':   2843 obs. of  3 variables:\n# $ diag : int  10905 11029 9551 9577 10015 9971 10746 10042 10464 10439 ...\n# $ death: int  11081 11096 9983 9654 10290 10344 11135 11069 10956 10873 ...\n# $ age  : int  35 53 42 44 39 36 36 31 26 27 ...\nhead(Aids2_raw_numeric)\n\n## how many variables are character\nsapply(Aids2_raw, is.character)\n#  state     sex    diag   death  status T.categ     age \n#  FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE\nsum(sapply(Aids2_raw, is.character))\n#[1] 0\nAids2_raw_character <- Aids2_raw[,sapply(Aids2_raw, is.character)]\nhead(Aids2_raw_character)\n# data frame with 0 columns and 6 rows\n\n## how many variables are factors\nsapply(Aids2_raw, is.factor)\n# state     sex    diag   death  status T.categ     age \n#   TRUE    TRUE   FALSE   FALSE    TRUE    TRUE   FALSE\nsum(sapply(Aids2_raw, is.factor))\n#[1] 4\nAids2_raw_factor <- Aids2_raw[,sapply(Aids2_raw, is.factor)]\nstr(Aids2_raw_factor)\n#'data.frame':  2843 obs. of  4 variables:\n# $ state  : Factor w/ 4 levels \"NSW\",\"Other\",..: 1 1 1 1 1 1 1 1 1 1 ...\n# $ sex    : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 2 2 2 2 2 2 ...\n# $ status : Factor w/ 2 levels \"A\",\"D\": 2 2 2 2 2 2 2 2 2 2 ...\n# $ T.categ: Factor w/ 8 levels \"hs\",\"hsid\",\"id\",..: 1 1 1 5 1 1 8 1 1 2 ...\nhead(Aids2_raw_factor)\n\n## we can get the corresponding information for each with ?\n?Aids2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.10 Type of variables in dataset",
        "code": "## we can get the summary of the age category\nsummary(Aids2_raw$age)\n#  Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#   0.00   30.00   37.00   37.41   43.00   82.00\n\n## we can test if 35 years is the mean of age of diagnosis of this population\nt.test(Aids2_raw$age, mu = 35)\n# One Sample t-test\n#\n# data:  Aids2_raw$age\n# t = 12.764, df = 2842, p-value < 2.2e-16\n# alternative hypothesis: true mean is not equal to 35\n# 95 percent confidence interval:\n# 37.03901 37.77914\n# sample estimates:\n# mean of x \n# 37.40907 \n## we rejected the hypothesis that the age mean value of diagnosis is 35. See t-test for more details on this test."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.10 Type of variables in dataset",
        "code": "## we can get the summary of the sex category\nsummary(Aids2_raw$sex)\n#   F    M \n#  89 2754 \n\n## we need to convert it first to a numeric vector and then to a table\nsex_as_numeric <- as.numeric(Aids2_raw$sex)\nclass(sex_as_numeric)\n#[1] \"numeric\"\nsex_as_table <- table(sex_as_numeric)\nnames(sex_as_table) <- c(\"female\",\"male\")\nsex_as_table\n#female   male \n#    89   2754\n## we can test if males and females are equally infected (50/50).\nchisq.test(sex_as_table, p = c(1/2, 1/2))\n#\n#   Chi-squared test for given probabilities\n#\n# data:  sex_as_table\n# X-squared = 2498.1, df = 1, p-value < 2.2e-16\n## we rejected the hypothesis that the both males and females are affected in the same proportion (i.e., 1/2 and 1/2). See Chi-squared test for more details."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.11 Comparing means: t-test",
        "code": "## we will test the mean of sample SRR1039508 equal to mu = 546.5 for \ncars_data <- mtcars\nnames(cars_data)[7]\n#[1] \"qsec\"\nt.test(cars_data$qsec, mu = 11)\n#\n#   One Sample t-test\n#\n#data:  cars_data$qsec\n#t = 21.681, df = 31, p-value < 2.2e-16\n#alternative hypothesis: true mean is not equal to 11\n#95 percent confidence interval:\n# 17.20449 18.49301\n#sample estimates:\n#mean of x \n#17.84875 \n\n## we will test the mean of sample SRR1039508 equal to mu = 546.5 for \n\n#load get 'airway_scaledcounts.csv' dataset \nairway_data <- read.table(\"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/airway_scaledcounts.csv\",\n               header = TRUE, sep = \",\", stringsAsFactors = FALSE)\nnames(airway_data)[2]\n#[1] \"SRR1039508\"\nt.test(airway_data[,2], mu = 546.5)\n#\n#   One Sample t-test\n#\n#data:  airway_data[, 2]\n#t = -0.00053579, df = 38693, p-value = 0.9996\n#alternative hypothesis: true mean is not equal to 546.5\n#95 percent confidence interval:\n# 501.7696 591.2060\n#sample estimates:\n#mean of x \n# 546.4878 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.12 Two sample t-test",
        "code": "## we can install MASS and load the dataset for this example\ninstall.packages(\"MASS\")\nlibrary(MASS)\n# We assign Cars93 dataset to an object\nmy_cars <- Cars93\n\n# subset US and no_USA\nUS_cars <- subset(my_cars, Origin == \"USA\")\nNonUS_cars <- subset(my_cars, Origin == \"non-USA\")\nnames_pairs <- c(\"US..vs..Non_US\")\n\n# get vectors for Horsepower\nUS_cars_Horsepower <- US_cars$Horsepower\nNonUS_cars_Horsepower <- NonUS_cars$Horsepower\n\n# mean value for Horsepower\nmean(US_cars_Horsepower)\n#[1] 147.5208\nmean(NonUS_cars_Horsepower)\n#[1] 139.8889\n\n# do our unpaired t-test\n\nout_put_ttest_paired <- t.test(US_cars_Horsepower, NonUS_cars_Horsepower, paired = FALSE)\ncat(names_pairs); print(out_put_ttest_paired)\n#US..vs..Non_US\n#   Welch Two Sample t-test\n\n#data:  US_cars_Horsepower and NonUS_cars_Horsepower\n#t = 0.7021, df = 90.985, p-value = 0.4844\n#alternative hypothesis: true difference in means is not equal to 0\n#95 percent confidence interval:\n# -13.96045  29.22433\n#sample estimates:\n#mean of x mean of y \n# 147.5208  139.8889 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.12 Two sample t-test",
        "code": "names_pairs <- names(airway_data)[2:3]\nnames_pairs <- paste0(names_pairs, collapse = \"..vs..\")\n#[1] \"SRR1039508..vs..SRR1039509\"\nout_put_ttest_paired <- t.test(airway_data[,2], airway_data[,3], paired = TRUE)\ncat(names_pairs); print(out_put_ttest_paired)\n#SRR1039508..vs..SRR1039509\n#   Paired t-test\n#\n#data:  airway_data[, 2] and airway_data[, 3]\n#t = 6.9876, df = 38693, p-value = 2.842e-12\n#alternative hypothesis: true difference in means is not equal to 0\n#95 percent confidence interval:\n# 32.66123 58.12758\n#sample estimates:\n#mean of the differences \n#               45.3944 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.12 Two sample t-test",
        "code": "out_put_ttest_unpaired <- t.test(airway_data[,2], airway_data[,3], paired = FALSE)\ncat(names_pairs); print(out_put_ttest_unpaired)\n#SRR1039508..vs..SRR1039509\n#   Welch Two Sample t-test\n#\n#data:  airway_data[, 2] and airway_data[, 3]\n#t = 1.5108, df = 75614, p-value = 0.1309\n#alternative hypothesis: true difference in means is not equal to 0\n#95 percent confidence interval:\n# -13.49803 104.28683\n#sample estimates:\n#mean of x mean of y \n# 546.4878  501.0934 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.13 Beyond t-test: Wilcoxon signed rank test",
        "code": "# test for mean of sample\n\nwilcox.test(cars_data$qsec, mu = 11)\n# Wilcoxon signed rank test with continuity correction\n#\n# data:  cars_data$qsec\n# V = 528, p-value = 8.334e-07\n# alternative hypothesis: true location is not equal to 11\n\nwilcox.test(airway_data[,2], mu = 546.5)\n#\n#   Wilcoxon signed rank test with continuity correction\n#\n#data:  airway_data[, 2]\n#V = 145919557, p-value < 2.2e-16\n#alternative hypothesis: true location is not equal to 546.5\n\n# test for two samples of different group\nwilcox.test(airway_data[,2], airway_data[,3], paired = FALSE)\n#\n#   Wilcoxon rank sum test with continuity correction\n#\n#data:  airway_data[, 2] and airway_data[, 3]\n#W = 753579582, p-value = 0.08979\n#alternative hypothesis: true location shift is not equal to 0\n\n# test for two samples of same group, paired-test\nwilcox.test(airway_data[,2], airway_data[,3], paired = TRUE)\n#\n#   Wilcoxon signed rank test with continuity correction\n#\n#data:  airway_data[, 2] and airway_data[, 3]\n#V = 147963112, p-value < 2.2e-16\n#alternative hypothesis: true location shift is not equal to 0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.14 Tabulation and Cross-Tabulation",
        "code": "## we create two vectors of some values\n\nvector_colors <- c(\"red\",\"red\",\"black\",\"blue\",\"green\",\"green\",\"green\",\"green\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\")\nstr(vector_colors)\n#chr [1:13] \"red\" \"red\" \"black\" \"blue\" \"green\" \"green\" \"green\" \"green\" \"blue\" \"blue\" \"blue\" \"blue\" \"blue\"\n\nvector_numbers <- c(1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4,4,6,6,6,6,6,6,6,6)\nstr(vector_numbers)\n# num [1:25] 1 1 1 2 2 2 2 3 3 3 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.14 Tabulation and Cross-Tabulation",
        "code": "## we recreate two vectors from above\n\n\nvector_color_names <- c(\"black\",\"blue\",\"green\",\"red\")\nnumber_color_is_repeated <- c(1,6,4,2)\nvector_colors <- rep(vector_color_names, number_color_is_repeated)\nstr(vector_colors)\n#chr [1:13] \"black\" \"blue\" \"blue\" \"blue\" \"blue\" \"blue\" \"blue\" \"green\" \"green\" \"green\" \"green\" \"red\" \"red\"\n\n\nvector_value_names <- c(1,2,3,4,6)\nnumber_value_is_repeated <- c(3,4,4,6,8)\nvector_numbers <- rep(vector_value_names, number_value_is_repeated)\nstr(vector_numbers)\n# num [1:25] 1 1 1 2 2 2 2 3 3 3 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.14 Tabulation and Cross-Tabulation",
        "code": "## we create table objects using the two previous vectors\n\ntable_numbers <- table(vector_numbers)\ntable_numbers\n# vector_numbers\n#1 2 3 4 6 \n#3 4 4 6 8 \n\ntable_colors <- table(vector_colors)\ntable_colors\n# vector_colors\n# black  blue green   red \n#    1     6     4     2 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.14 Tabulation and Cross-Tabulation",
        "code": "vaccinated_vector        <- c(\"YES\",\"NO\",\"YES\",\"YES\",\"YES\",\"YES\",\"YES\",\"NO\",\"NO\",\"YES\",\"NO\",\"YES\",\"NO\")\ntable(vaccinated_vector)\n#vaccinated_vector\n# NO YES \n#  5   8 \n\nhealthy_0_sick_1_vector  <- c( 0,    1,   0,     1,    1,    0,    0,   1,    0,  0,    1,  0,  1)\ntable(healthy_0_sick_1_vector)\n#healthy_0_sick_1_vector\n#0 1 \n#7 6 \n\noutcome_crosstab <- table(vaccinated_vector,healthy_0_sick_1_vector)\noutcome_crosstab\n#                 healthy_0_sick_1_vector\n# vaccinated_vector 0 1\n#               NO  1 4\n#               YES 6 2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.14 Tabulation and Cross-Tabulation",
        "code": "vac_health_df <- data.frame(vaccinated_vector, healthy_0_sick_1_vector)\nvac_health_df\n#   vaccinated_vector healthy_0_sick_1_vector\n#1                YES                       0\n#2                 NO                       1\n#3                YES                       0\n#4                YES                       1\n#5                YES                       1\n#6                YES                       0\n#7                YES                       0\n#8                 NO                       1\n#9                 NO                       0\n#10               YES                       0\n#11                NO                       1\n#12               YES                       0\n#13                NO                       1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.14 Tabulation and Cross-Tabulation",
        "code": "sex <- c(\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"f\",\"f\",\"f\",\"m\",\"m\",\"m\",\"m\")\nvac_health_df$sex <- sex\nvac_health_df\n#   vaccinated_vector healthy_0_sick_1_vector sex\n#1                YES                       0   m\n#2                 NO                       1   f\n#3                YES                       0   m\n#4                YES                       1   f\n#5                YES                       1   f\n#6                YES                       0   f\n#7                YES                       0   f\n#8                 NO                       1   f\n#9                 NO                       0   f\n#10               YES                       0   m\n#11                NO                       1   m\n#12               YES                       0   m\n#13                NO                       1   m"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.14 Tabulation and Cross-Tabulation",
        "code": "## one variable\n\nxtabs( formula = ~ vaccinated_vector, data = vac_health_df)\n#vaccinated_vector\n#NO YES \n#  5   8 \nxtabs( formula = ~ healthy_0_sick_1_vector, data = vac_health_df)\n#healthy_0_sick_1_vector\n#0 1 \n#7 6 \nxtabs( formula = ~ sex, data = vac_health_df)\n#sex\n#f m \n#7 6 \n\n## two variables cross-tabulation\n\nxtabs( formula = ~ vaccinated_vector + healthy_0_sick_1_vector, data = vac_health_df)\n#                 healthy_0_sick_1_vector\n#vaccinated_vector 0 1\n#              NO  1 4\n#              YES 6 2\n\nxtabs( formula = ~ vaccinated_vector + sex, data = vac_health_df)\n\n#                 sex\n#vaccinated_vector f m\n#              NO  3 2\n#              YES 4 4\n\n## three variables cross-tabulation\n\nxtabs( formula = ~ vaccinated_vector + healthy_0_sick_1_vector + sex, data = vac_health_df)\n\n#, , sex = f\n#\n#                 healthy_0_sick_1_vector\n#vaccinated_vector 0 1\n#              NO  1 2\n#              YES 2 2\n#\n#, , sex = m\n#\n#                 healthy_0_sick_1_vector\n#vaccinated_vector 0 1\n#              NO  0 2\n#              YES 4 0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.15 Beyond t-test: Binomial test",
        "code": "## we create a binomial variable assigned to males of females.\n## we assume that if female is 1 and 0 if male\n\none_population <- rbinom(n = 1000, size = 1, prob= 0.51)\nstr(one_population)\n#int [1:1000] 0 0 0 0 1 0 1 0 0 1 ...\n\n## you can tabulate the data in your one_population to visualize that the data follows \n## roughly the predicted proportion of 0-state (0.49 or 49%) and 1-state (0.51 or 51%)\ntable(one_population)\n#one_population\n#  0   1 \n#487 513 \n\nprop.table(table(one_population))\n\n#one_population\n#    0     1 \n#0.492 0.508 \n\n## we can perform the bionomial test for an expected value of propotion of 1 to be p = 0.51\n\nprop.test(sum(one_population), length(one_population), p = 0.51)\n#\n#   1-sample proportions test with continuity correction\n#\n#data:  sum(one_population) out of length(one_population), null probability 0.51\n#X-squared = 0.04902, df = 1, p-value = 0.8248\n#alternative hypothesis: true p is not equal to 0.51\n#95 percent confidence interval:\n# 0.4745504 0.5374029\n#sample estimates:\n#    p \n#0.506 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.15 Beyond t-test: Binomial test",
        "code": "## we create a binomial variable assigned to males of females.\n## we assume that if female is 1 and 0 if male\n\nother_population <- rbinom(n = 1000, size = 1, prob= 0.40)\nstr(other_population)\n#int [1:1000] 0 0 0 0 1 1 0 1 0 0 ...\n\n## you can tabulate the data in your one_population to visualize that the data follows \n## roughly the predicted proportion of 0-state (0.60 or 60%) and 1-state (0.40 or 40%)\ntable(other_population)\n#other_population\n#  0   1 \n#603 397 \n\n## we can perform the binomial test\n\nprop.test(sum(other_population), length(other_population), p = 0.51)\n#\n#   1-sample proportions test with continuity correction\n#\n#data:  sum(other_population) out of length(other_population), null probability 0.51\n#X-squared = 45.387, df = 1, p-value = 1.617e-11\n#alternative hypothesis: true p is not equal to 0.51\n#95 percent confidence interval:\n# 0.3725342 0.4342204\n#sample estimates:\n#    p \n#0.403"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.16 Beyond t-test: Chi-square goodness of fit",
        "code": "## load rhizobium dataset from ade4 R package\nlibrary(ade4)\ndata(rhizobium)\n?rhizobium\nrhizobium_pop <- as.character(rhizobium$pop)\nstr(rhizobium_pop)\n#chr [1:215] \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" \"FTmdc\" ...\n\n## get a idea of the unique character elements in the rhizobium_pop object\nunique(rhizobium_pop)\n#[1] \"FTmdc\"  \"FTmlt\"  \"TETmdc\" \"THLmlt\" \"TELmlt\" \"TETmlt\" \"THTmlt\"\n\n#we can see 7 unique text elements\n\n## create a table object\nrhizobium_pop_table <- table(rhizobium_pop)\nrhizobium_pop_table\n#rhizobium_pop\n# FTmdc  FTmlt TELmlt TETmdc TETmlt THLmlt THTmlt \n#    46     43     20     20     24     20     42\n\n## we have 7 categories. We will assume that they should be in equal proportion (i.e., 1/7 each).\nchisq.test(rhizobium_pop_table, p = c(1/7, 1/7, 1/7, 1/7, 1/7, 1/7, 1/7))\n#\n#   Chi-squared test for given probabilities\n#\n#data:  rhizobium_pop_table\n#X-squared = 29.349, df = 6, p-value = 5.225e-05"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.16 Beyond t-test: Chi-square goodness of fit",
        "code": "## we can have a population and determine a categorical variable that result in two category (0, 1) like for example: healthy and sick\nsample_population <- rbinom(n = 100, size = 1, prob= 0.40)\npopulation_states <- ifelse(sample_population  == 1, \"sick\", \"healthy\")\nnames(sample_population) <- population_states\nhead(sample_population)\n#  healthy   sick healthy healthy healthy healthy \n#      0       1       0       0       0       0 \n\n## we can have the same population and determine a different categorical variable that result in two categories (0, 1) like for example: with_virus and no_infected\nsample_virus <- rbinom(n = 100, size = 1, prob= 0.40)\nvirus_names <- ifelse(sample_virus  == 1, \"with_virus\", \"no_infected\")\nnames(sample_virus) <- virus_names\nhead(sample_virus)\n#    no_infected no_infected no_infected no_infected  with_virus no_infected \n#          0           0           0           0           1           0 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.16 Beyond t-test: Chi-square goodness of fit",
        "code": "cross_tab <- table(sample_population, sample_virus)\ncross_tab\n#                  sample_virus\n#sample_population  0  1\n#                0 44 13\n#                1 35  8"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.16 Beyond t-test: Chi-square goodness of fit",
        "code": "chisq.test(cross_tab)\n#\n#       Pearson's Chi-squared test with Yates' continuity correction\n#\n# data:  cross_tab\n# X-squared = 0.069082, df = 1, p-value = 0.7927"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.16 Beyond t-test: Chi-square goodness of fit",
        "code": "#$ we construct a data frame\nsample_virus_2 <- data.frame (population_1_if_sick = c(0,0,0,1,1,1,1,1,0,1,1),\n                               virus_1_if_detected = c(0,0,0,1,1,1,1,0,0,1,1), stringsAsFactors = FALSE)\nsample_virus_2\n#   population_1_if_sick virus_1_if_detected\n#1                     0                   0\n#2                     0                   0\n#3                     0                   0\n#4                     1                   1\n#5                     1                   1\n#6                     1                   1\n#7                     1                   1\n#8                     1                   0\n#9                     0                   0\n#10                    1                   1\n#11                    1                   1\n\n## we save to numeric vectors\npopulation_1_if_sick <- sample_virus_2$population_1_if_sick\nvirus_1_if_detected <- sample_virus_2$virus_1_if_detected\n\n## we do a crosstabulation\ncross_tab2 <- table(population_1_if_sick, virus_1_if_detected)\ncross_tab2\n#                    virus_1_if_detected\n#population_1_if_sick 0 1\n#                   0 4 0\n#                   1 1 6\n\n## we perform the chisq.test\nchisq.test(cross_tab2)\n#   Pearson's Chi-squared test with Yates' continuity correction\n#\n# data:  cross_tab2\n# X-squared = 4.4818, df = 1, p-value = 0.03426\n#\n# Warning message:\n# In chisq.test(cross_tab2) : Chi-squared approximation may be incorrect"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.17 Beyond t-test: McNemar\u2019s test",
        "code": "## we can use the same cross tabulation example\ncross_tab <- table(sample_population, sample_virus)\ncross_tab\n#                  sample_virus\n#sample_population  0  1\n#                0 44 13\n#                1 35  8\n\n## we apply the McNemar's test\n\nmcnemar.test(cross_tab)\n#\n#   McNemar's Chi-squared test with continuity correction\n#\n# data:  cross_tab\n# McNemar's chi-squared = 9.1875, df = 1, p-value = 0.002437"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.18 Beyond t-test: Fisher\u2019s exact test",
        "code": "fisher.test(cross_tab)\n#\n#     Fisher's Exact Test for Count Data\n#\n# data:  cross_tab\n# p-value = 0.8047\n# alternative hypothesis: true odds ratio is not equal to 1\n# 95 percent confidence interval:\n# 0.2488368 2.2877938\n# sample estimates:\n# odds ratio \n#  0.7755955 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.19 Correlations",
        "code": "cor(airway_data[,2], airway_data[,3])\n#[1] 0.9646265\n# we will assume that these are not normal\ncor.test(airway_data[,2], airway_data[,3], method = \"spearman\")\n#\n#   Spearman's rank correlation rho\n#\n#data:  airway_data[, 2] and airway_data[, 3]\n#S = 4.8345e+11, p-value < 2.2e-16\n#alternative hypothesis: true rho is not equal to 0\n#sample estimates:\n#      rho \n#0.9499302 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.20 Comparing distributions",
        "code": "ks.test(airway_data[,2], airway_data[,3])\n#\n#   Two-sample Kolmogorov-Smirnov test\n#\n#data:  airway_data[, 2] and airway_data[, 3]\n#D = 0.013413, p-value = 0.001896\n#alternative hypothesis: two-sided\n#\n#Warning message:\n#In ks.test(airway_data[, 2], airway_data[, 3]) :\n#  p-value will be approximate in the presence of ties"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.20 Comparing distributions",
        "code": "# you need to instal the package \"pROC\"\ninstall.packages(\"pROC\")\nlibrary(pROC)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.20 Comparing distributions",
        "code": "## set two samples\nsample_SRR1039508 <- airway_data$SRR1039508 \nsample_SRR1039509 <- airway_data$SRR1039509\n\n## get summaries of each\nsummary_SRR1039508 <- summary(sample_SRR1039508)\nsummary_SRR1039508\n#    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n#     0.0      0.0      1.0    546.5    203.0 287372.0 \nsummary_SRR1039509 <- summary(sample_SRR1039509)\nsummary_SRR1039509\n#    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n#     0.0      0.0      1.0    501.1    172.0 244921.0\n\n## assign  \"control\" if less than 3rd quartile of each\nSRR1039508_binary <- ifelse(sample_SRR1039508 > summary_SRR1039508[5], \"exposed\", \"control\")\n## assign  \"control\" if more than 3rd quartile of each -- a reverse from last sample\nSRR1039509_binary <- ifelse(sample_SRR1039509 > summary_SRR1039509[5], \"control\", \"exposed\")\n\n## create a roc object for each sample\nroc_SRR1039508 <- roc(SRR1039508_binary, sample_SRR1039508, direction = \"<\")\n#Setting levels: control = control, case = exposed\nroc_SRR1039509 <- roc(SRR1039509_binary, sample_SRR1039509, direction = \"<\")\n#Setting levels: control = control, case = exposed\n\n## perform the roc.test and increase boot.n for a more precise p-value:\nroc.test(roc_SRR1039508, roc_SRR1039509, method=\"bootstrap\", boot.n=1000)\n#    |=========================================================================================================================================================================| 100%\n#\n#   Bootstrap test for two ROC curves\n#\n#data:  roc_SRR1039508 and roc_SRR1039509\n#D = Inf, boot.n = 1000, boot.stratified = 1, p-value < 2.2e-16\n#alternative hypothesis: true difference in AUC is not equal to 0\n#sample estimates:\n#AUC of roc1 AUC of roc2 \n#          1           0 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.21 Bootstraps",
        "code": "install.packages('boot')\nlibrary(boot)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.21 Bootstraps",
        "code": "#load get mtcars dataset -- this a preloaded dataset in R\ncars_data <- mtcars\ncars_data\n#                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#.."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.21 Bootstraps",
        "code": "mpg_mean <- mean(cars_data$mpg)\nmpg_mean\n#1] 20.09062"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.21 Bootstraps",
        "code": "## First, we need a function that calculate a mean for each sample\nfunction_mean <- function(data, i){\n                              my_data2 <- data[i,] \n                              return(mean(my_data2$mpg))\n                                  }\n# The arguments of this function are data or the source dataset \n# and [i] is the vector index of which rows from the source dataset will be draw to build a bootstrap sample.\n\n## Second, we can run our bootstrap with 100000 bootstrap replicates\n\nbootstrap_mpg_mean <- boot(data = cars_data, statistic = function_mean, R = 10000)\nbootstrap_mpg_mean\n#ORDINARY NONPARAMETRIC BOOTSTRAP\n#\n#Call:\n#boot(data = cars_data, statistic = function_mean, R = 10000)\n#\n#Bootstrap Statistics :\n#    original      bias    std. error\n#t1* 20.09062 0.002242188    1.053944\nbootstrap_mpg_mean$t0\n#[1] 20.09062\nhead(bootstrap_mpg_mean$t)\n#         [,1]\n#[1,] 20.16562\n#[2,] 20.05937\n#[3,] 20.42188\n#[4,] 20.45000\n#[5,] 20.48125\n#[6,] 21.81875\n#...\ndim(bootstrap_mpg_mean$t)\n#[1] 10000     1\nmean(bootstrap_mpg_mean$t)\n#[1] 20.09287\nrange(bootstrap_mpg_mean$t)\n#[1] 15.7375 24.3375\nsd(bootstrap_mpg_mean$t)\n#[1] 1.053944\nboot.ci(boot.out=bootstrap_mpg_mean,type=\"norm\")\n#BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS\n#Based on 10000 bootstrap replicates\n#\n#CALL : \n#boot.ci(boot.out = bootstrap_mpg_mean, type = \"norm\")\n#\n#Intervals : \n#Level      Normal        \n#95%   (18.02, 22.15 )  \n#Calculations and Intervals on Original Scale\n\nhist(bootstrap_mpg_mean$t, breaks=100, col=\"dodgerblue1\", main=\"Bootstrap Distribution of the Mean: mpg\")\nlines(x = density(x = bootstrap_mpg_mean$t))\nabline(v = mean(bootstrap_mpg_mean$t), col = \"black\", lwd = 2)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-statistics-in-r.html",
        "section": "Session 6 \u2013 Basic Statistics in R",
        "subsection": "6.21 Bootstraps",
        "code": "## null estimate of correlation\ncor(cars_data$disp, cars_data$wt)\n#[1] 0.8879799\n\n## First, we need a function that calculate correlation for each sample\nfunction_correlation <- function(data, i){\n                              my_data2 <- data[i,] \n                              return(cor(my_data2$disp, my_data2$wt))\n                                  }\n## Second, we can run our bootstrap with 100000 bootstrap replicates\n\nbootstrap_cor_dis_and_wt <- boot(data = cars_data, statistic = function_correlation, R = 10000)\nbootstrap_cor_dis_and_wt\n#ORDINARY NONPARAMETRIC BOOTSTRAP\n#\n#Call:\n#boot(data = cars_data, statistic = function_correlation, R = 10000)\n#\n#Bootstrap Statistics :\n#     original       bias    std. error\n#t1* 0.8879799 -0.003775209  0.03749136\nbootstrap_cor_dis_and_wt$t0\n#[1] 0.8879799\nhead(bootstrap_cor_dis_and_wt$t)\n#         [,1]\n#[1,] 0.8612517\n#[2,] 0.7704631\n#[3,] 0.9229136\n#[4,] 0.8536788\n#[5,] 0.8677477\n#[6,] 0.8298354\n#...\ndim(bootstrap_cor_dis_and_wt$t)\n#[1] 10000     1\nmean(bootstrap_cor_dis_and_wt$t)\n#[1] 0.8842047\nrange(bootstrap_cor_dis_and_wt$t)\n#[1] 0.6994762 0.9806787\nsd(bootstrap_cor_dis_and_wt$t)\n#[1] 0.03749136\nboot.ci(boot.out=bootstrap_cor_dis_and_wt,type=\"norm\")\n#BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS\n#Based on 10000 bootstrap replicates\n#\n#CALL : \n#boot.ci(boot.out = bootstrap_cor_dis_and_wt, type = \"norm\")\n#\n#Intervals : \n#Level      Normal        \n#95%   ( 0.8183,  0.9652 )  \n#Calculations and Intervals on Original Scale\n\nhist(bootstrap_cor_dis_and_wt$t, breaks=100, col=\"firebrick2\", main=\"Bootstrap Distribution of the Correlation: dis vs wt\")\nlines(x = density(x = bootstrap_cor_dis_and_wt$t))\nabline(v = mean(bootstrap_cor_dis_and_wt$t), col = \"black\", lwd = 2)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.1 Linear regressions",
        "code": "## we can install MASS and load the dataset mammals for this example\ninstall.packages(\"MASS\")\nlibrary(MASS)\n?mammals\n# assign mammals dataset to an object\nmammals_raw <- mammals\nhead(mammals_raw)\n#                   body brain\n#Arctic fox        3.385  44.5\n#Owl monkey        0.480  15.5\n#Mountain beaver   1.350   8.1\n#Cow             465.000 423.0\n#Grey wolf        36.330 119.5\n#Goat             27.660 115.0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.1 Linear regressions",
        "code": "plot(x = mammals_raw$body, y = mammals_raw$brain)\nmtext(side=3, line=0.5, adj=0, \"raw data from mammal -- body vs brain\")\nabline(lm(brain ~ body, data = mammals_raw), col = \"blue\")\n\n# let's save this model to an object\nraw_brain_body <- lm(brain ~ body, data = mammals_raw)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.1 Linear regressions",
        "code": "# we have already downloaded this function before\nlibrary(purrr)\nmammals_log <- modify(mammals_raw,log10)\nhead(mammals_log)\n#                     body    brain\n#Arctic fox       0.5295587 1.648360\n#Owl monkey      -0.3187588 1.190332\n#Mountain beaver  0.1303338 0.908485\n#Cow              2.6674530 2.626340\n#Grey wolf        1.5602654 2.077368\n#Goat             1.4418522 2.060698\n\n# now we can plot this transformed data\nplot(x = mammals_log$body, y = mammals_log$brain)\nmtext(side=3, line=0.5, adj=0, \"Log10 data from mammal -- body vs brain\")\nabline(lm(brain ~ body, data = mammals_log), col = \"blue\")\n\n# let's save this model to an object\nlog_brain_body <- lm(brain ~ body, data = mammals_log)\n# class of this regression object is \"lm\".\nclass(log_brain_body)\n#[1] \"lm\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.1 Linear regressions",
        "code": "## summary for the untransformed data\nsummary(raw_brain_body)\n#Call:\n#lm(formula = brain ~ body, data = mammals_raw)\n#\n#Residuals:\n#    Min      1Q  Median      3Q     Max \n#-810.07  -88.52  -79.64  -13.02 2050.33 \n#\n#Coefficients:\n#            Estimate Std. Error t value Pr(>|t|)    \n#(Intercept) 91.00440   43.55258    2.09   0.0409 *  \n#body         0.96650    0.04766   20.28   <2e-16 ***\n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n#Residual standard error: 334.7 on 60 degrees of freedom\n#Multiple R-squared:  0.8727,   Adjusted R-squared:  0.8705 \n#F-statistic: 411.2 on 1 and 60 DF,  p-value: < 2.2e-16\n\n## summary for the log10 transformed data"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.1 Linear regressions",
        "code": "summary(log_brain_body)\n#Call:\n#lm(formula = brain ~ body, data = mammals_log)\n#\n#Residuals:\n#     Min       1Q   Median       3Q      Max \n#-0.74503 -0.21380 -0.02676  0.18934  0.84613 \n#\n#Coefficients:\n#            Estimate Std. Error t value Pr(>|t|)    \n#(Intercept)  0.92713    0.04171   22.23   <2e-16 ***\n#body         0.75169    0.02846   26.41   <2e-16 ***\n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n#Residual standard error: 0.3015 on 60 degrees of freedom\n#Multiple R-squared:  0.9208,   Adjusted R-squared:  0.9195 \n#F-statistic: 697.4 on 1 and 60 DF,  p-value: < 2.2e-16"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.2 Anatomy of a linear regression",
        "code": "## we get the crabs from MASS\nlibrary(MASS)\n?crabs\n\n## load the crab dataset\ncrab_dataset <- crabs\n\nhead(crab_dataset)\n#  sp sex index   FL  RW   CL   CW  BD\n#1  B   M     1  8.1 6.7 16.1 19.0 7.0\n#2  B   M     2  8.8 7.7 18.1 20.8 7.4\n#3  B   M     3  9.2 7.8 19.0 22.4 7.7\n#4  B   M     4  9.6 7.9 20.1 23.1 8.2\n#5  B   M     5  9.8 8.0 20.3 23.0 8.2\n#6  B   M     6 10.8 9.0 23.0 26.5 9.8\n\n## explore your data\nstr(crab_dataset)\n#'data.frame':   200 obs. of  8 variables:\n# $ sp   : chr  \"B\" \"B\" \"B\" \"B\" ...\n# $ sex  : chr  \"M\" \"M\" \"M\" \"M\" ...\n# $ index: num  1 2 3 4 5 6 7 8 9 10 ...\n# $ FL   : num  8.1 8.8 9.2 9.6 9.8 10.8 11.1 11.6 11.8 11.8 ...\n# $ RW   : num  6.7 7.7 7.8 7.9 8 9 9.9 9.1 9.6 10.5 ...\n# $ CL   : num  16.1 18.1 19 20.1 20.3 23 23.8 24.5 24.2 25.2 ...\n# $ CW   : num  19 20.8 22.4 23.1 23 26.5 27.1 28.4 27.8 29.3 ...\n# $ BD   : num  7 7.4 7.7 8.2 8.2 9.8 9.8 10.4 9.7 10.3 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.2 Anatomy of a linear regression",
        "code": "## This is the code for this regression\ncrab_simple_lm <- lm(formula = BD ~ FL, data = crab_dataset)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.2 Anatomy of a linear regression",
        "code": "## We can get the summary of this regression to determine if usefulness\nsummary(crab_simple_lm)\n\n#Call:\n#lm(formula = BD ~ FL, data = crab_dataset)\n#\n#Residuals:\n#    Min      1Q  Median      3Q     Max \n#-1.9500 -0.3035  0.0302  0.3563  1.1692 \n#\n#Coefficients:\n#            Estimate Std. Error t value Pr(>|t|)    \n#(Intercept) -1.04904    0.17437  -6.016 8.49e-09 ***\n#FL           0.96769    0.01092  88.618  < 2e-16 ***\n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n#Residual standard error: 0.5384 on 198 degrees of freedom\n#Multiple R-squared:  0.9754,    Adjusted R-squared:  0.9753 \n#F-statistic:  7853 on 1 and 198 DF,  p-value: < 2.2e-16"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.3 Multiple linear regressions",
        "code": "## we have already downloaded MASS and we assign the crabs dataset to an object\nlibrary(MASS)\ncrab_dataset <- crabs\nhead(crab_dataset)\n#  sp sex index   FL  RW   CL   CW  BD\n#1  B   M     1  8.1 6.7 16.1 19.0 7.0\n#2  B   M     2  8.8 7.7 18.1 20.8 7.4\n#3  B   M     3  9.2 7.8 19.0 22.4 7.7\n#4  B   M     4  9.6 7.9 20.1 23.1 8.2\n#5  B   M     5  9.8 8.0 20.3 23.0 8.2\n#6  B   M     6 10.8 9.0 23.0 26.5 9.8\n\n## we will use BD as dependent and FL, RW, CL and CW as predictors.\ncrab_multiple_lm <- lm(formula = BD ~ FL+RW+CL+CW, data = crab_dataset)\nclass(crab_multiple_lm)\n#[1] \"lm\"\nsummary(crab_multiple_lm)\n#Call:\n#lm(formula = BD ~ FL + RW + CL + CW, data = crab_dataset)\n#\n#Residuals:\n#    Min      1Q  Median      3Q     Max \n#-1.3518 -0.2291  0.0112  0.2664  1.0965 \n#\n#Coefficients:\n#            Estimate Std. Error t value Pr(>|t|)    \n#(Intercept) -0.97616    0.15296  -6.382 1.25e-09 ***\n#FL           0.42022    0.05585   7.524 1.91e-12 ***\n#RW           0.03768    0.03209   1.174    0.242    \n#CL           0.59511    0.06825   8.720 1.22e-15 ***\n#CW          -0.30560    0.04935  -6.193 3.43e-09 ***\n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n#Residual standard error: 0.4208 on 195 degrees of freedom\n#Multiple R-squared:  0.9852,   Adjusted R-squared:  0.9849 \n#F-statistic:  3247 on 4 and 195 DF,  p-value: < 2.2e-16"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.4 Diagnostic plots for regressions",
        "code": "# diagnostic plots\nlayout(matrix(c(1,2,3,4),2,2))\nplot(crab_multiple_lm)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.5 Regression influential measurements",
        "code": "## Notice values with an asterisk (*)\ninfluence_values <- influence.measures(crab_multiple_lm)\ninfluence_values\n#Influence measures of\n#    lm(formula = BD ~ FL + RW + CL + CW, data = crab_dataset) :\n#\n#       dfb.1_    dfb.FL    dfb.RW    dfb.CL    dfb.CW     dffit cov.r   cook.d     hat inf\n#1    0.230383  1.06e-01 -1.27e-01 -1.15e-01  9.97e-02  0.272172 1.022 1.48e-02 0.04052    \n#2   -0.009954 -4.12e-05  1.55e-03 -6.81e-05  5.21e-04 -0.010550 1.053 2.24e-05 0.02556    \n#3    0.018286  6.27e-03 -9.58e-03 -9.30e-03  9.08e-03  0.022461 1.056 1.01e-04 0.02866    \n#...\n#46   0.076014 -8.84e-02  2.99e-01  1.25e-01 -1.87e-01 -0.426499 0.914 3.55e-02 0.03051   *\n#47   0.037663 -1.85e-02  3.83e-02  4.76e-02 -6.15e-02 -0.088701 1.057 1.58e-03 0.03509    \n#48  -0.027395  8.70e-03 -7.23e-02 -3.70e-02  6.03e-02  0.115458 1.077 2.68e-03 0.05319   *\n#49  -0.017943  1.88e-02 -4.78e-02 -3.53e-02  4.67e-02  0.071147 1.077 1.02e-03 0.04985   *\n#50  -0.023874  7.47e-05 -3.10e-02 -2.11e-02  3.51e-02  0.063645 1.110 8.14e-04 0.07675   *\n#51   0.127156  8.62e-03 -2.53e-02 -8.99e-03  2.53e-03  0.133549 1.052 3.58e-03 0.03666    \n#32  -0.020620 -6.29e-02 -1.96e-02 -3.45e-03  4.20e-02  0.145671 1.028 4.25e-03 0.02396    \n#...\n\n## now we can get the identity of these values organized in a vector by focusing in column 'hat'\ninfluence_df <- influence(crab_multiple_lm)\nhead(influence_df)\n# we can the 10 most influential value\norder(influence_df$hat, decreasing = TRUE)[1:10]\n#[1]  50 145 199 195  98 200  99 144 186  97"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.6 Regression coefficients and their 95%CI",
        "code": "coefficients(log_brain_body)\n#(Intercept)        body \n#  0.9271269   0.7516859 \ncoef(crab_multiple_lm)\n#(Intercept)          FL          RW          CL          CW \n#-0.97615668  0.42022057  0.03768281  0.59511478 -0.30559587 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.6 Regression coefficients and their 95%CI",
        "code": "confint(log_brain_body)\n#                2.5 %    97.5 %\n#(Intercept) 0.8436923 1.0105616\n#body        0.6947503 0.8086215\nconfint(crab_multiple_lm)\n#                  2.5 %     97.5 %\n#(Intercept) -1.27783361 -0.6744798\n#FL           0.31007030  0.5303708\n#RW          -0.02560597  0.1009716\n#CL           0.46051803  0.7297115\n#CW          -0.40291710 -0.2082746"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.6 Regression coefficients and their 95%CI",
        "code": "anova(log_brain_body)\n#Analysis of Variance Table\n#\n#Response: brain\n#          Df Sum Sq Mean Sq F value    Pr(>F)    \n#body       1 63.409  63.409  697.42 < 2.2e-16 ***\n#Residuals 60  5.455   0.091                      \n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\nanova(crab_multiple_lm)\n#Analysis of Variance Table\n#\n#Response: BD\n#           Df  Sum Sq Mean Sq    F value    Pr(>F)    \n#FL          1 2276.68 2276.68 12858.0018 < 2.2e-16 ***\n#RW          1    0.57    0.57     3.1984   0.07526 .  \n#CL          1   15.52   15.52    87.6332 < 2.2e-16 ***\n#CW          1    6.79    6.79    38.3516  3.43e-09 ***\n#Residuals 195   34.53    0.18                         \n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.7 Selecting predictors",
        "code": "## we will assign this as our full model\nfull_model <- crab_multiple_lm\nfull_model\n#Call:\n#lm(formula = BD ~ FL + RW + CL + CW, data = crab_dataset)\n#\n#Coefficients:\n#(Intercept)           FL           RW           CL           CW  \n#  -0.97616      0.42022      0.03768      0.59511     -0.30560  "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.7 Selecting predictors",
        "code": "reduced_model <- step(full_model, direction = \"backward\")\n#Start:  AIC=-341.31\n#BD ~ FL + RW + CL + CW\n#\n#       Df Sum of Sq    RSS     AIC\n#- RW    1    0.2442 34.772 -341.90\n#<none>              34.527 -341.31\n#- CW    1    6.7907 41.318 -307.40\n#- FL    1   10.0234 44.551 -292.34\n#- CL    1   13.4637 47.991 -277.46\n\n#Step:  AIC=-341.9\n#BD ~ FL + CL + CW\n#\n#       Df Sum of Sq    RSS     AIC\n#<none>              34.772 -341.90\n#- CW    1    7.5018 42.273 -304.83\n#- CL    1   15.2099 49.981 -271.33\n#- FL    1   17.0716 51.843 -264.02\nreduced_model\n#\n#Call:\n#lm(formula = BD ~ FL + CL + CW, data = crab_dataset)\n#\n#Coefficients:\n#(Intercept)           FL           CL           CW  "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.7 Selecting predictors",
        "code": "summary(reduced_model)\n#Call:\n#lm(formula = BD ~ FL + CL + CW, data = crab_dataset)\n#\n#Residuals:\n#     Min       1Q   Median       3Q      Max \n#-1.34264 -0.23109  0.00893  0.26523  1.05895 \n#\n#Coefficients:\n#            Estimate Std. Error t value Pr(>|t|)    \n#(Intercept) -0.92444    0.14663  -6.305 1.87e-09 ***\n#FL           0.45656    0.04654   9.810  < 2e-16 ***\n#CL           0.55718    0.06018   9.259  < 2e-16 ***\n#CW          -0.27594    0.04243  -6.503 6.41e-10 ***\n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n#Residual standard error: 0.4212 on 196 degrees of freedom\n#Multiple R-squared:  0.9851,   Adjusted R-squared:  0.9849 \n#F-statistic:  4320 on 3 and 196 DF,  p-value: < 2.2e-16"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.8 Regression predictions",
        "code": "## recall the regression and the predictor name for the model: log_brain_body\nlog_brain_body\n#Call:\n#lm(formula = brain ~ body, data = mammals_log)\n#\n#Coefficients:\n#(Intercept)         body  \n#     0.9271       0.7517  "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.8 Regression predictions",
        "code": "head(mammals_raw)\n#                   body brain\n#Arctic fox        3.385  44.5\n#Owl monkey        0.480  15.5\n#Mountain beaver   1.350   8.1\n#Cow             465.000 423.0\n#Grey wolf        36.330 119.5\n#Goat             27.660 115.0\nrownames(mammals_raw)\n#[1] \"Arctic fox\"                \"Owl monkey\"                \"Mountain beaver\"           \"Cow\"                      \n# [5] \"Grey wolf\"                 \"Goat\"                      \"Roe deer\"                  \"Guinea pig\"               \n# [9] \"Verbet\"                    \"Chinchilla\"                \"Ground squirrel\"           \"Arctic ground squirrel\"   \n#[13] \"African giant pouched rat\" \"Lesser short-tailed shrew\" \"Star-nosed mole\"           \"Nine-banded armadillo\"    \n#[17] \"Tree hyrax\"                \"N.A. opossum\"              \"Asian elephant\"            \"Big brown bat\"            \n#[21] \"Donkey\"                    \"Horse\"                     \"European hedgehog\"         \"Patas monkey\"             \n#[25] \"Cat\"                       \"Galago\"                    \"Genet\"                     \"Giraffe\"                  \n#[29] \"Gorilla\"                   \"Grey seal\"                 \"Rock hyrax-a\"              \"Human\"                    \n#[33] \"African elephant\"          \"Water opossum\"             \"Rhesus monkey\"             \"Kangaroo\"                 \n#[37] \"Yellow-bellied marmot\"     \"Golden hamster\"            \"Mouse\"                     \"Little brown bat\"         \n#[41] \"Slow loris\"                \"Okapi\"                     \"Rabbit\"                    \"Sheep\"                    \n#[45] \"Jaguar\"                    \"Chimpanzee\"                \"Baboon\"                    \"Desert hedgehog\"          \n#[49] \"Giant armadillo\"           \"Rock hyrax-b\"              \"Raccoon\"                   \"Rat\"                      \n#[53] \"E. American mole\"          \"Mole rat\"                  \"Musk shrew\"                \"Pig\"                      \n#[57] \"Echidna\"                   \"Brazilian tapir\"           \"Tenrec\"                    \"Phalanger\"                \n#[61] \"Tree shrew\"                \"Red fox\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.8 Regression predictions",
        "code": "new_body <- data.frame(body = c(272, 495, 160, 3.13), stringsAsFactors = FALSE)\nrownames(new_body) <- c(\"grizzly_bear\", \"bactrian_camel\", \"llama\", \"capuchin_monkey\")\nnew_body\n#                  body\n#grizzly_bear    272.00\n#bactrian_camel  495.00\n#llama           160.00\n#capuchin_monkey   3.13"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.8 Regression predictions",
        "code": "library(purrr)\nnew_body_log <- purrr::modify(new_body,log10)\nrownames(new_body_log) <- rownames(new_body)\nnew_body_log\n#                     body\n#grizzly_bear    2.4345689\n#bactrian_camel  2.6946052\n#llama           2.2041200\n#capuchin_monkey 0.4955443"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.8 Regression predictions",
        "code": "new_brain_log <- predict(log_brain_body, new_body_log)\nnew_brain_log\n#   grizzly_bear  bactrian_camel           llama capuchin_monkey \n#      2.757158        2.952624        2.583933        1.299621 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.8 Regression predictions",
        "code": "new_brain <- 10^new_brain_log\nnew_brain\n#   grizzly_bear  bactrian_camel           llama capuchin_monkey \n#       571.6868        896.6517        383.6480         19.9352 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.9 Logistic regressions",
        "code": "## load MASS package and \u2018cats\u2019 dataset\nlibrary(MASS)\n?cats\ncats_data <- cats\n# check structure\nstr(cats_data)\n#'data.frame':  144 obs. of  3 variables:\n# $ Sex: Factor w/ 2 levels \"F\",\"M\": 1 1 1 1 1 1 1 1 1 1 ...\n# $ Bwt: num  2 2 2 2.1 2.1 2.1 2.1 2.1 2.1 2.1 ...\n# $ Hwt: num  7 7.4 9.5 7.2 7.3 7.6 8.1 8.2 8.3 8.5 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.9 Logistic regressions",
        "code": "cats_data_logistic_fit <- glm(Sex ~ Bwt + Hwt, data = cats_data, family = binomial())\nsummary(cats_data_logistic_fit)\n#Call:\n#glm(formula = Sex ~ Bwt + Hwt, family = binomial(), data = cats_data)\n#\n#Deviance Residuals: \n#    Min       1Q   Median       3Q      Max  \n#-2.1727  -0.7815   0.3141   0.7476   1.8189  \n#\n#Coefficients:\n#            Estimate Std. Error z value Pr(>|z|)    \n#(Intercept) -8.69896    1.69982  -5.118 3.09e-07 ***\n#Bwt          3.55391    0.88208   4.029 5.60e-05 ***\n#Hwt          0.02295    0.16146   0.142    0.887    \n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n#(Dispersion parameter for binomial family taken to be 1)\n#\n#    Null deviance: 181.90  on 143  degrees of freedom\n#Residual deviance: 132.24  on 141  degrees of freedom\n#AIC: 138.24\n#\n#Number of Fisher Scoring iterations: 5"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.9 Logistic regressions",
        "code": "cats_data_newdata <- expand.grid(Bwt = pretty(cats_data$Bwt, 20), Hwt = pretty(cats_data$Hwt, 5))\ncats_data_newdata$Sex <- predict(cats_data_logistic_fit, newdata = cats_data_newdata, type = \"response\")\n## we require library ggplot2\nlibrary(ggplot2)\nggplot(cats_data_newdata, aes(x = Bwt, y = Sex)) + geom_line() + facet_wrap(~Hwt)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.10 Logistic regressions requirements",
        "code": "library(MASS)\nmy_cars <- Cars93\n?Cars93\nstr(my_cars)\n#'data.frame':  93 obs. of  27 variables:\n# $ Manufacturer      : Factor w/ 32 levels \"Acura\",\"Audi\",..: 1 1 2 2 3 4 4 4 4 5 ...\n# $ Model             : Factor w/ 93 levels \"100\",\"190E\",\"240\",..: 49 56 9 1 6 24 54 74 73 35 ...\n# $ Type              : Factor w/ 6 levels \"Compact\",\"Large\",..: 4 3 1 3 3 3 2 2 3 2 ...\n# $ Min.Price         : num  12.9 29.2 25.9 30.8 23.7 14.2 19.9 22.6 26.3 33 ...\n# $ Price             : num  15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ...\n# $ Max.Price         : num  18.8 38.7 32.3 44.6 36.2 17.3 21.7 24.9 26.3 36.3 ...\n# $ MPG.city          : int  25 18 20 19 22 22 19 16 19 16 ...\n# $ MPG.highway       : int  31 25 26 26 30 31 28 25 27 25 ...\n# $ AirBags           : Factor w/ 3 levels \"Driver & Passenger\",..: 3 1 2 1 2 2 2 2 2 2 ...\n# $ DriveTrain        : Factor w/ 3 levels \"4WD\",\"Front\",..: 2 2 2 2 3 2 2 3 2 2 ...\n# $ Cylinders         : Factor w/ 6 levels \"3\",\"4\",\"5\",\"6\",..: 2 4 4 4 2 2 4 4 4 5 ...\n# $ EngineSize        : num  1.8 3.2 2.8 2.8 3.5 2.2 3.8 5.7 3.8 4.9 ...\n# $ Horsepower        : int  140 200 172 172 208 110 170 180 170 200 ...\n# $ RPM               : int  6300 5500 5500 5500 5700 5200 4800 4000 4800 4100 ...\n# $ Rev.per.mile      : int  2890 2335 2280 2535 2545 2565 1570 1320 1690 1510 ...\n# $ Man.trans.avail   : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 1 1 1 1 1 ...\n# $ Fuel.tank.capacity: num  13.2 18 16.9 21.1 21.1 16.4 18 23 18.8 18 ...\n# $ Passengers        : int  5 5 5 6 4 6 6 6 5 6 ...\n# $ Length            : int  177 195 180 193 186 189 200 216 198 206 ...\n# $ Wheelbase         : int  102 115 102 106 109 105 111 116 108 114 ...\n# $ Width             : int  68 71 67 70 69 69 74 78 73 73 ...\n# $ Turn.circle       : int  37 38 37 37 39 41 42 45 41 43 ...\n# $ Rear.seat.room    : num  26.5 30 28 31 27 28 30.5 30.5 26.5 35 ...\n# $ Luggage.room      : int  11 15 14 17 13 16 17 21 14 18 ...\n# $ Weight            : int  2705 3560 3375 3405 3640 2880 3470 4105 3495 3620 ...\n# $ Origin            : Factor w/ 2 levels \"USA\",\"non-USA\": 2 2 2 2 2 1 1 1 1 1 ...\n# $ Make              : Factor w/ 93 levels \"Acura Integra\",..: 1 2 4 3 5 6 7 9 8 10 ...\n\n## we will try to determine if Origin is predicted by Price.\n\nprice_logistic_fit <- glm(Origin ~ Price, data = my_cars, family = binomial())\nsummary(price_logistic_fit)\n#\n# Call:\n# glm(formula = Origin ~ Price, family = binomial(), data = my_cars)\n#\n# Deviance Residuals: \n#    Min      1Q  Median      3Q     Max  \n# -1.340  -1.122  -1.058   1.209   1.311  \n#\n# Coefficients:\n#             Estimate Std. Error z value Pr(>|z|)\n# (Intercept) -0.47995    0.47851  -1.003    0.316\n# Price        0.02131    0.02217   0.961    0.336\n#\n# (Dispersion parameter for binomial family taken to be 1)\n#\n#     Null deviance: 128.83  on 92  degrees of freedom\n# Residual deviance: 127.88  on 91  degrees of freedom\n# AIC: 131.88\n#\n# Number of Fisher Scoring iterations: 4"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.10 Logistic regressions requirements",
        "code": "my_car_origin_price <- subset(Cars93, select = c(Origin, Price))\nstr(my_car_origin_price)\n# 'data.frame': 93 obs. of  2 variables:\n# $ Origin: Factor w/ 2 levels \"USA\",\"non-USA\": 2 2 2 2 2 1 1 1 1 1 ...\n# $ Price : num  15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ...\n\n## now, we transform Origin into a character variable\nmy_car_origin_price$Origin <- as.character(my_car_origin_price$Origin)\nstr(my_car_origin_price)\n# 'data.frame':   93 obs. of  2 variables:\n# $ Origin: chr  \"non-USA\" \"non-USA\" \"non-USA\" \"non-USA\" ...\n# $ Price : num  15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ...\n\n## we repeat the analysis, and we get an error\nprice_logistic_fit <- glm(Origin ~ Price, data = my_car_origin_price, family = binomial())\n# Error in eval(family$initialize) : y values must be 0 <= y <= 1\n\n## we get this error and we need to make it binary (0 and 1) or a factor\n## 0 will be non-USA and 1 will be USA\nmy_car_origin_price$Origin <- ifelse(my_car_origin_price$Origin == \"USA\", 1,0)\nhead(my_car_origin_price)\n#  Origin Price\n#1      0  15.9\n#2      0  33.9\n#3      0  29.1\n#4      0  37.7\n#5      0  30.0\n#6      1  15.7\n\n## we repeat the analysis, it works now, and we get the same result\nprice_logistic_fit <- glm(Origin ~ Price, data = my_car_origin_price, family = binomial())\nsummary(price_logistic_fit)\n#\n# Call:\n# glm(formula = Origin ~ Price, family = binomial(), data = my_cars)\n#\n# Deviance Residuals: \n#    Min      1Q  Median      3Q     Max  \n# -1.340  -1.122  -1.058   1.209   1.311  \n#\n# Coefficients:\n#             Estimate Std. Error z value Pr(>|z|)\n# (Intercept) -0.47995    0.47851  -1.003    0.316\n# Price        0.02131    0.02217   0.961    0.336\n#\n# (Dispersion parameter for binomial family taken to be 1)\n#\n#     Null deviance: 128.83  on 92  degrees of freedom\n# Residual deviance: 127.88  on 91  degrees of freedom\n# AIC: 131.88\n#\n# Number of Fisher Scoring iterations: 4"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.10 Logistic regressions requirements",
        "code": "my_car_mpg_price <- subset(Cars93, select = c(MPG.city, Price))\nstr(my_car_mpg_price)\n#'data.frame':   93 obs. of  2 variables:\n# $ MPG.city: int  25 18 20 19 22 22 19 16 19 16 ...\n# $ Price   : num  15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ...\n\n## we can binarize MPG.city as 0 and 1\nmy_car_mpg_price$binary_mpg <- ifelse(my_car_mpg_price$MPG.city <=20,1,0)\nstr(my_car_mpg_price)\n#'data.frame':  93 obs. of  3 variables:\n# $ MPG.city  : int  25 18 20 19 22 22 19 16 19 16 ...\n# $ Price     : num  15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ...\n# $ binary_mpg: num  0 1 1 1 0 0 1 1 1 1 ...\n\n## we will try to determine if binary_mpg is predicted by Price.\nmpg_logistic_fit <- glm(binary_mpg ~ Price, data = my_car_mpg_price, family = binomial())\nsummary(mpg_logistic_fit)\n# \n# Call:\n# glm(formula = binary_mpg ~ Price, family = binomial(), data = my_car_mpg_price)\n#\n# Deviance Residuals: \n#    Min       1Q   Median       3Q      Max  \n# -2.8353  -0.5372  -0.2289   0.3939   1.9267  \n#\n# Coefficients:\n#             Estimate Std. Error z value Pr(>|z|)    \n# (Intercept) -6.59673    1.40187  -4.706 2.53e-06 ***\n# Price        0.35327    0.07742   4.563 5.04e-06 ***\n# ---\n# Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n# (Dispersion parameter for binomial family taken to be 1)\n#\n#     Null deviance: 128.40  on 92  degrees of freedom\n# Residual deviance:  68.54  on 91  degrees of freedom\n# AIC: 72.54\n#\n# Number of Fisher Scoring iterations: 6\n\n## we can binarize MPG.city as low_milage and high_milage\nmy_car_mpg_price$factor_mpg <- ifelse(my_car_mpg_price$MPG.city <=20,\"low_milage\",\"high_milage\")\n\n## remember to make factor_mpg as a factor variable\nmy_car_mpg_price$factor_mpg <- as.factor(my_car_mpg_price$factor_mpg)\nstr(my_car_mpg_price)\n#'data.frame':   93 obs. of  4 variables:\n# $ MPG.city  : int  25 18 20 19 22 22 19 16 19 16 ...\n# $ Price     : num  15.9 33.9 29.1 37.7 30 15.7 20.8 23.7 26.3 34.7 ...\n# $ binary_mpg: num  0 1 1 1 0 0 1 1 1 1 ...\n# $ factor_mpg: Factor w/ 2 levels \"high_milage\",..: 1 2 2 2 1 1 2 2 2 2 ...\n\n## we repeat the same analysis and get the same result\nmpg_logistic_fit <- glm(factor_mpg ~ Price, data = my_car_mpg_price, family = binomial())\nsummary(mpg_logistic_fit)\n# \n# Call:\n# glm(formula = binary_mpg ~ Price, family = binomial(), data = my_car_mpg_price)\n#\n# Deviance Residuals: \n#    Min       1Q   Median       3Q      Max  \n# -2.8353  -0.5372  -0.2289   0.3939   1.9267  \n#\n# Coefficients:\n#             Estimate Std. Error z value Pr(>|z|)    \n# (Intercept) -6.59673    1.40187  -4.706 2.53e-06 ***\n# Price        0.35327    0.07742   4.563 5.04e-06 ***\n# ---\n# Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n# (Dispersion parameter for binomial family taken to be 1)\n#\n#     Null deviance: 128.40  on 92  degrees of freedom\n# Residual deviance:  68.54  on 91  degrees of freedom\n# AIC: 72.54\n#\n# Number of Fisher Scoring iterations: 6"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.11 Non-linear regressions",
        "code": "## we need to install the 'drc' package\ninstall.packages(\"drc\")\nlibrary(drc)\n## we install a library with examples of exponential growth\ninstall.packages(\"growthrates\")\nlibrary(growthrates)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.11 Non-linear regressions",
        "code": "## load an example\ndata(bactgrowth)\nhead(bactgrowth)\n#  strain replicate conc time value\n#1      T         2    0    0 0.013\n#2      T         2    0    1 0.014\n#3      T         2    0    2 0.017\n#4      T         2    0    3 0.022\n#5      T         2    0    4 0.030\n#6      T         2    0    5 0.039"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.11 Non-linear regressions",
        "code": "bactgrowth_strain_T <- subset(bactgrowth, strain == \"T\" & replicate == 2 & conc == 31.25)\nhead(bactgrowth_strain_T)\n#          strain replicate  conc time value\n#249      T         2 31.25    0 0.011\n#250      T         2 31.25    1 0.010\n#251      T         2 31.25    2 0.010\n#252      T         2 31.25    3 0.010\n#253      T         2 31.25    4 0.010\n#254      T         2 31.25    5 0.011\n\n# visualize this graph\nplot(value~time, data = bactgrowth_strain_T)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.11 Non-linear regressions",
        "code": "## fct for exponential growth \nmodel_bactgrowth_strain_T <- drc::drm(value ~ time, fct = G.4(), data = bactgrowth_strain_T)\nsummary(model_bactgrowth_strain_T)\n#Model fitted: Gompertz (4 parms)\n#\n#Parameter estimates:\n#\n#                Estimate Std. Error t-value   p-value    \n#b:(Intercept) -0.1799145  0.0061157 -29.419 < 2.2e-16 ***\n#c:(Intercept)  0.0105954  0.0003694  28.683 < 2.2e-16 ***\n#d:(Intercept)  0.1008913  0.0013430  75.122 < 2.2e-16 ***\n#e:(Intercept) 16.6860271  0.1201873 138.833 < 2.2e-16 ***\n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n#Residual standard error:\n#\n#0.001105757 (27 degrees of freedom)\n\n## we can plot the fit of this function\nplot(model_bactgrowth_strain_T)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.11 Non-linear regressions",
        "code": "new_time <- data.frame(time = c(31,50,100,1000))\nrownames(new_time) <- c(\"time_31\", \"time_50\", \"time_100\", \"time_1000\")\nnew_values_growth <- predict(model_bactgrowth_strain_T, new_time)\nnames(new_values_growth) <- c(\"time_31\", \"time_50\", \"time_100\", \"time_1000\")\nnew_values_growth\n#  time_31   time_50  time_100 time_1000 \n#0.0942721 0.1006664 0.1008913 0.1008913 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.11 Non-linear regressions",
        "code": "model_bactgrowth_strain_T_nls <- nls(value ~ a*exp(r*time), data =  bactgrowth_strain_T,start = list(a = 0.5, r = 0.2))\nsummary(model_bactgrowth_strain_T_nls)\n#Formula: value ~ a * exp(r * time)\n#\n#Parameters:\n#  Estimate Std. Error t value Pr(>|t|)    \n#a 0.011133   0.001356   8.213 4.69e-09 ***\n#r 0.076416   0.004887  15.636 1.15e-15 ***\n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1\n#\n#Residual standard error: 0.008326 on 29 degrees of freedom\n#\n#Number of iterations to convergence: 11 \n#Achieved convergence tolerance: 3.249e-06\n\ncoef(model_bactgrowth_strain_T_nls)\n#         a          r \n#0.01113342 0.07641632\nmodel_coeff <- coef(model_bactgrowth_strain_T_nls)\n\n# plot this graph\n\nplot(value ~ time, data = bactgrowth_strain_T, main = \"bactgrowth_strain_T\")\nlines(bactgrowth_strain_T$time, model_coeff[1]*exp(model_coeff[2]*bactgrowth_strain_T$time), col = \"orange2\", lwd = 2)\n\n# this is the same graph\n#plot(value ~ time, data = bactgrowth_strain_T, main = \"bactgrowth_strain_T\")\n#lines(bactgrowth_strain_T$time, 0.01113342*exp(0.07641632*bactgrowth_strain_T$time), col = \"orange2\", lwd = 2)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.11 Non-linear regressions",
        "code": "new_time <- data.frame(time = c(31,50,100,1000))\nrownames(new_time) <- c(\"time_31\", \"time_50\", \"time_100\", \"time_1000\")\nnew_values_growth_nls <- predict(model_bactgrowth_strain_T_nls, new_time)\nnames(new_values_growth_nls) <- c(\"time_31\", \"time_50\", \"time_100\", \"time_1000\")\nnew_values_growth_nls\n#       time_31      time_50     time_100    time_1000 \n#1.189684e-01 5.081454e-01 2.319249e+01 1.713226e+31 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.12 Toy datasets for regressions",
        "code": "install.packages(\"ade4\")\nlibrary(ade4)\ndata(aravo)\naravo_traits <- aravo$traits\nhead(aravo_traits)\n#          Height Spread Angle  Area Thick  SLA N_mass Seed\n#Agro.rupe      6     10    80  60.0  0.12  8.1 218.70 0.08\n#Alop.alpi      5     20    20 190.9  0.20 15.1 203.85 0.21\n#Anth.nipp     15      5    50 280.0  0.08 18.0 219.60 0.54\n#Heli.sede      0     30    80 600.0  0.20 10.6 233.20 1.72\n#Aven.vers     12     30    60 420.0  0.14 12.5 156.25 1.17\n#Care.rosa     30     20    80 180.0  0.40  6.5 208.65 1.68"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.12 Toy datasets for regressions",
        "code": "install.packages(\"ade4\")\nlibrary(ade4)\ndata(bacteria)\nbacteria_espaa <- bacteria$espaa\nhead(bacteria_espaa)\n#          Ala   Arg   Asn   Asp  Cys   Gln   Glu   Gly   His   Ile    Leu   Lys   Met   Phe   Pro   Ser  Stp   Thr   Trp   Tyr   Val\n#AERPECG 60384 48823 12907 24567 5896 12058 41892 54161 12189 32902  72081 22335 12476 17397 40897 47682 2619 29697  8324 21272 55421\n#AQUAECG 28326 23565 17294 20754 3770  9791 46216 32425  7430 35203  50946 45092  8979 24736 19580 23036 1490 20221  4495 19887 38211\n#ARCFUCG 50661 36713 20664 31358 7358 11448 56642 46562  9733 46172  60810 43489 16109 29467 24835 35350 2088 26833  6639 23426 55527\n#BACHDCG 85555 55731 41785 58649 8393 47325 90358 81279 27972 80022 115667 67022 30743 51345 44287 64903 3558 64274 13156 39079 86451\n#BACSUCG 91276 48698 46474 61327 9340 45257 85399 82164 26892 87050 114745 82768 31755 53186 43835 74444 3628 64270 12238 41133 80173\n#BORBUCG 12555  8898 20318 14526 1822  6305 18931 14559  3403 29993  29020 28498  5008 17514  7044 20862  773 11018  1404 11814 14980"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.12 Toy datasets for regressions",
        "code": "install.packages(\"ade4\")\nlibrary(ade4)\ndata(carni70)\ncarni70_size_range <- carni70$tab\nhead(carni70_size_range)\n#                         size range\n#Puma_concolor           37.01 36.00\n#Herpailurus_yaguaroundi  2.59 24.00\n#Leopardus_wiedii         3.20 21.75\n#Leopardus_pardalis       7.90 24.50\n#Oreailurus_jacobita      3.99  1.75\n#Oncifelis_colocolo       2.99  6.25"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.12 Toy datasets for regressions",
        "code": "install.packages(\"ade4\")\nlibrary(ade4)\ndata(cnc2003)\ncnc2003_data <- cnc2003\nhead(cnc2003_data)\n#     popu  entr   rece sean comm etab salle  faut artes multi                   depart                       reg\n#D1 0.515 0.769  4.065   26   16   20    35  6288    12     0                      Ain               Rhone-Alpes\n#D2 0.536 0.731  3.942   28   14   15    38  7403     8     0                    Aisne                  Picardie\n#D3 0.345 0.499  2.789   17    7   11    28  3956     4     0                   Allier                  Auvergne\n#D4 0.140 0.453  2.262   17   13   15    23  3480     7     0 Alpes de Hautes Provence Provence-Alpes-Coted'Azur\n#D5 0.121 0.522  2.908   21   19   23    35  6053     5     0             Hautes Alpes Provence-Alpes-Coted'Azur\n#D6 1.011 3.520 21.731  111   23   42    94 16764     8     1          Alpes Maritimes Provence-Alpes-Coted'Azur"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.12 Toy datasets for regressions",
        "code": "install.packages(\"mlbench\")\nlibrary(mlbench)\ndata(PimaIndiansDiabetes2)\nPimaIndiansDiabetes2 <- na.omit(PimaIndiansDiabetes2)\nPimaIndiansDiabetes2$prob_diabetes <- ifelse(PimaIndiansDiabetes2$diabetes == \"pos\", 1, 0)\nhead(PimaIndiansDiabetes2)\n#    pregnant glucose pressure triceps insulin mass pedigree age diabetes prob_diabetes\n#4         1      89       66      23      94 28.1    0.167  21      neg             0\n#5         0     137       40      35     168 43.1    2.288  33      pos             1\n#7         3      78       50      32      88 31.0    0.248  26      pos             1\n#9         2     197       70      45     543 30.5    0.158  53      pos             1\n#14        1     189       60      23     846 30.1    0.398  59      pos             1\n#15        5     166       72      19     175 25.8    0.587  51      pos             1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.12 Toy datasets for regressions",
        "code": "install.packages(\"mlbench\")\nlibrary(mlbench)\ndata(BostonHousing)\nBostonHousing_data <- BostonHousing\nhead(BostonHousing_data)\n#     crim zn indus chas   nox    rm  age    dis rad tax ptratio      b lstat medv\n#1 0.00632 18  2.31    0 0.538 6.575 65.2 4.0900   1 296    15.3 396.90  4.98 24.0\n#2 0.02731  0  7.07    0 0.469 6.421 78.9 4.9671   2 242    17.8 396.90  9.14 21.6\n#3 0.02729  0  7.07    0 0.469 7.185 61.1 4.9671   2 242    17.8 392.83  4.03 34.7\n#4 0.03237  0  2.18    0 0.458 6.998 45.8 6.0622   3 222    18.7 394.63  2.94 33.4\n#5 0.06905  0  2.18    0 0.458 7.147 54.2 6.0622   3 222    18.7 396.90  5.33 36.2\n#6 0.02985  0  2.18    0 0.458 6.430 58.7 6.0622   3 222    18.7 394.12  5.21 28.7"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.14 One-way ANOVA",
        "code": "## we have already downloaded MASS and we assign the crabs dataset to an object\nlibrary(MASS)\n?crabs\ncrab_dataset <- crabs\nhead(crab_dataset)\n#  sp sex index   FL  RW   CL   CW  BD\n#1  B   M     1  8.1 6.7 16.1 19.0 7.0\n#2  B   M     2  8.8 7.7 18.1 20.8 7.4\n#3  B   M     3  9.2 7.8 19.0 22.4 7.7\n#4  B   M     4  9.6 7.9 20.1 23.1 8.2\n#5  B   M     5  9.8 8.0 20.3 23.0 8.2\n#6  B   M     6 10.8 9.0 23.0 26.5 9.8"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.14 One-way ANOVA",
        "code": "CL_anova_one_way <- aov(CL ~ sp, data = crab_dataset)\nCL_anova_one_way\n#Call:\n#   aov(formula = CL ~ sp, data = crab_dataset)\n#\n#Terms:\n#                      sp Residuals\n#Sum of Squares   838.451  9246.853\n#Deg. of Freedom        1       198\n#\n#Residual standard error: 6.833833\n#Estimated effects may be unbalanced\nsummary(CL_anova_one_way)\n#             Df Sum Sq Mean Sq F value   Pr(>F)    \n#sp            1    838   838.5   17.95 3.47e-05 ***\n#Residuals   198   9247    46.7                     \n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.15 Two-way ANOVA",
        "code": "CL_anova_two_way <- aov(CL ~ sp + sex, data = crab_dataset)\nCL_anova_two_way\n#Call:\n#   aov(formula = CL ~ sp + sex, data = crab_dataset)\n#\n#Terms:\n#                      sp      sex Residuals\n#Sum of Squares   838.451  111.154  9135.699\n#Deg. of Freedom        1        1       197\n#\n#Residual standard error: 6.809854\n#Estimated effects may be unbalanced\nsummary(CL_anova_two_way)\n#             Df Sum Sq Mean Sq F value   Pr(>F)    \n#sp            1    838   838.5  18.080 3.27e-05 ***\n#sex           1    111   111.2   2.397    0.123    \n#Residuals   197   9136    46.4                     \n#---\n#Signif. codes:  0 \u2018***\u2019 0.001 \u2018**\u2019 0.01 \u2018*\u2019 0.05 \u2018.\u2019 0.1 \u2018 \u2019 1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.16 ANOVA Post-hoc tests",
        "code": "## one-way ANOVA\nTukeyHSD(CL_anova_one_way)\n#  Tukey multiple comparisons of means\n#    95% family-wise confidence level\n#\n#Fit: aov(formula = CL ~ sp, data = crab_dataset)\n#\n#$sp\n#     diff      lwr      upr    p adj\n#O-B 4.095 2.189144 6.000856 3.47e-05\n\n## two-way ANOVA\nTukeyHSD(CL_anova_two_way)\n#  Tukey multiple comparisons of means\n#    95% family-wise confidence level\n#\n#Fit: aov(formula = CL ~ sp + sex, data = crab_dataset)\n#\n#$sp\n#     diff      lwr      upr    p adj\n#O-B 4.095 2.195772 5.994228 3.27e-05\n#\n#$sex\n#     diff        lwr      upr    p adj\n#M-F 1.491 -0.4082279 3.390228 0.123181"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.17 Beyond ANOVA: Kruskal-Wallis Test",
        "code": "## we can get crabs dataset\nlibrary(MASS)\ncrab_dataset <- crabs\nhead(crab_dataset)\n#  sp sex index   FL  RW   CL   CW  BD\n#1  B   M     1  8.1 6.7 16.1 19.0 7.0\n#2  B   M     2  8.8 7.7 18.1 20.8 7.4\n#3  B   M     3  9.2 7.8 19.0 22.4 7.7\n#4  B   M     4  9.6 7.9 20.1 23.1 8.2\n#5  B   M     5  9.8 8.0 20.3 23.0 8.2\n#6  B   M     6 10.8 9.0 23.0 26.5 9.8"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.17 Beyond ANOVA: Kruskal-Wallis Test",
        "code": "## for sex as grouping\nkruskal.test(CL ~ sex, data = crab_dataset)\n#   Kruskal-Wallis rank sum test\n#\n#data:  CL by sex\n#Kruskal-Wallis chi-squared = 1.8424, df = 1, p-value = 0.1747\n\n## for species as grouping\nkruskal.test(CL ~ sp, data = crab_dataset)\n#   Kruskal-Wallis rank sum test\n#\n#data:  CL by sp\n#Kruskal-Wallis chi-squared = 15.698, df = 1, p-value = 7.431e-05"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.18 Toy datasets for ANOVA",
        "code": "install.packages(\"agridat\")\nlibrary(agridat)\ndata(fisher.barley)\nfisher_barley <- fisher.barley\nhead(fisher_barley)\n#  yield       gen            env year\n#1  81.0 Manchuria UniversityFarm 1931\n#2  80.7 Manchuria UniversityFarm 1932\n#3 146.6 Manchuria         Waseca 1931\n#4 100.4 Manchuria         Waseca 1932\n#5  82.3 Manchuria         Morris 1931\n#6 103.1 Manchuria         Morris 1932"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/regressions-and-anova-in-r.html",
        "section": "Session 7 \u2013 Regressions and ANOVA in R",
        "subsection": "7.18 Toy datasets for ANOVA",
        "code": "install.packages(\"agridat\")\nlibrary(agridat)\ndata(gumpertz.pepper)\ngumpertz_pepper <- gumpertz.pepper\nhead(gumpertz_pepper)\n#  field row quadrat disease water leaf\n#1    F1   1       1       N 15.05    5\n#2    F1   1       2       N 14.32    2\n#3    F1   1       3       N 13.99    3\n#4    F1   1       4       N 13.85    0\n#5    F1   1       5       N 13.16    5\n#6    F1   1       6       N 11.81    5"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "## we can install ade4 and load the dataset for this example\ninstall.packages(\"ade4\")\nlibrary(ade4)\n\n##load the doubs dataset into the R environment\ndata(doubs)\n\n## dataset of eological tables for environmental variables, fish species and spatial coordinates for 30 sites.\n?doubs\n\n## we will use only the environmental variables\nenv_raw <- doubs$env\nhead(env_raw)\n#  dfs alt   slo flo pH har pho nit amm oxy bdo\n#1   3 934 6.176  84 79  45   1  20   0 122  27\n#2  22 932 3.434 100 80  40   2  20  10 103  19\n#3 102 914 3.638 180 83  52   5  22   5 105  35\n#4 185 854 3.497 253 80  72  10  21   0 110  13\n#5 215 849 3.178 264 81  84  38  52  20  80  62\n#6 324 846 3.497 286 79  60  20  15   0 102  53"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "## we can install ade4 and load the dataset for this example\npairs(env_raw, pch = 19, cex=0.5)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "## we can use the function modify() form the R-package **purrr** to standardize this dataset using log\nlibrary(purrr)\nenv_log <- purrr::modify(env_raw, log)\nhead(env_log)\n#       dfs      alt      slo      flo       pH      har       pho      nit      amm      oxy      bdo\n#1 1.098612 6.839476 1.820671 4.430817 4.369448 3.806662 0.0000000 2.995732     -Inf 4.804021 3.295837\n#2 3.091042 6.837333 1.233726 4.605170 4.382027 3.688879 0.6931472 2.995732 2.302585 4.634729 2.944439\n#3 4.624973 6.817831 1.291434 5.192957 4.418841 3.951244 1.6094379 3.091042 1.609438 4.653960 3.555348\n#4 5.220356 6.749931 1.251905 5.533389 4.382027 4.276666 2.3025851 3.044522     -Inf 4.700480 2.564949\n#5 5.370638 6.744059 1.156252 5.575949 4.394449 4.430817 3.6375862 3.951244 2.995732 4.382027 4.127134\n#6 5.780744 6.740519 1.251905 5.655992 4.369448 4.094345 2.9957323 2.708050     -Inf 4.624973 3.970292\n\n## Notice some -Inf value, we will remove that column 9 that corresponds to \u2018amm\u2019\nenv_log_red <- env_log[,-9]\nhead(env_log_red)\n#       dfs      alt      slo      flo       pH      har       pho      nit      oxy      bdo\n#1 1.098612 6.839476 1.820671 4.430817 4.369448 3.806662 0.0000000 2.995732 4.804021 3.295837\n#2 3.091042 6.837333 1.233726 4.605170 4.382027 3.688879 0.6931472 2.995732 4.634729 2.944439\n#3 4.624973 6.817831 1.291434 5.192957 4.418841 3.951244 1.6094379 3.091042 4.653960 3.555348\n#4 5.220356 6.749931 1.251905 5.533389 4.382027 4.276666 2.3025851 3.044522 4.700480 2.564949\n#5 5.370638 6.744059 1.156252 5.575949 4.394449 4.430817 3.6375862 3.951244 4.382027 4.127134\n#6 5.780744 6.740519 1.251905 5.655992 4.369448 4.094345 2.9957323 2.708050 4.624973 3.970292\n\n## we can install ade4 and load the modified dataset for this example\npairs(env_log_red, pch = 19, cex=0.5)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "## apply PCA - scale. = TRUE is highly advisable, but default is FALSE. \nenv_prcomp <- prcomp(env_log_red, center = TRUE, scale. = TRUE) \nenv_prcomp\n#Standard deviations (1, .., p=10):\n# [1] 2.5031260 1.2651443 0.9875811 0.6860815 0.5095091 0.3946341 0.3212448 0.2824013 0.2580574 0.1512203\n#\n#Rotation (n x k) = (10 x 10):\n#            PC1         PC2        PC3         PC4          PC5         PC6          PC7         PC8         PC9         PC10\n#dfs  0.36486258 -0.18617302  0.1482270 -0.27425018  0.070856291 -0.06822936  0.375972370  0.04774989 -0.73277048  0.211581601\n#alt -0.36451449  0.12764399 -0.1690422 -0.36872511  0.165563399  0.30103670  0.159545574  0.45954368 -0.16927250 -0.550436218\n#slo -0.33426066  0.15461463  0.2062596 -0.41599181 -0.694152941  0.08059586 -0.008314283 -0.38539136 -0.10748520  0.016710642\n#flo  0.35536702 -0.26645120  0.2469480  0.07962110 -0.140470255 -0.21095156  0.148040510 -0.22735329  0.11111159 -0.764991160\n#pH   0.02686455 -0.43046956 -0.8301590 -0.07333534 -0.270021833 -0.14147519 -0.099820286 -0.07667608 -0.09705901 -0.035234427\n#har  0.32775459 -0.15043755  0.1025784 -0.71869778  0.192865111 -0.02065425 -0.450542106  0.06200716  0.30538254  0.071982806\n#pho  0.35978479  0.15025127 -0.2384279 -0.09780973  0.004998182  0.59283974  0.493290882 -0.25929815  0.33522306  0.084468872\n#nit  0.36509191 -0.03139547  0.1053406  0.23840435 -0.511528294  0.41078684 -0.313263865  0.51006660 -0.09509725 -0.006021563\n#oxy -0.25192228 -0.56073462  0.2173434 -0.06473107 -0.174757541 -0.08405657  0.438140938  0.36832297  0.39110186  0.229102408\n#bdo  0.24827761  0.55517993 -0.1762335 -0.13016095 -0.252295130 -0.55318468  0.254587830  0.33694829  0.18286003  0.026082994"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "## we can see the structure of the analysis\nstr(env_prcomp)\n#List of 5\n# $ sdev    : num [1:10] 2.503 1.265 0.988 0.686 0.51 ...\n#$ rotation: num [1:10, 1:10] 0.3649 -0.3645 -0.3343 0.3554 0.0269 ...\n#  ..- attr(*, \"dimnames\")=List of 2\n# .. ..$ : chr [1:10] \"dfs\" \"alt\" \"slo\" \"flo\" ...\n#  .. ..$ : chr [1:10] \"PC1\" \"PC2\" \"PC3\" \"PC4\" ...\n#$ center  : Named num [1:10] 6.887 6.019 0.943 7.153 4.388 ...\n# ..- attr(*, \"names\")= chr [1:10] \"dfs\" \"alt\" \"slo\" \"flo\" ...\n#$ scale   : Named num [1:10] 1.6786 0.5747 0.3863 1.3041 0.0214 ...\n# ..- attr(*, \"names\")= chr [1:10] \"dfs\" \"alt\" \"slo\" \"flo\" ...\n#$ x       : num [1:30, 1:10] -6 -4.96 -3.6 -3.18 -1.24 ...\n#  ..- attr(*, \"dimnames\")=List of 2\n#  .. ..$ : chr [1:30] \"1\" \"2\" \"3\" \"4\" ...\n#  .. ..$ : chr [1:10] \"PC1\" \"PC2\" \"PC3\" \"PC4\" ...\n# - attr(*, \"class\")= chr \"prcomp\"\n\n## we can get a summary\nsummary(env_prcomp)\n#Importance of components:\n#                          PC1    PC2     PC3     PC4     PC5     PC6     PC7     PC8     PC9    PC10\n#Standard deviation     2.5031 1.2651 0.98758 0.68608 0.50951 0.39463 0.32124 0.28240 0.25806 0.15122\n#Proportion of Variance 0.6266 0.1601 0.09753 0.04707 0.02596 0.01557 0.01032 0.00798 0.00666 0.00229\n#Cumulative Proportion  0.6266 0.7866 0.88415 0.93123 0.95719 0.97276 0.98308 0.99105 0.99771 1.00000"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "## install package, if not present. It also requires the R-package ggplot2.\ninstall.packages(\"factoextra\")\ninstall.packages(\"ggplot2\")\nlibrary(factoextra)\n#Loading required package: ggplot2\n#Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa\nfactoextra::fviz_eig(env_prcomp)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "factoextra::fviz_pca_ind(env_prcomp,\n                   col.ind = \"cos2\", \n             gradient.cols = c(\"firebrick4\", \"gray\", \"dodgerblue4\"),\n                     repel = TRUE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "### NOTE: Sometimes you get this error. \n#Error in UseMethod(\"depth\") : \n#  no applicable method for 'depth' applied to an object of class \"NULL\"\n### Try to resubmit the fviz_pca_ind() after closing the graph window."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "factoextra::fviz_pca_var(env_prcomp,\n             col.var = \"contrib\", \n             gradient.cols = c(\"dodgerblue4\", \"#E7B800\", \"firebrick4\"),\n             repel = TRUE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "### NOTE: Sometimes you get this error. \n#Error in UseMethod(\"depth\") : \n#  no applicable method for 'depth' applied to an object of class \"NULL\"\n### Try to resubmit the fviz_pca_ind() after closing the graph window."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "factoextra::fviz_pca_biplot(env_prcomp,\n                col.var = \"gray\", # Variables color\n                col.ind = \"dodgerblue4\",  # Individuals color\n                repel = TRUE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "## Eigenvalues\neig_val_env_prcomp <- factoextra::get_eigenvalue(env_prcomp)\neig_val_env_prcomp\n#       eigenvalue variance.percent cumulative.variance.percent\n#Dim.1  6.26563999       62.6563999                    62.65640\n#Dim.2  1.60059015       16.0059015                    78.66230\n#Dim.3  0.97531642        9.7531642                    88.41547\n#Dim.4  0.47070789        4.7070789                    93.12254\n#Dim.5  0.25959955        2.5959955                    95.71854\n#Dim.6  0.15573609        1.5573609                    97.27590\n#Dim.7  0.10319822        1.0319822                    98.30788\n#Dim.8  0.07975052        0.7975052                    99.10539\n#Dim.9  0.06659361        0.6659361                    99.77132\n#Dim.10 0.02286757        0.2286757                   100.00000"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "## Results for Variables\nres_var_env_prcomp <- factoextra::get_pca_var(env_prcomp)\n# Coordinates\nres_var_env_prcomp$coord \n# Contributions to the PCs     \nres_var_env_prcomp$contrib \n# Quality of representation \nres_var_env_prcomp$cos2           "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.1 Principal Component Analysis",
        "code": "## Results for individuals\nres_ind_env_prcomp <- factoextra::get_pca_ind(env_prcomp)\n# Coordinates -- this is same as env_prcomp$x\nres_ind_env_prcomp$coord   \n# Contributions to the PCs       \nres_ind_env_prcomp$contrib\n# Quality of representation         \nres_ind_env_prcomp$cos2           "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.2 Multidimensional scaling",
        "code": "## We can name our samples by assigned a unique row name.\nenv_log_red_MDS <- env_log_red\nrownames(env_log_red_MDS) <- paste0(\"site_\", 1:nrow(env_log_red_MDS))\nhead(env_log_red_MDS)\n#            dfs      alt      slo      flo       pH      har       pho      nit      oxy      bdo\n#site_1 1.098612 6.839476 1.820671 4.430817 4.369448 3.806662 0.0000000 2.995732 4.804021 3.295837\n#site_2 3.091042 6.837333 1.233726 4.605170 4.382027 3.688879 0.6931472 2.995732 4.634729 2.944439\n#site_3 4.624973 6.817831 1.291434 5.192957 4.418841 3.951244 1.6094379 3.091042 4.653960 3.555348\n#site_4 5.220356 6.749931 1.251905 5.533389 4.382027 4.276666 2.3025851 3.044522 4.700480 2.564949\n#site_5 5.370638 6.744059 1.156252 5.575949 4.394449 4.430817 3.6375862 3.951244 4.382027 4.127134\n#site_6 5.780744 6.740519 1.251905 5.655992 4.369448 4.094345 2.9957323 2.708050 4.624973 3.970292"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.2 Multidimensional scaling",
        "code": "## Classical MDS: N rows (objects) x p columns (variables)\n# get Euclidean distances between the rows\nenv_log_red_MDS_d <- dist(env_log_red_MDS) \n# k is the number of dimensions\nenv_log_red_MDS_fit <- cmdscale(env_log_red_MDS_d,eig=TRUE, k=2) \nstr(env_log_red_MDS_fit)\n#List of 5\n# $ points: num [1:30, 1:2] -7.21 -5.58 -3.84 -3.11 -1.83 ...\n#  ..- attr(*, \"dimnames\")=List of 2\n#  .. ..$ : chr [1:30] \"site_1\" \"site_2\" \"site_3\" \"site_4\" ...\n#  .. ..$ : NULL\n#$ eig   : num [1:30] 203.13 25.14 9.43 4.54 3.22 ...\n#$ x     : NULL\n#$ ac    : num 0\n#$ GOF   : num [1:2] 0.92 0.92"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.2 Multidimensional scaling",
        "code": "## plot solution\nx <- env_log_red_MDS_fit$points[,1]\ny <- env_log_red_MDS_fit$points[,2]\nplot(x, y, xlab= \"Coordinate 1 - MDS\", ylab=\"Coordinate 2 - MDS\", main=\"Metric MDS for env_log_red\", type=\"n\")\ntext(x, y, labels = row.names(env_log_red_MDS), cex=.7) "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.2 Multidimensional scaling",
        "code": "## For nonmetric MDS, we load MASS (we installed this package before)\nlibrary(MASS)\nenv_log_red_MDS_d <- dist(env_log_red_MDS) \nenv_log_red_NMDS <- MASS::isoMDS(env_log_red_MDS_d, k=2)\nstr(env_log_red_NMDS)\n#List of 2\n# $ points: num [1:30, 1:2] -7.64 -5.6 -3.74 -3.08 -1.72 ...\n#  ..- attr(*, \"dimnames\")=List of 2\n#  .. ..$ : chr [1:30] \"site_1\" \"site_2\" \"site_3\" \"site_4\" ...\n#  .. ..$ : NULL\n# $ stress: num 2.49\n\n## plot solution NMDS solution\nx <- env_log_red_NMDS$points[,1]\ny <- env_log_red_NMDS$points[,2]\nplot(x, y, xlab= \"Coordinate 1 - NMDS\", ylab=\"Coordinate 2 - NMDS\", main=\"Nonmetric MDS for env_log_red\", type=\"n\")\ntext(x, y, labels = row.names(env_log_red_MDS), cex=.7) "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.3 Cluster analysis: DFA",
        "code": "install.packages(\"datasets\")\nlibrary(datasets)\ndata(iris)\niris_dataset <- iris\nsummary(iris_dataset)\n#  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width          Species  \n#Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100   setosa    :50  \n#1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300   versicolor:50  \n#Median :5.800   Median :3.000   Median :4.350   Median :1.300   virginica :50  \n#Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199                  \n#3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800                  \n#Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500                  \nhead(iris_dataset)\n#  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#1          5.1         3.5          1.4         0.2  setosa\n#2          4.9         3.0          1.4         0.2  setosa\n#3          4.7         3.2          1.3         0.2  setosa\n#4          4.6         3.1          1.5         0.2  setosa\n#5          5.0         3.6          1.4         0.2  setosa\n#6          5.4         3.9          1.7         0.4  setosa"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.3 Cluster analysis: DFA",
        "code": "## we have used the packages MASS and ggplot2.\nlibrary(MASS)\nlibrary(ggplot2)\n## we get the names of predictors (i.e., measurements) and target group\nstr(iris_dataset)\n#'data.frame':  150 obs. of  5 variables:\n#$ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n#$ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n#$ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n#$ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n#$ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.3 Cluster analysis: DFA",
        "code": "## we fit the lda function\niris_lda_model <- lda(formula = Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris_dataset)\niris_lda_model\n#Call:\n#lda(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, \n#    data = iris_dataset)\n#\n#Prior probabilities of groups:\n#    setosa versicolor  virginica \n# 0.3333333  0.3333333  0.3333333 \n#\n#Group means:\n#           Sepal.Length Sepal.Width Petal.Length Petal.Width\n#setosa            5.006       3.428        1.462       0.246\n#versicolor        5.936       2.770        4.260       1.326\n#virginica         6.588       2.974        5.552       2.026\n#\n#Coefficients of linear discriminants:\n#                    LD1         LD2\n#Sepal.Length  0.8293776  0.02410215\n#Sepal.Width   1.5344731  2.16452123\n#Petal.Length -2.2012117 -0.93192121\n#Petal.Width  -2.8104603  2.83918785\n#\n#Proportion of trace:\n#   LD1    LD2 \n#0.9912 0.0088 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.3 Cluster analysis: DFA",
        "code": "## we install these packages\ninstall.packages(\"caret\")\ninstall.packages(\"e1071\")\nlibrary(caret)\nlibrary(e1071)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.3 Cluster analysis: DFA",
        "code": "iris_lda_predict <- caret::train(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, method = \"lda\", data = iris_dataset)\niris_lda_predict\n#Linear Discriminant Analysis \n#\n#150 samples\n#  4 predictor\n#  3 classes: 'setosa', 'versicolor', 'virginica' \n#\n#No pre-processing\n#Resampling: Bootstrapped (25 reps) \n#Summary of sample sizes: 150, 150, 150, 150, 150, 150, ... \n#Resampling results:\n#\n#  Accuracy   Kappa    \n#  0.9697408  0.9542207\n\niris_lda_confusion_matrix <- confusionMatrix(iris_dataset$Species, predict(iris_lda_predict, iris_dataset))\niris_lda_confusion_matrix\n#Confusion Matrix and Statistics\n#\n#            Reference\n#Prediction   setosa versicolor virginica\n#  setosa         50          0         0\n#  versicolor      0         48         2\n#  virginica       0          1        49\n#\n#Overall Statistics\n#                                          \n#               Accuracy : 0.98            \n#                 95% CI : (0.9427, 0.9959)\n#    No Information Rate : 0.34            \n#    P-Value [Acc > NIR] : < 2.2e-16       \n#                                          \n#                  Kappa : 0.97            \n#                                          \n# Mcnemar's Test P-Value : NA              \n#\n#Statistics by Class:\n#\n#                     Class: setosa Class: versicolor Class: virginica\n#Sensitivity                 1.0000            0.9796           0.9608\n#Specificity                 1.0000            0.9802           0.9899\n#Pos Pred Value              1.0000            0.9600           0.9800\n#Neg Pred Value              1.0000            0.9900           0.9800\n#Prevalence                  0.3333            0.3267           0.3400\n#Detection Rate              0.3333            0.3200           0.3267\n#Detection Prevalence        0.3333            0.3333           0.3333\n#Balanced Accuracy           1.0000            0.9799           0.9753"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.3 Cluster analysis: DFA",
        "code": "iris_lda_predicton <- predict (iris_lda_predict, iris_dataset)\niris_dataset$lda_species_prediction <- iris_lda_predicton\niris_dataset \n#    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species lda_species_prediction\n#1            5.1         3.5          1.4         0.2     setosa                 setosa\n#2            4.9         3.0          1.4         0.2     setosa                 setosa\n#3            4.7         3.2          1.3         0.2     setosa                 setosa\n#...\n#69           6.2         2.2          4.5         1.5 versicolor             versicolor\n#70           5.6         2.5          3.9         1.1 versicolor             versicolor\n#71           5.9         3.2          4.8         1.8 versicolor              virginica\n#72           6.1         2.8          4.0         1.3 versicolor             versicolor\n#...\n#83           5.8         2.7          3.9         1.2 versicolor             versicolor\n#84           6.0         2.7          5.1         1.6 versicolor              virginica\n#85           5.4         3.0          4.5         1.5 versicolor             versicolor\n#...\n#132          7.9         3.8          6.4         2.0  virginica              virginica\n#133          6.4         2.8          5.6         2.2  virginica              virginica\n#134          6.3         2.8          5.1         1.5  virginica             versicolor\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.3 Cluster analysis: DFA",
        "code": "## we can add the LD coordinates\niris_dataset <- cbind(iris_dataset, predict(iris_lda_model)$x)\nhead(iris_dataset)\n#  Sepal.Length Sepal.Width Petal.Length Petal.Width Species lda_species_prediction      LD1        LD2\n#1          5.1         3.5          1.4         0.2  setosa                 setosa 8.061800  0.3004206\n#2          4.9         3.0          1.4         0.2  setosa                 setosa 7.128688 -0.7866604\n#3          4.7         3.2          1.3         0.2  setosa                 setosa 7.489828 -0.2653845\n#4          4.6         3.1          1.5         0.2  setosa                 setosa 6.813201 -0.6706311\n#5          5.0         3.6          1.4         0.2  setosa                 setosa 8.132309  0.5144625\n#6          5.4         3.9          1.7         0.4  setosa                 setosa 7.701947  1.4617210\n\n## we subset the iris_dataset to the original classification\niris_dataset_original <- subset(iris_dataset, select = c(Species, LD1,LD2))\nhead(iris_dataset_original)\n#  Species      LD1        LD2\n#1  setosa 8.061800  0.3004206\n#2  setosa 7.128688 -0.7866604\n#3  setosa 7.489828 -0.2653845\n#4  setosa 6.813201 -0.6706311\n#5  setosa 8.132309  0.5144625\n#6  setosa 7.701947  1.4617210\n\n## show original groups\n\nggplot(iris_dataset, aes(LD1, LD2)) +\n       geom_point(aes(color = Species)) +\n           ggtitle(\"Iris Original Groups\")\n\n## show LDA predicted groups\n\nggplot(iris_dataset, aes(LD1, LD2)) +\n       geom_point(aes(color = lda_species_prediction)) +\n           ggtitle(\"Iris LDA Predicted Groups\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.4 Cluster analysis: k-means (unsupervised)",
        "code": "## Let's check again this dataset\niris_dataset <- iris\nhead(iris_dataset)\n#  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#1          5.1         3.5          1.4         0.2  setosa\n#2          4.9         3.0          1.4         0.2  setosa\n#3          4.7         3.2          1.3         0.2  setosa\n#4          4.6         3.1          1.5         0.2  setosa\n#5          5.0         3.6          1.4         0.2  setosa\n#6          5.4         3.9          1.7         0.4  setosa\n\n## We need to remove the column with species assignments\niris_dataset_num <- iris_dataset[,-which(names(iris_dataset) %in% c(\"Species\"))]\nhead(iris_dataset_num)\n#  Sepal.Length Sepal.Width Petal.Length Petal.Width\n#1          5.1         3.5          1.4         0.2\n#2          4.9         3.0          1.4         0.2\n#3          4.7         3.2          1.3         0.2\n#4          4.6         3.1          1.5         0.2\n#5          5.0         3.6          1.4         0.2\n#6          5.4         3.9          1.7         0.4"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.4 Cluster analysis: k-means (unsupervised)",
        "code": "iris_dataset_kmeans <- kmeans(iris_dataset_num, centers = 3, nstart = 30)\niris_dataset_kmeans\n#K-means clustering with 3 clusters of sizes 50, 62, 38\n#\n#Cluster means:\n#  Sepal.Length Sepal.Width Petal.Length Petal.Width\n#1     5.006000    3.428000     1.462000    0.246000\n#2     5.901613    2.748387     4.393548    1.433871\n#3     6.850000    3.073684     5.742105    2.071053\n#\n#Clustering vector:\n#  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n# [70] 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3\n#[139] 2 3 3 3 2 3 3 3 2 3 3 2\n#\n#Within cluster sum of squares by cluster:\n#[1] 15.15100 39.82097 23.87947\n# (between_SS / total_SS =  88.4 %)\n#\n#Available components:\n#\n#[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\" \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/multidimensional-data-in-r.html",
        "section": "Session 8 \u2013 Multidimensional Data in R",
        "subsection": "8.4 Cluster analysis: k-means (unsupervised)",
        "code": "## add the cluster vector to iris_dataset\niris_dataset_kmeans$cluster\n#  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n# [70] 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3\n#[139] 2 3 3 3 2 3 3 3 2 3 3 2\niris_dataset_original$kmeans_cluster <- factor(iris_dataset_kmeans$cluster)\nhead(iris_dataset_original)\n#    Species      LD1        LD2 kmeans_cluster\n#1  setosa 8.061800  0.3004206              1\n#2  setosa 7.128688 -0.7866604              1\n#3  setosa 7.489828 -0.2653845              1\n#4  setosa 6.813201 -0.6706311              1\n#5  setosa 8.132309  0.5144625              1\n#6  setosa 7.701947  1.4617210              1\n\n## we can plot these groups using the lda coordinates to visualize.\n\nggplot(iris_dataset_original, aes(LD1, LD2)) +\n       geom_point(aes(color = kmeans_cluster)) +\n           ggtitle(\"Iris kmeans with 3 Groups\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.1 Avoid bad graphics",
        "code": "## load mammal dataset from 'MASS' and transform them with modify() from 'purrr'\nlibrary(MASS)\nlibrary(purrr)\nmammals_raw <- mammals\nmammals_log <- modify(mammals_raw,log10)\n\n## plot them side to side into a 1*2 array\npar(mfrow=c(1,2))   \n\nplot(x = mammals_raw$body, y = mammals_raw$brain)\nmtext(side=3, line=0.5, adj=0, \"raw data from mammal -- body vs brain\")\nabline(lm(brain ~ body, data = mammals_raw), col = \"blue\")\n\nplot(x = mammals_log$body, y = mammals_log$brain)\nmtext(side=3, line=0.5, adj=0, \"Log10 data from mammal -- body vs brain\")\nabline(lm(brain ~ body, data = mammals_log), col = \"blue\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.2 Graphics in R \u2013 ggplot2",
        "code": "install.packages(\"ggplot2\")\nlibrary(ggplot2)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.3 Preparing your dataset",
        "code": "## we will load 'ade4' package to get the bacteria dataset\nlibrary(ade4)\ndata(bacteria,  package = \"ade4\")\n\n## this dataset is a list containing 43 species and their genomic informations: codons, amino acid and bases.\n\n?ade4::bacteria\n\n## we get the espaa dataframe with number of the 21 amino acids present in 43 species of bacteria\nbacteria_espaa <- bacteria$espaa"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.3 Preparing your dataset",
        "code": "# load purrr package and scale the values\nrequire(purrr)\nbacteria_espaa_scaled <- purrr::modify(bacteria_espaa, scale)\nrow.names(bacteria_espaa_scaled) <- row.names(bacteria_espaa)\nhead(bacteria_espaa_scaled)\n#               Ala        Arg         Asn        Asp        Cys        Gln        Glu        Gly        His         Ile         Leu\n#AERPECG  0.3285668  0.7317790 -0.57189998 -0.1194444  0.1648422 -0.3942439  0.2871196  0.4766228  0.1461376 -0.04383607  0.39172834\n#AQUAECG -0.4008694 -0.2034641 -0.22356528 -0.3025407 -0.3950725 -0.5262848  0.4634441 -0.1820602 -0.3947798  0.06415029 -0.09928685\n#ARCFUCG  0.1073331  0.2833748  0.04401802  0.2066524  0.5498823 -0.4297732  0.8885965  0.2463444 -0.1330163  0.57892747  0.12987680\n#BACHDCG  0.9012986  0.9875656  1.72105862  1.5171379  0.8224654  1.6598743  2.2634710  1.2984007  1.9400648  2.16751418  1.40433248\n#BACSUCG  1.0314722  0.7271505  2.09337260  1.6457327  1.0718724  1.5394241  2.0612524  1.3252195  1.8173099  2.49733951  1.38291228\n#BORBUCG -0.7597170 -0.7465478  0.01654507 -0.6016028 -0.9081081 -0.7293261 -0.6491864 -0.7234675 -0.8524967 -0.18035597 -0.60867882\n#                Lys         Met        Phe         Pro        Ser        Stp          Thr         Trp        Tyr         Val\n#AERPECG -0.36413421  0.09017282 -0.3275198  0.89114307  0.7319805  0.7113529  0.152094962  0.38406553  0.4369524  0.61086466\n#AQUAECG  0.88477099 -0.28951403  0.1851469 -0.17796712 -0.4145196 -0.2123879 -0.323609531 -0.26598780  0.3076040  0.01812197\n#ARCFUCG  0.79679827  0.48462587  0.5156315  0.08558657  0.1583118  0.2768920  0.008319353  0.09800132  0.6381195  0.61451548\n#BACHDCG  2.08829038  2.07351272  2.0439218  1.06116153  1.5330792  1.4796369  1.887894271  1.20439921  2.0999898  1.67959246\n#BACSUCG  2.95243158  2.18339064  2.1725251  1.03849240  1.9769142  1.5369105  1.887693467  1.04854940  2.2918176  1.46336710\n#BORBUCG -0.02590849 -0.72066544 -0.3193467 -0.80668435 -0.5156512 -0.7990328 -0.785609156 -0.79075009 -0.4463524 -0.78199455"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.3 Preparing your dataset",
        "code": "## load reshape\nlibrary(reshape2)\n# use melt() to transform\nbacteria_espaa_for_heatmap <- melt(as.matrix(bacteria_espaa_scaled))\n# transform factor variables to character\nfactor_columns <- sapply(bacteria_espaa_for_heatmap, is.factor)\nbacteria_espaa_for_heatmap[factor_columns] <- lapply(bacteria_espaa_for_heatmap[factor_columns], as.character)\n\n## we can rename the columns in this data frame\nnames(bacteria_espaa_for_heatmap) <- c(\"bacteria_sp\", \"Amino_acid\", \"scaled_value\")\nhead(bacteria_espaa_for_heatmap)\n#  bacteria_sp Amino_acid scaled_value\n#1     AERPECG        Ala    0.3285668\n#2     AQUAECG        Ala   -0.4008694\n#3     ARCFUCG        Ala    0.1073331\n#4     BACHDCG        Ala    0.9012986\n#5     BACSUCG        Ala    1.0314722\n#6     BORBUCG        Ala   -0.7597170"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.3 Preparing your dataset",
        "code": "## NOTE: remember to update the path to file with the dataset where you downloaded in your computer -- THIS IS EXCLUSIVE TO YOUR COMPUTER AND IT IS NOT THE PATH SHOWN BELOW\n\n## load get 'airway_scaledcounts.csv' dataset \nairway_data <- read.table(\"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/airway_scaledcounts.csv\",\n               header = TRUE, sep = \",\", stringsAsFactors = FALSE)\nhead(airway_data)\n#          ensgene SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 SRR1039520 SRR1039521\n#1 ENSG00000000003        723        486        904        445       1170       1097        806        604\n#2 ENSG00000000005          0          0          0          0          0          0          0          0\n#3 ENSG00000000419        467        523        616        371        582        781        417        509\n#4 ENSG00000000457        347        258        364        237        318        447        330        324\n#5 ENSG00000000460         96         81         73         66        118         94        102         74\n#6 ENSG00000000938          0          0          1          0          2          0          0          0\nstr(airway_data)\n#'data.frame':  38694 obs. of  9 variables:\n# $ ensgene   : chr  \"ENSG00000000003\" \"ENSG00000000005\" \"ENSG00000000419\" \"ENSG00000000457\" ...\n# $ SRR1039508: num  723 0 467 347 96 ...\n# $ SRR1039509: num  486 0 523 258 81 ...\n# $ SRR1039512: num  904 0 616 364 73 1 6000 2640 692 531 ...\n# $ SRR1039513: num  445 0 371 237 66 ...\n# $ SRR1039516: num  1170 0 582 318 118 ...\n# $ SRR1039517: num  1097 0 781 447 94 ...\n# $ SRR1039520: num  806 0 417 330 102 ...\n# $ SRR1039521: num  604 0 509 324 74 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.3 Preparing your dataset",
        "code": "ensgene <- airway_data[,1]\nairway_data_numeric <- airway_data[,-1]\n# load purrr package\nrequire(purrr)\nairway_data_scaled <- purrr::modify(airway_data_numeric, scale)\n# cbind the name of the genes from vector 'ensgene'\nairway_data_scaled <- cbind(ensgene, airway_data_scaled, stringsAsFactors = FALSE)\nhead(airway_data_scaled)\n#          ensgene  SRR1039508   SRR1039509   SRR1039512   SRR1039513  SRR1039516   SRR1039517  SRR1039520   SRR1039521\n#1 ENSG00000000003  0.03933056 -0.003924270  0.036555187  0.011021618  0.09101424  0.041361372  0.06313763  0.007896859\n#2 ENSG00000000005 -0.12176875 -0.130284028 -0.106887175 -0.112547703 -0.11339060 -0.123910392 -0.10822243 -0.116658738\n#3 ENSG00000000419 -0.01771152  0.005695712 -0.009143265 -0.009526988 -0.01171230 -0.006246538 -0.01956592 -0.011693839\n#4 ENSG00000000457 -0.04444999 -0.063204156 -0.049129410 -0.046736626 -0.05783441 -0.056566291 -0.03806261 -0.049844146\n#5 ENSG00000000460 -0.10037797 -0.109224069 -0.095303887 -0.094220568 -0.09277541 -0.109748545 -0.08653667 -0.101398615\n#6 ENSG00000000938 -0.12176875 -0.130284028 -0.106728500 -0.112547703 -0.11304119 -0.123910392 -0.10822243 -0.116658738"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.3 Preparing your dataset",
        "code": "## load reshape\nlibrary(reshape2)\n# prepare other data frame\nairway_data_scaled2 <- purrr::modify(airway_data_numeric, scale)\n# add ensgene as rownames\nrownames(airway_data_scaled2) <- ensgene\nhead(airway_data_scaled2)\n#                 SRR1039508   SRR1039509   SRR1039512   SRR1039513  SRR1039516   SRR1039517  SRR1039520   SRR1039521\n#ENSG00000000003  0.03933056 -0.003924270  0.036555187  0.011021618  0.09101424  0.041361372  0.06313763  0.007896859\n#ENSG00000000005 -0.12176875 -0.130284028 -0.106887175 -0.112547703 -0.11339060 -0.123910392 -0.10822243 -0.116658738\n#ENSG00000000419 -0.01771152  0.005695712 -0.009143265 -0.009526988 -0.01171230 -0.006246538 -0.01956592 -0.011693839\n#ENSG00000000457 -0.04444999 -0.063204156 -0.049129410 -0.046736626 -0.05783441 -0.056566291 -0.03806261 -0.049844146\n#ENSG00000000460 -0.10037797 -0.109224069 -0.095303887 -0.094220568 -0.09277541 -0.109748545 -0.08653667 -0.101398615\n#ENSG00000000938 -0.12176875 -0.130284028 -0.106728500 -0.112547703 -0.11304119 -0.123910392 -0.10822243 -0.116658738\n\n## get matrix dimensions\ndim(airway_data_scaled2)\n#[1] 38694     8"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.3 Preparing your dataset",
        "code": "## Create a function to valculate coefficient of variation \n\nco.var <- function(x) ( 100*sd(x)/mean(x) )\n\n##  we estimate row-wise coefficient of variation \nairway_data_scaled2$coVar<-apply(airway_data_scaled2[,names(airway_data_scaled2)],1,co.var)\nhead(airway_data_scaled2)\n#                 SRR1039508   SRR1039509   SRR1039512   SRR1039513  SRR1039516   SRR1039517  SRR1039520   SRR1039521      coVar\n#ENSG00000000003  0.03933056 -0.003924270  0.036555187  0.011021618  0.09101424  0.041361372  0.06313763  0.007896859  87.129966\n#ENSG00000000005 -0.12176875 -0.130284028 -0.106887175 -0.112547703 -0.11339060 -0.123910392 -0.10822243 -0.116658738  -6.935013\n#ENSG00000000419 -0.01771152  0.005695712 -0.009143265 -0.009526988 -0.01171230 -0.006246538 -0.01956592 -0.011693839 -77.383502\n#ENSG00000000457 -0.04444999 -0.063204156 -0.049129410 -0.046736626 -0.05783441 -0.056566291 -0.03806261 -0.049844146 -15.968492\n#ENSG00000000460 -0.10037797 -0.109224069 -0.095303887 -0.094220568 -0.09277541 -0.109748545 -0.08653667 -0.101398615  -8.191639\n#ENSG00000000938 -0.12176875 -0.130284028 -0.106728500 -0.112547703 -0.11304119 -0.123910392 -0.10822243 -0.116658738  -6.980658\n\n## descresing order by coVar\nairway_data_scaled2_order <- airway_data_scaled2[order(airway_data_scaled2$coVar,  decreasing = TRUE),]\nhead(airway_data_scaled2_order)\n#                   SRR1039508    SRR1039509   SRR1039512   SRR1039513   SRR1039516   SRR1039517   SRR1039520   SRR1039521    coVar\n#ENSG00000126709  0.0313090216 -0.0005442761 -0.006445787  0.049897360 -0.012760526 -0.030050493 -0.019778529 -0.011075185 39115.82\n#ENSG00000278270  0.1077364958  0.1148955034 -0.015648947 -0.035906955 -0.042285668 -0.052950501 -0.036574367 -0.037471074 30921.30\n#ENSG00000041802 -0.0043422784  0.0150556941 -0.007239162 -0.015080665  0.012746403  0.017406759 -0.008723041 -0.009425442 25810.60\n#ENSG00000086712 -0.0116953590  0.0098557040 -0.021678604 -0.008138569  0.004535268 -0.034570232  0.038475388  0.023981854 25111.84\n#ENSG00000188603 -0.0001086865  0.0116757006 -0.020567877  0.002413418 -0.009441131 -0.004739959 -0.004258325  0.025631597 18384.05\n#ENSG00000125398  0.0698569896 -0.0096442587  0.058928387 -0.045348207 -0.017652265 -0.093326829  0.090138534 -0.049637928 15830.54\n\n## retain the first 100 genes\nairway_data_scaled_red <- airway_data_scaled2_order[1:100,]\n\n## get dimensions\ndim(airway_data_scaled_red)\n#[1] 100   8\n\n## remove the sd column\nairway_data_scaled_red <- airway_data_scaled_red[,-length(airway_data_scaled_red)]\nhead(airway_data_scaled_red)\n#                   SRR1039508    SRR1039509   SRR1039512   SRR1039513   SRR1039516   SRR1039517   SRR1039520   SRR1039521\n#ENSG00000126709  0.0313090216 -0.0005442761 -0.006445787  0.049897360 -0.012760526 -0.030050493 -0.019778529 -0.011075185\n#ENSG00000278270  0.1077364958  0.1148955034 -0.015648947 -0.035906955 -0.042285668 -0.052950501 -0.036574367 -0.037471074\n#ENSG00000041802 -0.0043422784  0.0150556941 -0.007239162 -0.015080665  0.012746403  0.017406759 -0.008723041 -0.009425442\n#ENSG00000086712 -0.0116953590  0.0098557040 -0.021678604 -0.008138569  0.004535268 -0.034570232  0.038475388  0.023981854\n#ENSG00000188603 -0.0001086865  0.0116757006 -0.020567877  0.002413418 -0.009441131 -0.004739959 -0.004258325  0.025631597\n#ENSG00000125398  0.0698569896 -0.0096442587  0.058928387 -0.045348207 -0.017652265 -0.093326829  0.090138534 -0.049637928\n\n## get dimensions\ndim(airway_data_scaled_red)\n#[1] 100     8"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.3 Preparing your dataset",
        "code": "airway_data_for_heatmap <- melt(as.matrix(airway_data_scaled_red))\n# transform factor variables to character\nfactor_columns <- sapply(airway_data_for_heatmap, is.factor)\nairway_data_for_heatmap[factor_columns] <- lapply(airway_data_for_heatmap[factor_columns], as.character)\nstr(airway_data_for_heatmap)\n#'data.frame':  800 obs. of  3 variables:\n# $ Var1 : chr  \"ENSG00000126709\" \"ENSG00000278270\" \"ENSG00000041802\" \"ENSG00000086712\" ...\n# $ Var2 : chr  \"SRR1039508\" \"SRR1039508\" \"SRR1039508\" \"SRR1039508\" ...\n# $ value: num  0.031309 0.107736 -0.004342 -0.011695 -0.000109 ...\n\n## we can rename the columns in this data frame\nnames(airway_data_for_heatmap) <- c(\"ensgene\", \"SRR\", \"expression\")\nhead(airway_data_for_heatmap)\n#          ensgene        SRR    expression\n#1 ENSG00000126709 SRR1039508  0.0313090216\n#2 ENSG00000278270 SRR1039508  0.1077364958\n#3 ENSG00000041802 SRR1039508 -0.0043422784\n#4 ENSG00000086712 SRR1039508 -0.0116953590\n#5 ENSG00000188603 SRR1039508 -0.0001086865\n#6 ENSG00000125398 SRR1039508  0.0698569896"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.4 Color palettes online",
        "code": "## get 100 colors of rainbow()\nrainbow(100)\n#[1] \"#FF0000\" \"#FF0F00\" \"#FF1F00\" \"#FF2E00\" \"#FF3D00\" ...\n\n#Create Dataset to plot rainbow colors\nx <- runif(100)\ny <- runif(100)\nz <- y*x\n\n#assign colors, based on z vector    \n\nData <- data.frame(Order=1:length(z),z=z)\nData <- Data[order(Data$z),]\nData$col <- rainbow(length(z))\norderedcolors <- Data[order(Data$Order),'col']\n\n#Plot x vs y, colored by z\nplot(x,y,col=orderedcolors, pch = 20, cex = 3)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.5 ggplot2 default palette",
        "code": "## insall and load 'scales' R package -- you will get an error but do worry\ninstall.packages(\"scales\")                              \nlibrary(scales)\n#Error in value[[3L]](cond) : \n#  Package \u2018scales\u2019 version 1.1.0 cannot be unloaded:\n# Error in unloadNamespace(package) : namespace \u2018scales\u2019 is imported by \u2018ggplot2\u2019, \u2018ggsci\u2019 so cannot be unloaded\n\n## load ggplot2\nlibrary(ggplot2)\n\n## Identify hex codes in ggplot2 defult for 10 colors\nhex_codes1 <- scales::hue_pal()(10)                             \nhex_codes1                                              \n# [1] \"#F8766D\" \"#D89000\" \"#A3A500\" \"#39B600\" \"#00BF7D\" \"#00BFC4\" \"#00B0F6\" \"#9590FF\" \"#E76BF3\" \"#FF62BC\"\n\n## Plot hex codes/colors\nscales::show_col(hex_codes1)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.6 Heatmaps or tiled charts",
        "code": "## we will load packages \nlibrary(ade4)\nlibrary(purrr)\nlibrary(reshape2)\nlibrary(ggplot2)\n\n## load data and assign to data frame\ndata(bacteria,  package = \"ade4\")\nbacteria_espaa <- bacteria$espaa\nbacteria_espaa_scaled <- purrr::modify(bacteria_espaa, scale)\nrow.names(bacteria_espaa_scaled) <- row.names(bacteria_espaa)\n\n## reshape dataframe\nbacteria_espaa_for_heatmap <- melt(as.matrix(bacteria_espaa_scaled))\nfactor_columns <- sapply(bacteria_espaa_for_heatmap, is.factor)\nbacteria_espaa_for_heatmap[factor_columns] <- lapply(bacteria_espaa_for_heatmap[factor_columns], as.character)\n\n## we can rename the columns in this data frame\nnames(bacteria_espaa_for_heatmap) <- c(\"bacteria_sp\", \"Amino_acid\", \"scaled_value\")\nhead(bacteria_espaa_for_heatmap)\n#  bacteria_sp Amino_acid scaled_value\n#1     AERPECG        Ala    0.3285668\n#2     AQUAECG        Ala   -0.4008694\n#3     ARCFUCG        Ala    0.1073331\n#4     BACHDCG        Ala    0.9012986\n#5     BACSUCG        Ala    1.0314722\n#6     BORBUCG        Ala   -0.7597170"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.6 Heatmaps or tiled charts",
        "code": "## checking if ggplot2 is loaded\nrequire(ggplot2)\n## we can plot a heatmap with the expression values\nheatmap_bacteria_base <- ggplot(bacteria_espaa_for_heatmap,aes(x=Amino_acid,y=bacteria_sp,fill=scaled_value))+\n                   geom_tile()+\n                    theme_bw()+\n                    ggtitle(\"My First Heatmap -- Base Color\") +\n                    theme(axis.text.y = element_text(size=rel(0.5)),\n                          axis.text.x = element_text(size=rel(0.7),angle = 90, vjust = 0.5, hjust=1),\n                          legend.title = element_text(color = \"black\", size = 7),\n                           legend.text = element_text(color = \"black\", size = 7))\n\nheatmap_bacteria_base"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## We need to install R-package 'viridis' \ninstall.packages(\"viridis\")\nlibrary(viridis)\n## checking if ggplot2 is loaded\nrequire(ggplot2)\n\n## we can plot a heatmap with the expression values\nheatmap_viridis_bac_magma <- ggplot(bacteria_espaa_for_heatmap,aes(x=Amino_acid,y=bacteria_sp,fill=scaled_value))+\n                   geom_tile()+\n          scale_fill_viridis(option=\"A\")+ \n                    theme_bw()+\n                    theme(axis.text.y = element_text(size=rel(0.5)),\n                          axis.text.x = element_text(size=rel(0.7),angle = 90, vjust = 0.5, hjust=1))\n\nheatmap_viridis_bac_magma\n## NOTE: you might need to run the plot 'heatmap_viridis_bac_magma', if it gives you an error"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## checking if ggplot2 is loaded\nrequire(ggplot2)\n## we can plot a heatmap with the expression values\nheatmap_viridis <- ggplot(airway_data_for_heatmap,aes(x=SRR,y=ensgene,fill=expression))+\n                   geom_tile()+\n          scale_fill_viridis()+ \n                    theme_bw()+\n                    theme(axis.text.y = element_text(size=rel(0.5)),\n                          axis.text.x = element_text(size=rel(0.7),angle = 90, vjust = 0.5, hjust=1))\n\n## NOTE: this will require time to load (if it is huge) -- you might not want to run this plot\nheatmap_viridis"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## We need to install R-package 'RColorBrewer' \ninstall.packages(\"RColorBrewer\")\nlibrary(RColorBrewer)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "display.brewer.all()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "display.brewer.all(colorblindFriendly = TRUE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## we will load 'ade4' and the \u2018ichtyo\u2019 dataset\nlibrary(ade4)\ndata(ichtyo)\n\n# Data of a fish community and sampling points\n?ichtyo\nichtyo_data <- ichtyo$tab\nhead(ichtyo_data)\n#  HOT VAN CHE SPI GOU BAF GAR ABL PER\n#1  57  47  60  11  27  17  10   9  21\n#2   9  25  19   6   2   5   0   4   6\n#3  48  60  52  16  25  24  17   8  12\n#4  26  50  32   8   6  11   2  10   5\n#5  26  43  31  14   9  18  13  14   2\n#6  62  43  47  16  11   9  15  16   3\n\n## we use the function 'melt()'' of the package 'reshape2' to arrange on the 'ggplot2' format\nlibrary(reshape2)\nichtyo_data_ggplot <- melt(ichtyo_data)\n#No id variables; using all as measure variables\nnames(ichtyo_data_ggplot) <- c(\"faunistic_array\", \"counts\")\nstr(ichtyo_data_ggplot)\n#'data.frame':  288 obs. of  2 variables:\n# $ faunistic_array: Factor w/ 9 levels \"HOT\",\"VAN\",\"CHE\",..: 1 1 1 1 1 1 1 1 1 1 ...\n# $ counts         : num  57 9 48 26 26 62 17 18 9 12 ...\n\n## View a single RColorBrewer palette by specifying its name (e.g., 'Paired') and 9 colors for each faunistic_array\ndisplay.brewer.pal(n = 9, name = 'Paired')\n# you can also request the hexadecimal color code\nbrewer.pal(n = 9, name = 'Paired')\n#[1] \"#A6CEE3\" \"#1F78B4\" \"#B2DF8A\" \"#33A02C\" \"#FB9A99\" \"#E31A1C\" \"#FDBF6F\" \"#FF7F00\" \"#CAB2D6\"\nmy_paired_palette <- brewer.pal(n = 9, name = 'Paired')"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## check that ggplot2 has been loaded\nrequire(\"ggplot2\")\n## Box plot with counts on y-axis and faunistic_array on x-axis and color by faunistic_array\nmy_ichtyo_boxplot <- ggplot(data = ichtyo_data_ggplot, mapping = aes(faunistic_array, counts)) + \n                     geom_boxplot(aes(fill = faunistic_array)) +\n                     theme_minimal() +\n                     theme(legend.position = \"\")\nmy_ichtyo_boxplot"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "my_ichtyo_boxplot2 <- my_ichtyo_boxplot + scale_fill_brewer(palette = 'Paired')\nmy_ichtyo_boxplot2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## check that ggplot2 has been loaded\nrequire(\"ggplot2\")\n## Scatter plot with counts on y-axis and faunistic_array on x-axis and color by faunistic_array\nmy_ichtyo_scatter <- ggplot(data = ichtyo_data_ggplot, mapping = aes(faunistic_array, counts)) + \n                     geom_violin() +\n                     geom_point(aes(color = faunistic_array)) +\n                     theme_minimal() +\n                     theme(legend.position = \"\")\nmy_ichtyo_scatter\n## Notice the violin shapes under the scatter plot.\nclass(my_ichtyo_scatter)\n#[1] \"gg\"     \"ggplot\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "my_paired_palette <- brewer.pal(n = 9, name = 'Paired')\nmy_paired_palette\n#[1] \"#A6CEE3\" \"#1F78B4\" \"#B2DF8A\" \"#33A02C\" \"#FB9A99\" \"#E31A1C\" \"#FDBF6F\" \"#FF7F00\" \"#CAB2D6\"\n\nmy_ichtyo_scatter2 <- my_ichtyo_scatter + scale_colour_manual(values = my_paired_palette)\nmy_ichtyo_scatter2\nclass(my_ichtyo_scatter2)\n#[1] \"gg\"     \"ggplot\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## We need to install R-package 'ggsci' \ninstall.packages(\"ggsci\")\nlibrary(ggsci)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "my_ichtyo_ggsci_aaas <- my_ichtyo_boxplot + scale_fill_aaas()\nmy_ichtyo_ggsci_aaas"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "my_ichtyo_ggsci_uchicago <- my_ichtyo_scatter + scale_fill_uchicago()\nmy_ichtyo_ggsci_uchicago"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## We need to install R-package 'wesanderson' \ninstall.packages(\"wesanderson\")\nlibrary(wesanderson)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "# I will need 9 colors in a discrete scale for 'my_ichtyo_boxplot'\nmy_wes_palette <- wes_palette(\"IsleofDogs2\", 9, type = \"continuous\")\nmy_wes_palette\nstr(my_wes_palette)\n#'palette' chr [1:9] \"#EAD3BF\" \"#CAB3A2\" \"#AA9486\" \"#B08C69\" \"#B6854D\" \"#775B3E\" \"#39312F\" \"#2A2423\" \"#1C1718\"\n# - attr(*, \"name\")= chr \"IsleofDogs2\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "my_ichtyo_scatter_wes <- my_ichtyo_scatter + scale_colour_manual(values = my_wes_palette)\nmy_ichtyo_scatter_wes"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## We need to install R-package 'rcartocolor' \ninstall.packages(\"rcartocolor\")\nlibrary(rcartocolor)\n## diplay all colors\ndisplay_carto_all()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## check information about how to change colors in palette\n?scale_fill_carto_d\n## color the boxplot\nmy_ichtyo_boxplot_carto <- my_ichtyo_boxplot + scale_fill_carto_d(type = \"qualitative\", palette = \"Vivid\", direction = -1)\nmy_ichtyo_boxplot_carto"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## install and load package \ninstall.packages(\"colorspace\")\nlibrary(colorspace)\n\n## palettes in this package, type and their names\nhcl_palettes()\n#HCL palettes\n#\n#Type:  Qualitative \n#Names: Pastel 1, Dark 2, Dark 3, Set 2, Set 3, Warm, Cold, Harmonic, Dynamic\n#\n#Type:  Sequential (single-hue) \n#Names: Grays, Light Grays, Blues 2, Blues 3, Purples 2, Purples 3, Reds 2, Reds 3, Greens 2, Greens 3, Oslo\n#\n#Type:  Sequential (multi-hue) \n#Names: Purple-Blue, Red-Purple, Red-Blue, Purple-Orange, Purple-Yellow, Blue-Yellow, Green-Yellow, Red-Yellow, Heat, Heat 2, Terrain,\n#       Terrain 2, Viridis, Plasma, Inferno, Dark Mint, Mint, BluGrn, Teal, TealGrn, Emrld, BluYl, ag_GrnYl, Peach, PinkYl,\n#       Burg, BurgYl, RedOr, OrYel, Purp, PurpOr, Sunset, Magenta, SunsetDark, ag_Sunset, BrwnYl, YlOrRd, YlOrBr, OrRd, Oranges,\n#       YlGn, YlGnBu, Reds, RdPu, PuRd, Purples, PuBuGn, PuBu, Greens, BuGn, GnBu, BuPu, Blues, Lajolla, Turku, Hawaii, Batlow\n#\n#Type:  Diverging \n#Names: Blue-Red, Blue-Red 2, Blue-Red 3, Red-Green, Purple-Green, Purple-Brown, Green-Brown, Blue-Yellow 2, Blue-Yellow 3,\n#       Green-Orange, Cyan-Magenta, Tropic, Broc, Cork, Vik, Berlin, Lisbon, Tofino\nhcl_palettes(plot = TRUE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## you want 5 qualitative colors from palette \nmy_qualitative <- qualitative_hcl(5, palette = \"Harmonic\")\nmy_qualitative\n#[1] \"#C7A76C\" \"#99B56B\" \"#5CBD92\" \"#3BBCBF\" \"#7DB0DD\"\n\n## you want 5 sequential colors from palette \nmy_sequential <- sequential_hcl(5, palette = \"Batlow\")\nmy_sequential\n#[1] \"#201158\" \"#005E5E\" \"#578B21\" \"#E89E6B\" \"#FFCEF4\"\n\n## you want 5 diverging colors from palette \nmy_diverging <- diverging_hcl(5, palette = \"Berlin\")\nmy_diverging\n#[1] \"#7FBFF5\" \"#004B73\" \"#111111\" \"#713430\" \"#F8A29E\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## my_qualitative visualization\nspecplot(my_qualitative, type = \"o\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## my_sequential visualization\nspecplot(my_sequential, type = \"o\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.7 R-packages about color",
        "code": "## my_diverging visualization\nspecplot(my_diverging, type = \"o\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.8 Making your own palette",
        "code": "## get a vector of all colors by name\ncolors()\n# [1] \"white\"                \"aliceblue\"            \"antiquewhite\"         \"antiquewhite1\"        \"antiquewhite2\"        \"antiquewhite3\"       \n# [7] \"antiquewhite4\"        \"aquamarine\"           \"aquamarine1\"          \"aquamarine2\"          \"aquamarine3\"          \"aquamarine4\"         \n#[13] \"azure\"                \"azure1\"               \"azure2\"               \"azure3\"               \"azure4\"               \"beige\"               \n#[19] \"bisque\"               \"bisque1\"              \"bisque2\"              \"bisque3\"              \"bisque4\"              \"black\"               \n# ...\n\n## the total number of colors by name\nlength(colors())\n#[1] 657\n\n## for our example, we will get three colors by name in a vector\nmy_colors_by_name <- c(\"firebrick4\", \"gray89\", \"navyblue\")\nscales::show_col(my_colors_by_name)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.8 Making your own palette",
        "code": "## for our example, we will get these 5 hex colors in a vector\nmy_colors_by_hex <- c(\"#EEBD91\", \"#F5A2A2\", \"#40CB63\", \"#4682B4\", \"#862185\")\nscales::show_col(my_colors_by_hex)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.8 Making your own palette",
        "code": "##NOTE: the vector of colors that you want to generate in this case 9 and this number is in parenthesis, so it is (9)\nmy_colors_by_name_ramp <- colorRampPalette(my_colors_by_name)(9)\nmy_colors_by_name_ramp\n#[1] \"#8B1A1A\" \"#A14C4C\" \"#B67E7E\" \"#CCB0B0\" \"#E3E3E3\" \"#AAAACA\" \"#7171B1\" \"#383898\" \"#000080\"\n\nmy_colors_by_hex_ramp <- colorRampPalette(my_colors_by_hex)(9)\nmy_colors_by_hex_ramp\n#[1] \"#EEBD91\" \"#F1AF99\" \"#F5A2A2\" \"#9AB682\" \"#40CB63\" \"#43A68B\" \"#4682B4\" \"#66519C\" \"#862185\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.8 Making your own palette",
        "code": "my_ichtyo_scatter_by_name <- my_ichtyo_scatter + scale_colour_manual(values = my_colors_by_name_ramp)\nmy_ichtyo_scatter_by_name"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.8 Making your own palette",
        "code": "my_ichtyo_scatter_by_hex <- my_ichtyo_scatter + scale_colour_manual(values = my_colors_by_hex_ramp)\nmy_ichtyo_scatter_by_hex"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.8 Making your own palette",
        "code": "## Load up packages I'm going to use first.\ninstall.packages(\"magick\")\ninstall.packages(\"imager\")\ninstall.packages(\"dplyr\")\n\n## required libraries\n\nlibrary(ggplot2)\nlibrary(magick) \nlibrary(scales) \nlibrary(imager)\nlibrary(dplyr)\n\n## read image to extract color \n## NOTE: this has to be your own image, I will not post this jpg.\n\nmy_image <- \"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/figures_emer/samurai_champloo.jpg\"\n\n## Function to get your image processed, n number of colors out of your image, and cs as colour space.\n\nget_colorPal_form_image <- function(image_file_input,\n                                           n=8, \n                                          cs=\"RGB\",\n                        show_image_row_user = TRUE){\n#require libraries\nrequire(ggplot2)\nrequire(magick) \nrequire(scales) \nrequire(imager)\nrequire(dplyr)\n\ncat(\"\\n\\n *** code modified from: https://www.r-bloggers.com/2019/01/extracting-colours-from-your-images-with-image-quantization/ *** \\n\\n\")\n\n  image_file_input_pros <- image_file_input\n  show_image_row <- show_image_row_user\n  raw_image <- magick::image_read(image_file_input_pros)\n  tmp <- magick::image_resize(image = raw_image ,  \"100\") \n  # reducing colours! different colorspace gives you different result\n  tmp <- magick::image_quantize(tmp, max=n, colorspace=cs)\n  # converting, becauase I want to use as.data.frame function in imager package.\n  tmp <- imager::magick2cimg(tmp) \n  # sorting colour by hue rather than RGB (red green blue)\n  tmp <- imager::RGBtoHSV(tmp)\n  # making it wide makes it easier to output hex colour\n  tmp <- as.data.frame(tmp, wide=\"c\")\n  tmp <- dplyr::mutate(tmp, hex = hsv(rescale(c.1, from=c(0,360)),c.2,c.3),\n                            hue = c.1,\n                            sat = c.2,\n                          value = c.3)\n  tmp <- dplyr::count(tmp, hex, hue, sat,value, sort=T) \n  tmp <- dplyr::mutate(tmp, colorspace = cs)\n  # out colors palette\n  color_hex <- tmp$hex\n   color_df <- tmp\n  \n  # plot colors\n  if(show_image_row) {magick::image_browse(raw_image)}\n  scales::show_col(color_hex)\n\n  # return colors\n  return(list(color_hex, color_df))\n  \n                                           }\n\n## running the function and asking for 8 colors\n\nsamuari_champloo_color_hex <- get_colorPal_form_image(my_image, n= 8)\n\n# hex codes\nsamuari_champloo_color_hex[[1]]\n#[1] \"#FFE39D\" \"#D93907\" \"#2F1E16\" \"#F86413\" \"#A56343\" \"#F8D894\" \"#E9A264\"\n\nscales::show_col(samuari_champloo_color_hex[[1]])"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/graphics-and-colors.html",
        "section": "Session 9 \u2013 Graphics and Colors",
        "subsection": "9.8 Making your own palette",
        "code": "## from URL from jpg.\nmy_image <- \"https://upload.wikimedia.org/wikipedia/commons/a/a4/Piet_Mondriaan%2C_1930_-_Mondrian_Composition_II_in_Red%2C_Blue%2C_and_Yellow.jpg\"\nMondriaan_color_hex <- get_colorPal_form_image(my_image, n= 10)\nMondriaan_color_hex \n#[[1]]\n# [1] \"#DB2920\" \"#E3312C\" \"#EAE9E9\" \"#E5E4DE\" \"#2E2B2F\" \"#617098\" \"#DCD6CD\" \"#DFCCA4\" \"#E3DDD8\" \"#E2AB9C\"\n#\n#[[2]]\n#       hex        hue         sat     value    n colorspace\n#1  #DB2920   2.887701 0.853881279 0.8588235 2669        RGB\n#2  #E3312C   1.639344 0.806167401 0.8901961 2286        RGB\n#3  #EAE9E9   0.000000 0.004273504 0.9176471 1636        RGB\n#4  #E5E4DE  51.428571 0.030567686 0.8980392 1197        RGB\n#5  #2E2B2F 285.000000 0.085106383 0.1843137  724        RGB\n#6  #617098 223.636364 0.361842105 0.5960784  670        RGB\n#7  #DCD6CD  36.000000 0.068181818 0.8627451  412        RGB\n#8  #DFCCA4  40.677966 0.264573991 0.8745098  203        RGB\n#9  #E3DDD8  27.272727 0.048458150 0.8901961  161        RGB\n#10 #E2AB9C  12.857143 0.309734513 0.8862745  142        RGB"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.2 Bar charts",
        "code": "## we will load 'ade4' and the \u2018ichtyo\u2019 dataset\nlibrary(ade4)\ndata(ichtyo)\nichtyo_data <- ichtyo$tab\nhead(ichtyo_data)\n#  HOT VAN CHE SPI GOU BAF GAR ABL PER\n#1  57  47  60  11  27  17  10   9  21\n#2   9  25  19   6   2   5   0   4   6\n#3  48  60  52  16  25  24  17   8  12\n#4  26  50  32   8   6  11   2  10   5\n#5  26  43  31  14   9  18  13  14   2\n#6  62  43  47  16  11   9  15  16   3\nstr(ichtyo_data)\n#'data.frame':  32 obs. of  9 variables:\n# $ HOT: num  57 9 48 26 26 62 17 18 9 12 ...\n# $ VAN: num  47 25 60 50 43 43 34 22 14 9 ...\n# $ CHE: num  60 19 52 32 31 47 28 18 8 9 ...\n# $ SPI: num  11 6 16 8 14 16 13 9 5 10 ...\n# $ GOU: num  27 2 25 6 9 11 8 3 8 2 ...\n# $ BAF: num  17 5 24 11 18 9 13 7 8 2 ...\n# $ GAR: num  10 0 17 2 13 15 14 6 1 10 ...\n# $ ABL: num  9 4 8 10 14 16 5 8 1 5 ...\n# $ PER: num  21 6 12 5 2 3 4 4 0 0 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.2 Bar charts",
        "code": "## colum sum as data frame\nichtyo_sum_df <- as.data.frame(colSums (ichtyo_data, na.rm = TRUE))\nichtyo_sum_df\n#    colSums(ichtyo_data, na.rm = TRUE)\n#HOT                                936\n#VAN                                995\n#CHE                               1741\n#SPI                                491\n#GOU                                951\n#BAF                                658\n#GAR                               1007\n#ABL                                337\n#PER                                625\n\n## build a nicer data frame and add column of site_names\nichtyo_sum_df$site_names <- rownames(ichtyo_sum_df)\n\n## upgrade column names\nnames(ichtyo_sum_df) <- c(\"counts\", \"site_names\")\nichtyo_sum_df\n#    counts site_names\n#HOT    936        HOT\n#VAN    995        VAN\n#CHE   1741        CHE\n#SPI    491        SPI\n#GOU    951        GOU\n#BAF    658        BAF\n#GAR   1007        GAR\n#ABL    337        ABL\n#PER    625        PER\n\n## add count labels for later use\nichtyo_sum_df$count_label <- as.character(ichtyo_sum_df$counts)\nstr(ichtyo_sum_df)\n#'data.frame':  9 obs. of  3 variables:\n# $ counts     : num  936 995 1741 491 951 ...\n# $ site_names : chr  \"HOT\" \"VAN\" \"CHE\" \"SPI\" ...\n# $ count_label: chr  \"936\" \"995\" \"1741\" \"491\" ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.2 Bar charts",
        "code": "## checking if ggplot2  and ggsci are loaded\nrequire(ggplot2)\nrequire(ggsci)\n\n# base plot\nichtyo_barchart <- ggplot(data=ichtyo_sum_df, aes(x=site_names, y=counts, fill = site_names)) +\n                 geom_bar(colour=\"black\", stat=\"identity\") +\n                      theme_minimal() +\n                  xlab(\"Sites on a place\") + \n                   ylab(\"Total counts\") +\n                ggtitle(\"My First Bar Chart\")\n\nichtyo_barchart"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.2 Bar charts",
        "code": "ichtyo_barchart <- ggplot(data=ichtyo_sum_df, aes(x=site_names, y=counts, fill = site_names)) +\n                 geom_bar(colour=\"black\", stat=\"identity\") +\n                      theme_minimal() +\n                  xlab(\"Sites on a place\") + \n                   ylab(\"Total counts\") +\n                ggtitle(\"My First Bar Chart\") +\n              geom_text(data=ichtyo_sum_df,aes(x=site_names,y=counts,label=count_label),vjust=-1) +\n                   theme(axis.text.y = element_blank(),\n                    panel.grid.major = element_blank(), \n                    panel.grid.minor = element_blank())\nichtyo_barchart"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.2 Bar charts",
        "code": "# plot with futurama fill colors\nichtyo_barchart <- ichtyo_barchart + scale_fill_futurama()\nichtyo_barchart"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.3 Stacked bar charts",
        "code": "## we will load 'ade4' and the \u2018ecomor\u2019 dataset\nlibrary(ade4)\ndata(ecomor)\n#taxois a data frame with 129 species and 3 factors: Genus, Family and Order. It is a data frame of class'taxo': the variables are factors giving nested classifications.\necomor_data <- ecomor$taxo\n#categ is a data frame with 129 species, 2 factors : \u2019forsub\u2019 summarizing the feeding place and \u2019diet\u2019the diet type.\necomor_data <- cbind(ecomor_data,ecomor$categ)\nstr(ecomor_data)\n#'data.frame':  129 obs. of  5 variables:\n# $ Genus : Factor w/ 86 levels \"Acanithis\",\"Aegithalos\",..: 11 12 12 49 70 21 21 73 85 85 ...\n# $ Family: Factor w/ 35 levels \"Aegithalidae\",..: 31 31 31 31 31 6 6 6 6 6 ...\n# $ Ordre : Factor w/ 7 levels \"Apodiformes\",..: 1 1 1 1 1 2 2 2 2 2 ...\n# $ forsub: Factor w/ 7 levels \"A\",\"B\",\"F\",\"G\",..: 5 5 5 1 3 5 5 4 4 4 ...\n# $ diet  : Factor w/ 8 levels \"F\",\"G\",\"H\",\"I\",..: 7 7 7 7 7 2 6 2 2 2 ...\n\n## we subset to families and diet\n\necomor_data_set <- subset(ecomor_data, select = c(Family, diet)) \nhead(ecomor_data_set)\n#          Family diet\n#E033 Trochilidae    N\n#E034 Trochilidae    N\n#E035 Trochilidae    N\n#E070 Trochilidae    N\n#E071 Trochilidae    N\n#E001  Columbidae    G\n\n## we split by family\n\nlist_of_families <- split(ecomor_data_set, ecomor_data_set$Family)\nlist_of_families\n#$Aegithalidae\n#           Family diet\n#E121 Aegithalidae    I\n#E048 Aegithalidae    I\n#\n#$Alaudidae\n#        Family diet\n#E104 Alaudidae    H\n#\n#$Cardinalidae\n#           Family diet\n#E057 Cardinalidae    G\n#E056 Cardinalidae    G\n#...\n\n## we can calculate the frequency of diet types by each family of these birds\n\ncollect_families_processed <- list()\n\nfor(i in 1:length(list_of_families)) {\n  # i <- 1\n              one_family <- list_of_families[[i]]\n             name_family <- unique(one_family[,1])\n           one_family_df <- as.data.frame(table(one_family [,2]), stringsAsFactors = FALSE)\n       one_family_df_sum <- sum(one_family_df$Freq)\n      one_family_df$Freq <- one_family_df$Freq/one_family_df_sum\n    names(one_family_df) <- c(\"type_diet\",\"Freq\")\n    one_family_df$Family <- name_family\n\n    collect_families_processed [[i]] <- one_family_df\n                       }\n\n## we put all of these in a single data frame\n\ncollect_families_processed_df <- do.call(rbind, collect_families_processed)\nhead(collect_families_processed_df)\n#  type_diet Freq       Family\n#1         F    0 Aegithalidae\n#2         G    0 Aegithalidae\n#3         H    0 Aegithalidae\n#4         I    1 Aegithalidae\n#5         J    0 Aegithalidae\n#6         K    0 Aegithalidae\nstr(collect_families_processed_df)\n#'data.frame': 280 obs. of  3 variables:\n# $ type_diet: chr  \"F\" \"G\" \"H\" \"I\" ...\n# $ Freq     : num  0 0 0 1 0 0 0 0 0 0 ...\n# $ Family   : Factor w/ 35 levels \"Aegithalidae\",..: 1 1 1 1 1 1 1 1 2 2 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.3 Stacked bar charts",
        "code": "## checking if ggplot2  and ggsci are loaded\nrequire(ggplot2)\nrequire(ggsci)\n\n## the plot\n\ndiet_family_stackedbar <- ggplot(collect_families_processed_df) +\n                 geom_col(aes(x = Family, y = Freq, fill = type_diet), color = \"black\")+\n                 labs(title=\"Stacked Bar Graph -- Diet and Families Birds\", x= \"Family\" , y=\"Frequency\") +\n                 coord_flip() +\n                 theme_minimal() +\n                 theme(axis.text.x = element_text(size=rel(0.7),angle = 90, vjust = 0.5, hjust=1))\n\ndiet_family_stackedbar <- diet_family_stackedbar + scale_fill_nejm()\ndiet_family_stackedbar"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.4 Histograms",
        "code": "## NOTE: remember to update the path to file with the dataset where you downloaded in your computer -- THIS IS EXCLUSIVE TO YOUR COMPUTER AND IT IS NOT THE PATH SHOWN BELOW\n## load get 'airway_scaledcounts.csv' dataset \nairway_data <- read.table(\"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/ref_files_pdfs/airway_scaledcounts.csv\",\n             header = TRUE, sep = \",\", stringsAsFactors = FALSE)\n# remove 'ensgene' variable\nairway_data_red <- airway_data[,-1]\n# select two sample: \"SRR1039509\" and \"SRR1039517\"\nairway_data_red <- subset(airway_data_red, select = c(SRR1039509,SRR1039517))\nstr(airway_data_red)\n#'data.frame':  38694 obs. of  2 variables:\n#$ SRR1039509: num  486 0 523 258 81 ...\n#$ SRR1039517: num  1097 0 781 447 94 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.4 Histograms",
        "code": "## summary\nsummary(airway_data_red$SRR1039509)\n#    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n#     0.0      0.0      1.0    501.1    172.0 244921.0 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.4 Histograms",
        "code": "## checking if ggplot2 is loaded\nrequire(ggplot2)\n\nSRR1039509_histogram <- ggplot(data=airway_data_red, aes(x=SRR1039509)) + \n     geom_histogram(breaks=seq(0, 250000, by=1000), \n                       col=\"red\", \n                      fill=\"green\", \n                    alpha = .2) + \n                labs(title=\"Histogram for SRR1039509\", x=\"Expression range\", y=\"Count\") + \n                xlim(c(0,250000))+\n                theme_minimal()\nSRR1039509_histogram"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.4 Histograms",
        "code": "SRR1039509_histogram <- ggplot(data=airway_data_red, aes(x=SRR1039509)) + \n     geom_histogram(breaks=seq(0, 2000, by=100), \n                       col=\"red\", \n                      fill=\"green\", \n                    alpha = .2) + \n                labs(title=\"Histogram for SRR1039509\", x=\"Expression range\", y=\"Count\") + \n                xlim(c(0,2000))+\n                theme_minimal()\nSRR1039509_histogram"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.4 Histograms",
        "code": "## create a small function to cap values to 2000\ncap_2000_fun <- function(x) {cap <- ifelse(x>2000,2000, x)\n                             return(cap)}\n## we can test our function\ncap_2000_fun(1)\n#[1] 1\ncap_2000_fun(10000)\n#[1] 2000"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.4 Histograms",
        "code": "## modify values with function so all values >2000 will be cap to 2000\nairway_data_red_capped <- purrr::modify(airway_data_red, cap_2000_fun)\n\n## plot histogram\nSRR1039509_histogram_capped <- ggplot(data=airway_data_red_capped, aes(x=SRR1039509)) + \n     geom_histogram(breaks=seq(0, 2000, by=100), \n                       col=\"red\", \n                      fill=\"green\", \n                    alpha = .2) + \n                labs(title=\"Histogram for SRR1039509\", x=\"Expression range with capped values to 2000 if more than this value\", y=\"Count\") + \n                xlim(c(0,2000))+\n                theme_minimal()\nSRR1039509_histogram_capped"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.4 Histograms",
        "code": "## create a small function to cap values to 500\ncap_500_fun <- function(x) {cap <- ifelse(x>500,500, x)\n                             return(cap)}\n\n## modify values with function so all values >500 will be cap to 500 \nairway_data_red_capped <- purrr::modify(airway_data_red, cap_500_fun)\n\n## plot histogram and modify breaks\nSRR1039509_histogram_capped <- ggplot(data=airway_data_red_capped, aes(x=SRR1039509)) + \n     geom_histogram(breaks=seq(0, 500, by=10), \n                       col=\"red\", \n                      fill=\"green\", \n                    alpha = .2) + \n                labs(title=\"Histogram for SRR1039509\", x=\"Expression range with capped\", y=\"Count\") + \n                xlim(c(0,500))+\n                theme_minimal()\nSRR1039509_histogram_capped"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.4 Histograms",
        "code": "## plot histogram and modify breaks\nSRR1039509_histogram_capped <- ggplot(data=airway_data_red_capped, aes(x=SRR1039509)) + \n     geom_histogram(breaks=seq(0, 500, by=10), \n                       col=\"red\", \n                      fill=\"green\", \n                    alpha = .2) + \n                labs(title=\"Histogram for SRR1039509\", x=\"Expression range with capped -- yet be dropped less 100 and more 400 counts\", y=\"Count\") + \n                xlim(c(100,400))+\n                theme_minimal()\n\n## NOTICE: the warning about dropping rows outside the xlim().\nSRR1039509_histogram_capped\n#Warning messages:\n#1: Removed 34710 rows containing non-finite values (stat_bin). \n#2: Removed 20 rows containing missing values (geom_bar). "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.5 Multiple histograms",
        "code": "## check is MASS is loaded and get 'crabs' database\nrequire(MASS)\ndata(crabs)\ncrabs_data <- crabs\nstr(crabs_data)\n#'data.frame':  200 obs. of  8 variables:\n# $ sp   : Factor w/ 2 levels \"B\",\"O\": 1 1 1 1 1 1 1 1 1 1 ...\n# $ sex  : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 2 2 2 2 2 2 ...\n# $ index: int  1 2 3 4 5 6 7 8 9 10 ...\n# $ FL   : num  8.1 8.8 9.2 9.6 9.8 10.8 11.1 11.6 11.8 11.8 ...\n# $ RW   : num  6.7 7.7 7.8 7.9 8 9 9.9 9.1 9.6 10.5 ...\n# $ CL   : num  16.1 18.1 19 20.1 20.3 23 23.8 24.5 24.2 25.2 ...\n# $ CW   : num  19 20.8 22.4 23.1 23 26.5 27.1 28.4 27.8 29.3 ...\n# $ BD   : num  7 7.4 7.7 8.2 8.2 9.8 9.8 10.4 9.7 10.3 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.5 Multiple histograms",
        "code": "## Overlaid histograms\ncrabs_sp_CL_plot <- ggplot(crabs_data, aes(x=CL, fill=sp)) +\n                    geom_histogram(binwidth=1, alpha=.4, position=\"identity\") +\n                     ggtitle(\"Crab species CL overlap -- histograms\") +\n                     theme_minimal()\ncrabs_sp_CL_plot"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.5 Multiple histograms",
        "code": "## get mean per species\ncrabs_data_CL <- subset(crabs_data, select = c(sp, CL))\ncrabs_data_CL_sp_list <-split(crabs_data_CL, crabs_data_CL$sp)\nstr(crabs_data_CL_sp_list)\n#List of 2\n# $ B:'data.frame': 100 obs. of  2 variables:\n#  ..$ sp: Factor w/ 2 levels \"B\",\"O\": 1 1 1 1 1 1 1 1 1 1 ...\n#  ..$ CL: num [1:100] 16.1 18.1 19 20.1 20.3 23 23.8 24.5 24.2 25.2 ...\n# $ O:'data.frame': 100 obs. of  2 variables:\n#  ..$ sp: Factor w/ 2 levels \"B\",\"O\": 2 2 2 2 2 2 2 2 2 2 ...\n#  ..$ CL: num [1:100] 16.7 20.2 20.7 22.7 23.2 24.2 26 27.1 26.6 27.5 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.5 Multiple histograms",
        "code": "## first form\nmeans_out_list <- list()\nfor(i in 1:length(crabs_data_CL_sp_list)) {\n                        one_species_name <- names(crabs_data_CL_sp_list[i])\n                      one_species_mean <- mean(crabs_data_CL_sp_list[[i]][,2], na.rm = TRUE)\n                            one_sp_out <- data.frame(sp = one_species_name, sp_mean = one_species_mean, stringsAsFactors = FALSE)\n                     means_out_list[[i]] <- one_sp_out\n                                        }\n\nmeans_out_df <- do.call(rbind, means_out_list)\nmeans_out_df\n#  sp sp_mean\n#1  B  30.058\n#2  O  34.153\n\n## second form\ncrab_removed_sp_column_list <- lapply(crabs_data_CL_sp_list, function(x) { x[,1] <- NULL; x })\ncrab_sp_means <- lapply(crab_removed_sp_column_list, colMeans, na.rm = TRUE)\nmeans_out_df <- do.call(rbind, crab_sp_means)\nmeans_out_df <- as.data.frame(means_out_df)\nmeans_out_df$sp <- rownames(means_out_df)\nnames(means_out_df) <- c(\"sp_mean\", \"sp\")\nmeans_out_df\n#  sp_mean sp\n#B  30.058  B\n#O  34.153  O"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.5 Multiple histograms",
        "code": "## add mean line\ncrabs_sp_CL_plot <- crabs_sp_CL_plot + geom_vline(data=means_out_df, \n                                            aes(xintercept=sp_mean,  colour=sp),\n                                                  linetype=\"dashed\", size=0.5)\ncrabs_sp_CL_plot"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.6 Density plots",
        "code": "## check is MASS is loaded and get 'crabs' database\nrequire(MASS)\ndata(crabs)\ncrabs_data <- crabs\nstr(crabs_data)\n#'data.frame':  200 obs. of  8 variables:\n# $ sp   : Factor w/ 2 levels \"B\",\"O\": 1 1 1 1 1 1 1 1 1 1 ...\n# $ sex  : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 2 2 2 2 2 2 ...\n# $ index: int  1 2 3 4 5 6 7 8 9 10 ...\n# $ FL   : num  8.1 8.8 9.2 9.6 9.8 10.8 11.1 11.6 11.8 11.8 ...\n# $ RW   : num  6.7 7.7 7.8 7.9 8 9 9.9 9.1 9.6 10.5 ...\n# $ CL   : num  16.1 18.1 19 20.1 20.3 23 23.8 24.5 24.2 25.2 ...\n# $ CW   : num  19 20.8 22.4 23.1 23 26.5 27.1 28.4 27.8 29.3 ...\n# $ BD   : num  7 7.4 7.7 8.2 8.2 9.8 9.8 10.4 9.7 10.3 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.6 Density plots",
        "code": "## Overlaid densities\ncrabs_sp_CL_plot_den <- ggplot(crabs_data, aes(x=CL, fill=sp)) +\n                    geom_density(alpha=.3) +\n                     ggtitle(\"Crab species CL overlap -- density plots\") +\n                     theme_minimal()\ncrabs_sp_CL_plot_den"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.6 Density plots",
        "code": "crabs_sp_CL_plot_his_den <- ggplot(crabs_data, aes(x=CL, fill=sp)) + \n    geom_histogram(aes(y=..density.., fill=sp), \n             binwidth = 1,\n                alpha = .6, \n               colour = \"black\", \n             position = \"identity\") +\n   geom_density(mapping = aes(x=CL, fill=sp),\n                  alpha = .4,\n               position = \"identity\") +\n   ggtitle(\"Crab species CL overlap -- histograms and density plots\") +\n          theme_minimal()\n\n# change some colors\n\ncrabs_sp_CL_plot_his_den <- crabs_sp_CL_plot_his_den +\n                            scale_color_brewer(palette=\"Set3\")+\n                            scale_fill_brewer(palette=\"Set3\")\ncrabs_sp_CL_plot_his_den"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.7 Box plots",
        "code": "## check is MASS is loaded and get 'crabs' database\nrequire(MASS)\ndata(crabs)\ncrabs_data <- crabs\nstr(crabs_data)\n#'data.frame':  200 obs. of  8 variables:\n# $ sp   : Factor w/ 2 levels \"B\",\"O\": 1 1 1 1 1 1 1 1 1 1 ...\n# $ sex  : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 2 2 2 2 2 2 ...\n# $ index: int  1 2 3 4 5 6 7 8 9 10 ...\n# $ FL   : num  8.1 8.8 9.2 9.6 9.8 10.8 11.1 11.6 11.8 11.8 ...\n# $ RW   : num  6.7 7.7 7.8 7.9 8 9 9.9 9.1 9.6 10.5 ...\n# $ CL   : num  16.1 18.1 19 20.1 20.3 23 23.8 24.5 24.2 25.2 ...\n# $ CW   : num  19 20.8 22.4 23.1 23 26.5 27.1 28.4 27.8 29.3 ...\n# $ BD   : num  7 7.4 7.7 8.2 8.2 9.8 9.8 10.4 9.7 10.3 ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.7 Box plots",
        "code": "## check ig ggplot2 is loaded\nrequire(ggplot2)\n\n## Boxplots with standard color without legend -- guides(fill=FALSE)\ncrabs_sp_CL_boxplot <- ggplot(crabs_data, aes(x=sp, y=CL, fill=sp)) + \n                       geom_boxplot(width=0.3) +\n                     labs(title=\"Crab species CL overlap -- boxplots\", x=\"Species\", y=\"CL - carapace length (mm)\") +\n                     theme_minimal()\ncrabs_sp_CL_boxplot_v1 <- crabs_sp_CL_boxplot + scale_fill_manual(values =c(\"#C7A76C\", \"#99B56B\"))\ncrabs_sp_CL_boxplot_v1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.7 Box plots",
        "code": "## flip coordinates\ncrabs_sp_CL_boxplot_v2 <- crabs_sp_CL_boxplot + coord_flip() + scale_fill_manual(values =c(\"#8C241B\", \"#29809E\"))\ncrabs_sp_CL_boxplot_v2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.8 Violin plots",
        "code": "## check is MASS is loaded and get 'crabs' database\nrequire(MASS)\ndata(crabs)\ncrabs_data <- crabs\nstr(crabs_data)\n#'data.frame':  200 obs. of  8 variables:\n# $ sp   : Factor w/ 2 levels \"B\",\"O\": 1 1 1 1 1 1 1 1 1 1 ...\n# $ sex  : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 2 2 2 2 2 2 ...\n# $ index: int  1 2 3 4 5 6 7 8 9 10 ...\n# $ FL   : num  8.1 8.8 9.2 9.6 9.8 10.8 11.1 11.6 11.8 11.8 ...\n# $ RW   : num  6.7 7.7 7.8 7.9 8 9 9.9 9.1 9.6 10.5 ...\n# $ CL   : num  16.1 18.1 19 20.1 20.3 23 23.8 24.5 24.2 25.2 ...\n# $ CW   : num  19 20.8 22.4 23.1 23 26.5 27.1 28.4 27.8 29.3 ...\n# $ BD   : num  7 7.4 7.7 8.2 8.2 9.8 9.8 10.4 9.7 10.3 ...\n\n## violin and boxplots with mean indicated\n\ncrabs_sp_CL_violin <- ggplot(crabs_data, aes(x=sp, y=CL, fill=sp)) + \n                     geom_violin(trim=FALSE, width=0.5, fill= \"white\", color = \"black\") +\n                     geom_boxplot(width=0.3) +\n                     stat_summary(fun = mean, geom=\"point\", shape=5, size=4) +\n                     labs(title=\"Crab species CL overlap -- violin and box plots\", x=\"Species\", y=\"CL - carapace length (mm)\") +\n                     scale_fill_manual(values =c(\"#8C241B\", \"#29809E\")) +\n                     theme_minimal()\n\ncrabs_sp_CL_violin"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## install ggpubr\ninstall.packages(\"ggpubr\")\nlibrary(ggpubr)\n\n## we can select from these types of point shapes; the number indicates the shape code.\nshow_point_shapes()+theme_minimal()+labs(y=\"\")+theme(axis.text.x = element_blank(), axis.text.y = element_blank())"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## we can select from these types of lines, the number indicates the line code.\nshow_line_types()+theme_minimal()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## check is ade4 is loaded and get 'oribatid' database\nrequire(ade4)\ndata(oribatid)\n\n## data on the environmental control and spatial structure in ecological communities of Oribatid mites\n?oribatid\n\n## environmental and genetic data\nenvir_data <- oribatid$envir\nfauna_data <- oribatid$fau\n\n## total number of oribatid mites\nfauna_data$total_mites <- rowSums(fauna_data)\n\n## we add a common column in both data frames, in this case the 'site'\nenvir_data$site <- rownames(envir_data)\nfauna_data$site <- rownames(fauna_data)\n\n## merge both data frames using 'site'\noribatid_data <- merge(envir_data, fauna_data, by =\"site\")\nhead(oribatid_data)\n# you can explore this data frame content\nstr(oribatid_data)\n#'data.frame':  70 obs. of  41 variables:\n# $ site         : chr  \"1\" \"10\" \"11\" \"12\" ...\n# $ substrate    : Factor w/ 7 levels \"inter\",\"litter\",..: 4 4 6 4 4 1 1 1 1 4 ...\n# $ shrubs       : Factor w/ 3 levels \"few\",\"many\",\"none\": 1 2 2 1 2 2 2 1 2 2 ...\n# $ topo         : Factor w/ 2 levels \"blanket\",\"hummock\": 2 2 1 2 2 1 1 2 2 2 ...\n# $ density      : num  39.2 32.1 35.6 46.8 28 ...\n# $ water        : num  350 221 134 406 244 ...\n# $ Brachy       : int  17 22 36 28 3 41 6 7 9 19 ...\n# $ PHTH         : int  5 4 7 2 2 5 0 2 0 3 ...\n# $ HPAV         : int  5 5 35 12 4 12 6 3 1 7 ...\n# $ RARD         : int  3 3 9 13 12 0 0 2 2 0 ...\n# $ SSTR         : int  2 0 0 0 0 2 0 0 0 0 ...\n# $ Protopl      : int  1 0 2 0 0 0 0 0 0 0 ...\n# ... "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## make sure that ggplot2 is loaded\nrequire(ggplot2)\n## basic scatterplot\nmy_scatterplot <- ggplot(data = oribatid_data, aes(x = water, y = total_mites)) +\n                  geom_point() +\n                  labs(title=\"Oribatid data -- simple scatterplot\", x=\"water content of the substratum (g/L)\", y=\"total mites\") +\n                  theme_minimal()\n\nmy_scatterplot"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## labeled scatterplot\nmy_scatterplot_l <- ggplot(data = oribatid_data, aes(x = water, y = total_mites, label=site)) +\n                  geom_point() +\n                  labs(title=\"Oribatid data -- simple scatterplot labeled\", x=\"water content of the substratum (g/L)\", y=\"total mites\") +\n                  geom_text(aes(label=site),hjust=0, vjust=-0.5) +\n                  theme_minimal()\nmy_scatterplot_l"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## search the site \"67\"\noribatid_data[oribatid_data$site == \"67\", ]\n#   site substrate shrubs    topo density   water Brachy PHTH HPAV RARD SSTR Protopl MEGR MPRO TVIE HMIN HMIN2 NPRA TVEL ONOV SUCT LCIL\n#64   67      sph1   none blanket  52.123 826.958      4    0    3    0    0       0    0    0    0    0     0    0    0    0    0  723\n#   Oribatul1 Ceratoz1 PWIL Galumna1 Steganacarus2 HRUF Trhypochth1 PPEL NCOR SLAT FSET Lepidozetes Eupelops Minigalumna LRUG PLAG2 Ceratoz3\n#64         0        0    0        0             0    0           7    0    0    0    0           0        0           0   11     0        0\n#   Oppia.minus Trimalaco2 total_mites\n#64           0         33         781\n\n## this site has an unusual high numbers of LCIL mites. We can delete or remove this row by its number indicated by 64 at the row number\noribatid_data_2 <- oribatid_data[-64,]\n\n## labeled scatterplot\nmy_scatterplot_l2 <- ggplot(data = oribatid_data_2, aes(x = water, y = total_mites, label=site)) +\n                  geom_point() +\n                  labs(title=\"Oribatid data -- simple scatterplot labeled\", x=\"water content of the substratum (g/L)\", y=\"total mites\") +\n                  geom_text(aes(label=site),hjust=0, vjust=-0.5) +\n                  theme_minimal()\nmy_scatterplot_l2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## load color library 'ggsci'\nlibrary(ggsci)\n\n## scatterplot with different shape and color palette\nmy_scatterplot_l3 <- ggplot(data = oribatid_data_2, aes(x = water, y = total_mites, label=site)) +\n                  geom_point(aes(color = substrate), alpha = 0.9, size = 5, shape = 18) +\n                  labs(title=\"Oribatid data -- scatterplot by substrate -- jco palette \", x=\"water content of the substratum (g/L)\", y=\"total mites\") +\n                  scale_color_jco() +\n                  theme_minimal()\nmy_scatterplot_l3"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## scatterplot with size of points by LCIL numbers \nmy_scatterplot_l4 <- ggplot(data = oribatid_data_2, aes(x = water, y = total_mites, label=site)) +\n                  geom_point(aes(color = substrate, size = LCIL), alpha = 0.9, shape = 18) +\n                  labs(title=\"Oribatid data -- scatterplot by substrate and size by LCIL mite species -- npg palette \", x=\"water content of the substratum (g/L)\", y=\"total mites\") +\n                  scale_color_npg() +\n                  theme_minimal()\nmy_scatterplot_l4"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## create a vector for manual colors bases on substrate\nnames_substrates <- as.character(unique(oribatid_data_2$substrate))\nnames_substrates\n#[1] \"sph1\"   \"sph3\"   \"inter\"  \"litter\" \"sph4\"   \"sph2\"   \"peat\"\n\n## create a vector for colors by substrate type, but binary\ncolors_substrate <- ifelse(names_substrates == \"sph1\", \"firebrick1\", \"darkgrey\")\nnames(colors_substrate) <- names_substrates\ncolors_substrate\n#      sph1       sph3      inter     litter       sph4       sph2       peat \n# \"darkred\" \"darkgrey\" \"darkgrey\" \"darkgrey\" \"darkgrey\" \"darkgrey\" \"darkgrey\" \n\n## scatterplot for 'sph1' substrate only color\nmy_scatterplot_l4 <- ggplot(data = oribatid_data_2, aes(x = water, y = total_mites)) +\n                  geom_point(aes(color = substrate), alpha = 0.7, shape = 18, size = 4) +\n                  labs(title=\"Oribatid data -- scatterplot with emphasis on 'sph1' substrate \", x=\"water content of the substratum (g/L)\", y=\"total mites\") +\n                  scale_colour_manual(values = colors_substrate) +\n                  theme_minimal()\nmy_scatterplot_l4"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.9 Scatterplots",
        "code": "## create a vector for shapes by substrate type, but binary\nshape_substrate <- ifelse(names_substrates == \"sph1\", 16, 18)\nnames(shape_substrate) <- names_substrates\nshape_substrate\n#   sph1   sph3  inter litter   sph4   sph2   peat \n#    16     18     18     18     18     18     18\n\n## scatterplot for 'sph1' substrate with color and shape\nmy_scatterplot_l5 <- ggplot(data = oribatid_data_2, aes(x = water, y = total_mites)) +\n                  geom_point(aes(color = substrate , shape = substrate), alpha = 0.7, size = 4) +\n                  labs(title=\"Oribatid data -- scatterplot with emphasis on 'sph1' substrate \", x=\"water content of the substratum (g/L)\", y=\"total mites\") +\n                  scale_colour_manual(values = colors_substrate) +\n                  scale_shape_manual(values = shape_substrate) + \n                  theme_minimal()\nmy_scatterplot_l5"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## check is ade4 is loaded and get 'oribatid' database\nrequire(ade4)\ndata(oribatid)\n\n## enviromental and genetic data\nenvir_data <- oribatid$envir\nfauna_data <- oribatid$fau\n\n## total number of oribatid mites\nfauna_data$total_mites <- rowSums(fauna_data)\n\n## we add a common column in both data frames, in this case the 'site'\nenvir_data$site <- rownames(envir_data)\nfauna_data$site <- rownames(fauna_data)\n\n## merge both data frames using 'site'\noribatid_data <- merge(envir_data, fauna_data, by =\"site\")\nhead(oribatid_data)\n# you can explore this data frame content\nstr(oribatid_data)\n#'data.frame':  70 obs. of  41 variables:\n# $ site         : chr  \"1\" \"10\" \"11\" \"12\" ...\n# $ substrate    : Factor w/ 7 levels \"inter\",\"litter\",..: 4 4 6 4 4 1 1 1 1 4 ...\n# $ shrubs       : Factor w/ 3 levels \"few\",\"many\",\"none\": 1 2 2 1 2 2 2 1 2 2 ...\n# $ topo         : Factor w/ 2 levels \"blanket\",\"hummock\": 2 2 1 2 2 1 1 2 2 2 ...\n# $ density      : num  39.2 32.1 35.6 46.8 28 ...\n# $ water        : num  350 221 134 406 244 ...\n# $ Brachy       : int  17 22 36 28 3 41 6 7 9 19 ...\n# $ PHTH         : int  5 4 7 2 2 5 0 2 0 3 ...\n# $ HPAV         : int  5 5 35 12 4 12 6 3 1 7 ...\n# $ RARD         : int  3 3 9 13 12 0 0 2 2 0 ...\n# $ SSTR         : int  2 0 0 0 0 2 0 0 0 0 ...\n# $ Protopl      : int  1 0 2 0 0 0 0 0 0 0 ...\n# ... \n\n## as mentioned before, we will remove unusual site 67\n\noribatid_data_2 <- oribatid_data[-64,]"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## make sure that ggplot2 is loaded\nrequire(ggplot2)\n\n## add a line for each shrubs group\n\nsubstrate_plots <- ggplot(data = oribatid_data_2, aes(x = water, y = total_mites, group = shrubs)) +\n                     geom_line(aes(color = shrubs))+\n                      geom_point(aes(color = shrubs), alpha = 0.7, size = 4) +\n                      labs(title=\"Oribatid data -- scatterplot with lines by shrub density\", x=\"water content of the substratum (g/L)\", y=\"total mites\") +\n                       theme_minimal()\n\nsubstrate_plots"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## change line type manually for each shrubs group\nsubstrate_plots <- ggplot(data = oribatid_data_2, aes(x = water, y = total_mites, group = shrubs)) +\n                     geom_line(aes(color = shrubs, linetype = shrubs))+\n                      geom_point(aes(color = shrubs), alpha = 0.7, size = 4) +\n                      labs(title=\"Oribatid data -- scatterplot with lines by shrub density\", x=\"water content of the substratum (g/L)\", y=\"total mites\") +\n                       theme_minimal()\n\n\nsubstrate_plots <- substrate_plots + scale_linetype_manual(values=c(\"solid\", \"dashed\", \"solid\"))\n\nsubstrate_plots"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## NOTE: remember to update the path to file with the dataset where you downloaded in your computer -- THIS IS EXCLUSIVE TO YOUR COMPUTER AND IT IS NOT THE PATH SHOWN BELOW\n\n## load get 'nyc_temps.txt' dataset \nnyc_temps <- read.table(\"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/ref_files_pdfs/nyc_temps.txt\",\n             header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE)\nhead(nyc_temps)\n#  YEAR  JAN  FEB  MAR  APR  MAY  JUN  JUL  AUG  SEP  OCT  NOV  DEC ANNUAL\n#1 1869 35.1 34.5 34.8 49.2 57.7 69.3 72.8 71.8 65.6 50.9 40.3 34.7   51.4\n#2 1870 37.5 31.3 34.1 50.7 60.9 72.9 76.6 75.3 67.6 56.7 45.5 34.1   53.6\n#3 1871 28.3 30.2 44.2 52.0 60.4 68.2 72.3 73.6 60.8 55.6 38.8 29.2   51.1\n#4 1872 28.8 29.9 30.5 49.4 61.5 71.2 77.5 75.6 66.4 53.2 41.0 26.7   51.0\n#5 1873 28.6 29.5 35.7 46.7 58.8 70.3 75.4 72.0 65.4 55.8 37.0 36.5   51.0\n#6 1874 34.2 31.3 37.1 41.1 58.8 70.1 73.9 70.3 67.0 55.1 43.4 33.8   51.3\nstr(nyc_temps)\n#'data.frame': 151 obs. of  14 variables:\n# $ YEAR  : int  1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 ...\n# $ JAN   : num  35.1 37.5 28.3 28.8 28.6 34.2 23.8 36.6 27.7 30.3 ...\n# $ FEB   : num  34.5 31.3 30.2 29.9 29.5 31.3 25.2 31.8 37 32.2 ...\n# $ MAR   : num  34.8 34.1 44.2 30.5 35.7 37.1 34.1 34.4 35.8 44.1 ...\n# $ APR   : num  49.2 50.7 52 49.4 46.7 41.1 43.1 47 47.7 53.3 ...\n# $ MAY   : num  57.7 60.9 60.4 61.5 58.8 58.8 60.1 60.2 59.6 59.4 ...\n# $ JUN   : num  69.3 72.9 68.2 71.2 70.3 70.1 69.2 73.5 70.2 67.7 ...\n# $ JUL   : num  72.8 76.6 72.3 77.5 75.4 73.9 74 79.4 75 77.8 ...\n# $ AUG   : num  71.8 75.3 73.6 75.6 72 70.3 72.9 75.2 75.4 74.2 ...\n# $ SEP   : num  65.6 67.6 60.8 66.4 65.4 67 64 63.7 66.9 68.3 ...\n# $ OCT   : num  50.9 56.7 55.6 53.2 55.8 55.1 53.6 50.6 55.8 58.7 ...\n# $ NOV   : num  40.3 45.5 38.8 41 37 43.4 39.3 45.2 44.5 43.8 ...\n# $ DEC   : num  34.7 34.1 29.2 26.7 36.5 33.8 33.9 24.9 37.4 32.8 ...\n# $ ANNUAL: num  51.4 53.6 51.1 51 51 51.3 49.4 51.9 52.8 53.6 ...\n\n\n## we need to create a confidence level by determining the max and min temperature values per year\n## NOTICE that we need to exclude the YEAR and ANNUAL columns\n\n## max\nnyc_temps[, \"max_temp\"] <- apply(nyc_temps[, 2:13], 1, max)\n## min\nnyc_temps[, \"min_temp\"] <- apply(nyc_temps[, 2:13], 1, min)\n## standard deviation\nnyc_temps[, \"sd_temp\"] <- apply(nyc_temps[, 2:13], 1, sd)\n\nhead(nyc_temps)\n#  YEAR  JAN  FEB  MAR  APR  MAY  JUN  JUL  AUG  SEP  OCT  NOV  DEC ANNUAL max_temp min_temp  sd_temp\n#1 1869 35.1 34.5 34.8 49.2 57.7 69.3 72.8 71.8 65.6 50.9 40.3 34.7   51.4     72.8     34.5 15.57944\n#2 1870 37.5 31.3 34.1 50.7 60.9 72.9 76.6 75.3 67.6 56.7 45.5 34.1   53.6     76.6     31.3 17.11538\n#3 1871 28.3 30.2 44.2 52.0 60.4 68.2 72.3 73.6 60.8 55.6 38.8 29.2   51.1     73.6     28.3 16.74647\n#4 1872 28.8 29.9 30.5 49.4 61.5 71.2 77.5 75.6 66.4 53.2 41.0 26.7   51.0     77.5     26.7 19.35093\n#5 1873 28.6 29.5 35.7 46.7 58.8 70.3 75.4 72.0 65.4 55.8 37.0 36.5   51.0     75.4     28.6 17.38056\n#6 1874 34.2 31.3 37.1 41.1 58.8 70.1 73.9 70.3 67.0 55.1 43.4 33.8   51.3     73.9     31.3 16.26236"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## NYC temperatures plot\nnyc_temp_plot <- ggplot(nyc_temps, aes(x = YEAR, y = ANNUAL)) +\n                 geom_ribbon(aes(ymin = ANNUAL - sd_temp, ymax = ANNUAL + sd_temp), alpha = 0.2) +\n                 geom_line(aes(x = YEAR, y = max_temp), colour = \"red\", linetype = \"dotted\") +\n                 geom_line(aes(x = YEAR, y = min_temp), colour = \"blue\", linetype = \"dotted\") +\n                 geom_line() +\n                 labs(title=\"NYC temperature Central Park\", x=\"Year\", y=\"Temp (F)\") +\n                 ylim(0, 90) +\n                 theme_minimal()\n\nnyc_temp_plot"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## NYC temperatures plot and fit line loess\nnyc_temp_plot_smooth <- ggplot(nyc_temps, aes(x = YEAR, y = ANNUAL)) +\n                        geom_point(alpha = 0.7, size = 4) +\n                        geom_smooth() +\n                        labs(title=\"NYC temperature Central Park\", x=\"Year\", y=\"Temp (F)\") +\n                        ylim(35, 65) +\n                        theme_minimal()\nnyc_temp_plot_smooth\n#`geom_smooth()` using method = 'loess' and formula 'y ~ x'"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## NYC temperatures plot and fit line with lm\nnyc_temp_plot_smooth_lm <- ggplot(nyc_temps, aes(x = YEAR, y = ANNUAL)) +\n                        geom_point(alpha = 0.7, size = 4) +\n                        geom_smooth(method=lm, se=FALSE) +\n                        labs(title=\"NYC temperature Central Park - lm line and without se\", x=\"Year\", y=\"Temp (F)\") +\n                        ylim(35, 65) +\n                        theme_minimal()\n## I removed the confidence line change by setting in geom_smooth() --> se=FALSE\nnyc_temp_plot_smooth_lm\n#`geom_smooth()` using formula 'y ~ x'"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## we need to prepare our data\nnyc_average <- subset(nyc_temps, select = c(\"YEAR\", \"ANNUAL\"))\nnames(nyc_average) <- c(\"YEAR\", \"TEMP\")\nnyc_average$group <- \"average\"\n\nnyc_max <- subset(nyc_temps, select = c(\"YEAR\", \"max_temp\"))\nnames(nyc_max) <- c(\"YEAR\", \"TEMP\")\nnyc_max$group <- \"max\"\n\n\nnyc_min <- subset(nyc_temps, select = c(\"YEAR\", \"min_temp\"))\nnames(nyc_min) <- c(\"YEAR\", \"TEMP\")\nnyc_min$group <- \"min\"\n\n\n## all data together\nnyc_all <- do.call(rbind, list(nyc_average,nyc_max, nyc_min))\nnyc_all$group2 <- nyc_all$group\nstr(nyc_all)\n#'data.frame':  453 obs. of  4 variables:\n# $ YEAR  : int  1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 ...\n# $ TEMP  : num  51.4 53.6 51.1 51 51 51.3 49.4 51.9 52.8 53.6 ...\n# $ group : chr  \"average\" \"average\" \"average\" \"average\" ...\n# $ group2: chr  \"average\" \"average\" \"average\" \"average\" ..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## NYC temperatures plot and fit line loess\nnyc_temp_plot_smooth_3 <- ggplot(nyc_all, aes(x = YEAR, y = TEMP, color = group)) +\n                        geom_point(aes(color = group), alpha = 0.7, size = 4) +\n                        geom_smooth(aes(color = group2), alpha = 0.5) +\n                        labs(title=\"NYC temperature Central Park\", x=\"Year\", y=\"Temp (F)\") +\n                        ylim(15, 90) +\n                        theme_minimal()\nnyc_temp_plot_smooth_3\n#`geom_smooth()` using formula 'y ~ x'"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## NYC temperatures plot and fit line loess\ncolor_points <- c(\"red\",\"green\",\"blue\")\ncolor_lines <- c(\"black\",\"black\",\"black\")\n\nnyc_temp_plot_smooth_4 <- ggplot(nyc_all, aes(x = YEAR, y = TEMP)) +\n                        geom_point(aes(fill=factor(group)),size=4, shape=21, stroke=0) +\n                        geom_smooth(aes(color = group2), alpha = 0.5) +\n                        labs(title=\"NYC temperature Central Park\", x=\"Year\", y=\"Temp (F)\") +\n                        scale_fill_manual(values=color_points) +\n                        scale_colour_manual(values=color_lines) +\n                        ylim(15, 90) +\n                        theme_minimal()\n\nnyc_temp_plot_smooth_4 \n#`geom_smooth()` using method = 'loess' and formula 'y ~ x'"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## install cowplot\ninstall.packages(\"cowplot\")\nlibrary(cowplot)\n\n## make sure that ggplot2 is loaded\nrequire(ggplot2)\n\n## \u201cfruits\u201d is dataset about batches of fruits -two types- are judged by two different ways.\n## They are classified in order of preference by 16 individuals (J1-J16)\n\nlibrary(ade4)\ndata(fruits)\n\n## data on two types of fruits and preference by 16 judges \n?fruits\n\n## prepare data \n\nfruits_dataset <- fruits\njug <- fruits_dataset$jug\njug$fruit <- as.character(fruits_dataset$type)\nrownames(jug) <- NULL\nhead(jug)\n#  J1 J2 J3 J4 J5 J6 J7 J8 J9 J10 J11 J12 J13 J14 J15 J16 fruit\n#1 10  5  8  3  1 18  5 17  3   4   1   2   5   3   1   1 necta\n#2  3  1  9  8  6 16  8 10  2   1   8   8   9   5   6   4 necta\n#3  5 11  5  2  8  8 18  3  4  15  14   4   7   1   3  13 peche\n#4  6 12  3  4  4  7 17  2  1  16  13   7   3   8   4  14 peche\n#5  4  2  4 14 17 10 16  1  5  19  21  13   6   2   5  15 peche\n#6  2  6 16 10 13  2 11  5 13   8  10  14  10   9  15   8 necta\n\n## first plot -- individual J1 versus J2\n\nplot_J1_vs_J2 <- ggplot(jug, aes(x = J1, y = J2, color = fruit)) + \n          geom_point() +\n          labs(title=\"J1 versus J2 on fruits\") +\n          theme_minimal()\n\nplot_J1_vs_J2 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## second plot -- individual J1 versus J3\n\nplot_J1_vs_J3 <- ggplot(jug, aes(x = J1, y = J3, color = fruit)) + \n          geom_point() +\n          labs(title=\"J1 versus J3 on fruits\") +\n          theme_minimal()\n\nplot_J1_vs_J3 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## load reshape2 to make more amenable\nlibrary(reshape2)\njug_reshape <- melt(jug)\nnames(jug_reshape) <- c(\"fruit\", \"judge\", \"score\")\nhead(jug_reshape)\n#  fruit judge score\n#1 necta    J1    10\n#2 necta    J1     3\n#3 peche    J1     5\n#4 peche    J1     6\n#5 peche    J1     4\n#6 necta    J1     2\n\n## third plot -- all judges\nplot_all_judges <-ggplot(jug_reshape, aes(x = judge, y = score, color = fruit)) + \n                  geom_boxplot() +\n          labs(title=\"all judges\") +\n          theme_minimal()\n\nplot_all_judges"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## fourth plot -- all fruits\nplot_all_fruits <-ggplot(jug_reshape, aes(x = fruit, y = score, color = judge)) + \n                  geom_boxplot() +\n          labs(title=\"fruits\") +\n          theme_minimal()\n\nplot_all_fruits"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "plot_grid(plot_J1_vs_J2, plot_J1_vs_J3, \n          labels = c('A', 'B'), label_size = 12)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "plot_all_fruits <- plot_all_fruits + theme(legend.position = \"none\")\nplot_grid(plot_all_judges, plot_all_fruits, \n          ncol = 1, align = \"v\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.10 Lines and Scatterplots",
        "code": "## combine all into one plot\nall_four_plots <- plot_grid(plot_J1_vs_J2, plot_J1_vs_J3,  \n        plot_all_judges, plot_all_fruits, \n        rel_heights = c(.6, 1), labels = \"auto\")\nall_four_plots"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.11 Save your plots as PDF or PNG",
        "code": "## set your working ditectory\nsetwd(\"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory\")\n\n## save 'all_plot' graph as pdf\nggsave(\"all_plots.pdf\")\n\n## save 'all_plot' graph as png\nggsave(\"all_plots.png\")\n\n## save 'all_plot' graph as png with some size defintions\nggsave(\"all_plots2.png\", width = 4, height = 4)\nggsave(\"all_plots3.png\", width = 20, height = 20, units = \"cm\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/basic-graphics.html",
        "section": "Session 10 \u2013 Basic Graphics",
        "subsection": "10.12 ggplot2 add-on packages: treemapify",
        "code": "## install package if needed\ninstall.packages(\"treemapify\")\n\n## load libraries\nlibrary(ggplot2)\nlibrary(treemapify)\n\n## we will use the 'ichtyo\u2019 dataset\nlibrary(ade4)\ndata(ichtyo)\n\n## fish data\n?ichtyo\n\nichtyo_data <- ichtyo$tab\n\n## column sum as data frame\nichtyo_sum_df <- as.data.frame(colSums (ichtyo_data, na.rm = TRUE))\n\n## build a nicer data frame and add column of site_names\nichtyo_sum_df$site_names <- rownames(ichtyo_sum_df)\n\n## upgrade column names\nnames(ichtyo_sum_df) <- c(\"counts\", \"site_names\")\n\n## add count labels for later use\nichtyo_sum_df$count_label <- as.character(ichtyo_sum_df$counts)\nstr(ichtyo_sum_df)\n#'data.frame':  9 obs. of  3 variables:\n# $ counts     : num  936 995 1741 491 951 ...\n# $ site_names : chr  \"HOT\" \"VAN\" \"CHE\" \"SPI\" ...\n# $ count_label: chr  \"936\" \"995\" \"1741\" \"491\" ...\n\n## Drawing a simple treemap\n\nichtyo_treemap <- ggplot(data=ichtyo_sum_df, aes(label=site_names, area=counts, fill = site_names, subgroup = count_label)) +\n                  geom_treemap() +\n                  geom_treemap_subgroup_text(place = \"centre\", grow = FALSE, alpha = 0.7, \n                                            colour =\"black\", fontface = \"italic\", min.size = 0) +\n                  geom_treemap_text(colour = \"white\", place = \"topleft\", reflow = TRUE, grow = FALSE)\n\nichtyo_treemap\n\n## set your working ditectory to save plot\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_11/treemap_plot\")\n\n## save 'ichtyo_treemapt' graph as pdf\nggsave(\"ichtyo_treemap.pdf\")\n\n## save 'chtyo_treemap' graph as png\nggsave(\"chtyo_treemap.png\")\n\n# save 'chtyo_treemap' graph as jpg\nggsave(\"chtyo_treemap.jpg\")\n\n## save 'chtyo_treemap\" as png with some size defintions\nggsave(\"chtyo_treemap_inches.png\", width = 4, height = 4)\nggsave(\"chtyo_treemap_cm.png\", width = 20, height = 20, units = \"cm\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.1 Retrieving sequences using \u2018rentrez\u2019",
        "code": "## make sure that 'rentrez' is loaded\nrequire(rentrez)\n\n## Download some nucleotide sequences from NCBI for Ameerega [Organism] that correspond to the gene COI\nAmeerega_name_COX1 <- \"Ameerega[Organism] AND COI[Gene]\"\nAmeerega_seq_IDs <- entrez_search(db=\"nuccore\", term= Ameerega_name_COX1)\nstr(Ameerega_seq_IDs)\n#List of 5\n# $ ids             : chr [1:20] \"1952638364\" \"1952638361\" \"1952638358\" \"1074806460\" ...\n# $ count           : int 37\n# $ retmax          : int 20\n# $ QueryTranslation: chr \"\\\"Ameerega\\\"[Organism] AND COI[Gene]\"\n# $ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n# - attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\n\n## Note: the $ids indicate that 37 sequences exist in Ameerega for COX1 -- make sure to use Ameerega_seq_IDs$ids\nAmeerega_seqs_fasta <- entrez_fetch(db=\"nuccore\", id=Ameerega_seq_IDs$ids, rettype=\"fasta\")\ncat(Ameerega_seqs_fasta)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.3 Retrieving accession numbers",
        "code": "## sequences for Colostethus and the corresponding COI gene\n\nColostethus_name_COX1 <- \"Colostethus[Organism] AND COI[Gene]\"\nColostethus_seq_IDs <- entrez_search(db=\"nuccore\", term= Colostethus_name_COX1)\nColostethus_seq_fasta <- entrez_fetch(db=\"nuccore\", id=Colostethus_seq_IDs$ids, rettype=\"fasta\")\ncat(Colostethus_seq_fasta)\n\n# for example, we will retrieve \u201cKR862889.1 Colostethus pratti voucher CH 6816 cytochrome oxidase subunit 1 (COI) gene, partial cds; mitochondria\u201d\n\n## sequences for Epipedobates and the corresponding COI gene\n\nEpipedobates_name_COX1 <- \"Epipedobates[Organism] AND COI[Gene]\"\nEpipedobates_seq_IDs <- entrez_search(db=\"nuccore\", term= Epipedobates_name_COX1)\nEpipedobates_seq_fasta <- entrez_fetch(db=\"nuccore\", id=Epipedobates_seq_IDs$ids, rettype=\"fasta\")\ncat(Epipedobates_seq_fasta)\n\n# for example, we will retrieve \u201cMW042036.1 Epipedobates machalilla voucher QCAZ16527 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\u201d\n\n## sequences for Silverstoneia and the corresponding COI gene\n\nSilverstoneia_name_COX1 <- \"Silverstoneia[Organism] AND COI[Gene]\"\nSilverstoneia_seq_IDs <- entrez_search(db=\"nuccore\", term= Silverstoneia_name_COX1)\nSilverstoneia_seq_fasta <- entrez_fetch(db=\"nuccore\", id=Silverstoneia_seq_IDs$ids, rettype=\"fasta\")\ncat(Silverstoneia_seq_fasta)\n\n# for example, we will retrieve \u201cMW042039.1 Silverstoneia flotator voucher TNHCFS4804 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\u201d"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.3 Retrieving accession numbers",
        "code": "## sequences for outgroups of Ameerega\noutgroups_seq_fasta <- entrez_fetch(db=\"nuccore\", \n                                    id=c(\"MF614315.1\", \"MF614316.1\", \"KJ130663.1\", \"MT808256.1\"), \n                                    rettype=\"fasta\")\ncat(outgroups_seq_fasta)\n#>MF614315.1 Ectopoglossus isthminus voucher MHCH2651 cytochrome oxidase subunit I (COI) gene, partial cds; mitochondrial\n#CACCCTGTACCTTATTTTCGGCGCTTGAGCCGGAATAGTGGGTACTGCCCTCAGCCTCTTGATCCGCGCT\n#GAATTAAGCCAACCCGGGGCCCTTCTTGGCGACGACCAGATTTACAACGTAATCGTCACTGCCCATGCTT\n#TTGTAATAATCTTTTTTATAGTAATGCCAATTTTAATCGGCGGATTCGGAAATTGATTGGTCCCCCTAAT\n#AATCGGCGCCCCCGATATAGCTTTCCCCCGAATAAACAACATAAGTTTTTGACTTCTCCCCCCCTCATTT\n#TTACTCTTACTAGCCTCAGCAGGTGTAGAAGCTGGTGCAGGAACAGGTTGAACAGTTTATCCCCCCCTCG\n#CGGGAAACCTGGCTCATGCCGGACCATCAGTGGACCTGACCATCTTTTCCCTCCACCTAGCCGGGGTATC\n#ATCAATCTTGGGCGCAATTAATTTTATCACAACTACTCTCAATATAAAACCCCCTTCTCTTACTCAATAC\n#CAAACCCCATTATTTGTCTGATCTGTTCTAATTACTGCAGTTCTTCTTCTTCTCTCTTTGCCAGTTTTGG\n#CCGCTGGAATCACTATACTTCTAACAGACCGCAACCTTAACACAACCTTCTTTGACCCCGCAGGGGGCGG\n#TGACCCTGTTCTCTATCAACACCTGTTC\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.3 Retrieving accession numbers",
        "code": "## append sequences in a single vector\n\nall_sequences <- c(Ameerega_seqs_fasta, Silverstoneia_seq_fasta, Epipedobates_seq_fasta, Colostethus_seq_fasta, outgroups_seq_fasta)\n\n## this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_11/sequences_example\")\nwrite(all_sequences, \"Ameerega_COI_seqs_fasta.txt\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.3 Retrieving accession numbers",
        "code": "## make sure Biostrings is loaded\nrequire(Biostrings)\n\n## load sequences\n\nAmeerega_Biostrings_set <- readDNAStringSet(filepath = \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_11/sequences_example/Ameerega_COI_seqs_fasta.txt\", \n                                       format = \"fasta\")\nAmeerega_Biostrings_set\n#DNAStringSet object of length 73:\n#     width seq                                                                                                                                                                  names               \n# [1]  1539 GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGATATTGGAACCTTATACCTAGTGTTTGGGGCGTGAGCGGGC...TAACCCCAACTAATGTAGAGTGATTATACGGGTCTCCCCCACCTTATCACACATTTGAGGAAGCCGTTTACTCCAAAATT MW042032.1 Ameere...\n# [2]  1539 GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGACATTGGAACCTTATATTTAGTATTTGGAGCATGGGCAGGC...TAACTCCAACAAACGTAGAGTGATTGTACGGATCCCCCCCTCCCTACCATACATTTGAAGAAGCCGTTTATTCCAAAATT MW042031.1 Ameere...\n# [3]  1539 GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGGCATGAGCAGGC...TAACCCCAACTAATGTAGAATGATTATACGGATCCCCCCCACCTTACCACACTTTTGAGGAAGCCGTTTACTCCAAAATT MW042030.1 Ameere...\n# [4]   646 AACTTTATACCTAGTATTTGGGGCATGAGCGGGCATAGTCGGTACTGCTCTTAGCCTTTTAATTCGAGCCGAATTAAGCCA...GAATCACTATACTCCTAACCGATCGTAACCTAAATACCACTTTTTTTGACCCGGCAGGGGGAGGTGACCCTGTCCTATAC KU494334.1 Ameere...\n# [5]   647 GAACTTTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTCAGCCTTTTAATTCGAGCCGAATTAAGCC...GAATCACCATACTTTTAACCGATCGTAACTTAAATACCACCTTCTTTGACCCAGCAGGGGGAGGTGACCCTGTTCTATAC KU494333.1 Ameere...\n# ...   ... ...\n#[69]   658 AACTTTATACCTTGTATTTGGGGCATGGGCCGGAATAGTCGGAACCGCCCTAAGCCTGCTAATTCGAGCAGAATTAAGTCA...TCTTAACTGACCGAAATCTGAACACTACTTTCTTTGACCCGGCCGGCGGAGGTGACCCTGTTCTCTACCAACATCTCTTT KF807016.1 Colost...\n#[70]   658 CACCCTGTACCTTATTTTCGGCGCTTGAGCCGGAATAGTGGGTACTGCCCTCAGCCTCTTGATCCGCGCTGAATTAAGCCA...TTCTAACAGACCGCAACCTTAACACAACCTTCTTTGACCCCGCAGGGGGCGGTGACCCTGTTCTCTATCAACACCTGTTC MF614315.1 Ectopo...\n#[71]   658 TACCTTATACCTCATTTTCGGCGCTTGGGCCGGGATAGTGGGTACTGCTCTTAGCCTCTTGATCCGCGCCGAATTAAGCCA...TCCTAACAGATCGCAACCTCAACACAACCTTCTTTGACCCCGCAGGGGGCGGTGACCCCGTTCTCTACCAACACCTGTTC MF614316.1 Ectopo...\n#[72]   658 TACCCTATACCTAGTCTTTGGTGCATGAGCTGGGATAGTTGGTACTGCTCTAAGCCTTCTAATTCGAGCTGAACTAAGTCA...TTCTTACTGACCGCAATCTAAACACAACCTTCTTCGACCCCGCAGGGGGAGGAGATCCGGTCCTATACCAACATTTATTC KJ130663.1 Rheoba...\n#[73]   577 ACGCCCTTTAGCCTACTAATTCGAGCAGAGCTAAGTCAACCCGGCTCTTTACTGGGCGATGATCAAATTTATAATGTAATC...CCTTTCCCTTCCGGTCTTGGCCGCAGGCATCACAATGCTGCTTACTGACCGAAACTTAAACACAACCTTCTTCGACCCCG MT808256.1 Phyllo..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.4 Alignment with DECIPHER",
        "code": "## install DECIPHER\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"DECIPHER\")\n\n## make sure that DECIPHER and Biostrings are loaded\nrequire(DECIPHER)\nrequire(Biostrings)\n\n## load YOUR sequences or the example\n\nAmeerega_Biostrings_set <- readDNAStringSet(filepath = \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_11/sequences_example/Ameerega_COI_seqs_fasta.txt\", \n                                       format = \"fasta\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.4 Alignment with DECIPHER",
        "code": "## simple alignment procedure for DNA\nAmeerega_aligned <- AlignSeqs(Ameerega_Biostrings_set)\n#Determining distance matrix based on shared 9-mers:\n#  |==========================================================================================================================================| 100%\n#\n#Time difference of 0.08 secs\n#\n#Clustering into groups by similarity:\n#  |==========================================================================================================================================| 100%\n#\n#Alignment converged - skipping remaining iteration.\n#\n#Refining the alignment:\n#  |==========================================================================================================================================| 100%\n#\n#Time difference of 0.18 secs\n\n## you can call DNAstringSet aligned\nAmeerega_aligned\n#DNAStringSet object of length 73:\n#     width seq                                                                                                                                                                  names               \n# [1]  1539 GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGATATTGGAACCTTATACCTAGTGTTTGGGGCGTGAGCGGGC...TAACCCCAACTAATGTAGAGTGATTATACGGGTCTCCCCCACCTTATCACACATTTGAGGAAGCCGTTTACTCCAAAATT MW042032.1 Ameere...\n# [2]  1539 GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGACATTGGAACCTTATATTTAGTATTTGGAGCATGGGCAGGC...TAACTCCAACAAACGTAGAGTGATTGTACGGATCCCCCCCTCCCTACCATACATTTGAAGAAGCCGTTTATTCCAAAATT MW042031.1 Ameere...\n# [3]  1539 GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGGCATGAGCAGGC...TAACCCCAACTAATGTAGAATGATTATACGGATCCCCCCCACCTTACCACACTTTTGAGGAAGCCGTTTACTCCAAAATT MW042030.1 Ameere...\n# [4]  1539 -----------------------------------------------AACTTTATACCTAGTATTTGGGGCATGAGCGGGC...-------------------------------------------------------------------------------- KU494334.1 Ameere...\n# [5]  1539 ----------------------------------------------GAACTTTATACCTAGTGTTTGGGGCATGAGCAGGC...-------------------------------------------------------------------------------- KU494333.1 Ameere...\n# ...   ... ...\n#[69]  1539 -----------------------------------------------AACTTTATACCTTGTATTTGGGGCATGGGCCGGA...-------------------------------------------------------------------------------- KF807016.1 Colost...\n#[70]  1539 -----------------------------------------------CACCCTGTACCTTATTTTCGGCGCTTGAGCCGGA...-------------------------------------------------------------------------------- MF614315.1 Ectopo...\n#[71]  1539 -----------------------------------------------TACCTTATACCTCATTTTCGGCGCTTGGGCCGGG...-------------------------------------------------------------------------------- MF614316.1 Ectopo...\n#[72]  1539 -----------------------------------------------TACCCTATACCTAGTCTTTGGTGCATGAGCTGGG...-------------------------------------------------------------------------------- KJ130663.1 Rheoba...\n#[73]  1539 ---------------------------------------------------------------------------------...-------------------------------------------------------------------------------- MT808256.1 Phyllo..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.5 Visualize alignment",
        "code": "## simple visualization of alignment\nBrowseSeqs(Ameerega_aligned)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.5 Visualize alignment",
        "code": "## if the genetic code is standard, you do not need to define it. In this case, we have sequences from the mitochondria and this needs to be defined as follows.\nmt_vertebrate_code <- getGeneticCode(\"SGC1\")\nmt_vertebrate_code \n#TTT TTC TTA TTG TCT TCC TCA TCG TAT TAC TAA TAG TGT TGC TGA TGG CTT CTC CTA CTG CCT CCC CCA CCG CAT CAC CAA CAG CGT CGC CGA CGG ATT ATC ATA ATG ACT \n#\"F\" \"F\" \"L\" \"L\" \"S\" \"S\" \"S\" \"S\" \"Y\" \"Y\" \"*\" \"*\" \"C\" \"C\" \"W\" \"W\" \"L\" \"L\" \"L\" \"L\" \"P\" \"P\" \"P\" \"P\" \"H\" \"H\" \"Q\" \"Q\" \"R\" \"R\" \"R\" \"R\" \"I\" \"I\" \"M\" \"M\" \"T\" \n#ACC ACA ACG AAT AAC AAA AAG AGT AGC AGA AGG GTT GTC GTA GTG GCT GCC GCA GCG GAT GAC GAA GAG GGT GGC GGA GGG \n#\"T\" \"T\" \"T\" \"N\" \"N\" \"K\" \"K\" \"S\" \"S\" \"*\" \"*\" \"V\" \"V\" \"V\" \"V\" \"A\" \"A\" \"A\" \"A\" \"D\" \"D\" \"E\" \"E\" \"G\" \"G\" \"G\" \"G\" \n#attr(,\"alt_init_codons\")\n#[1] \"ATT\" \"ATC\" \"GTG\"\n\n## you translate and align your nucleotide sequence into amino acids (AA). \nAmeerega_AA_set <- AlignTranslation(Ameerega_Biostrings_set, type=\"AAStringSet\", geneticCode = mt_vertebrate_code)\n\n## see the AAStringSet\nAmeerega_AA_set\n# AAStringSet object of length 73:\n#     width seq                                                                                                                                                                  names               \n# [1]   555 VMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNW...AGMPRRYSDYPDAYTLWNTVSSIGSLISLVAVIIMMFIIWEAFSSKRLPFPAEMTPTNVEWLYGSPPPYHTFEEAVYSKI MW042032.1 Ameere...\n# [2]   555 VMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNW...AGMPRRYSDYPDAYTLWNTVSSIGSLISLVAVIIMMFIIWEAFSSKRLPLPAEMTPTNVEWLYGSPPPYHTFEEAVYSKI MW042031.1 Ameere...\n# [3]   555 VMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNW...AGMPRRYSDYPDAYTLWNTVSSIGSLISLVAVIIMMFIIWEAFSSKRLPLPAEMTPTNVEWLYGSPPPYHTFEEAVYSKI MW042030.1 Ameere...\n# [4]   555 ---------------+TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNW...-------------------------------------------------------------------------------- KU494334.1 Ameere...\n# [5]   555 ---------------+TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNW...-------------------------------------------------------------------------------- KU494333.1 Ameere...\n# ...   ... ...\n#[69]   555 ---------------+TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNW...-------------------------------------------------------------------------------- KF807016.1 Colost...\n#[70]   555 ---------------+TLYLIFGAWAGMVGTALSLLIRAELSQPGALLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNW...-------------------------------------------------------------------------------- MF614315.1 Ectopo...\n#[71]   555 ---------------+TLYLIFGAWAGMVGTALSLLIRAELSQPGALLGDDQIYNVVVTAHAFVMIFFMVMPILIGGFGNW...-------------------------------------------------------------------------------- MF614316.1 Ectopo...\n#[72]   555 ---------------+TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVVVTAHAFVMIFFMVMPILIGGFGNW...-------------------------------------------------------------------------------- KJ130663.1 Rheoba...\n#[73]   555 ------------------------------TPFSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNW...-------------------------------------------------------------------------------- MT808256.1 Phyllo...\n\n## simple visualization of AA alignment with references to sequence 1\nBrowseSeqs(Ameerega_AA_set, highlight=1)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.5 Visualize alignment",
        "code": "## some further adjustments if necessary\nAmeerega_aligned_end <- AdjustAlignment(Ameerega_aligned)\nAmeerega_AA_set_end <- AdjustAlignment(Ameerega_AA_set)\n\n## simple visualization of alignments\nBrowseSeqs(Ameerega_aligned_end)\nBrowseSeqs(Ameerega_AA_set_end)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.5 Visualize alignment",
        "code": "## to remove a sequence from DNAStringSet, AAStringSet, we need to make sure is the one that we want to eliminate\n## in this case is [18]\nstr(Ameerega_AA_set_end[18])\n#Formal class 'AAStringSet' [package \"Biostrings\"] with 5 slots\n#  ..@ pool           :Formal class 'SharedRaw_Pool' [package \"XVector\"] with 2 slots\n#  .. .. ..@ xp_list                    :List of 1\n#  .. .. .. ..$ :<externalptr> \n#  .. .. ..@ .link_to_cached_object_list:List of 1\n#  .. .. .. ..$ :<environment: 0x7fdf44ffa898> \n#  ..@ ranges         :Formal class 'GroupedIRanges' [package \"XVector\"] with 7 slots\n#  .. .. ..@ group          : int 1\n#  .. .. ..@ start          : int 9436\n#  .. .. ..@ width          : int 555\n#  .. .. ..@ NAMES          : chr \"DQ502832.1 Epipedobates braccatus isolate 537 cytochrome oxidase subunit I-like (COI) gene, partial sequence; mitochondrial\"\n#  .. .. ..@ elementType    : chr \"ANY\"\n#  .. .. ..@ elementMetadata: NULL\n#  .. .. ..@ metadata       : list()\n#  ..@ elementType    : chr \"AAString\"\n#  ..@ elementMetadata: NULL\n#  ..@ metadata       : list()\n\n## we remove AA seq 18 and adjust the alignment\nAmeerega_AA_set_clean <- Ameerega_AA_set[-18]\nAmeerega_AA_set_clean <- AdjustAlignment(Ameerega_AA_set_clean)\n\n## we make sure that it is not present in the alignment\nBrowseSeqs(Ameerega_AA_set_clean)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.6 Save alignment to file",
        "code": "# this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_11/sequences_example\")\n\n## We save the nucleotide alignment\nwriteXStringSet(Ameerega_aligned_end, file=\"Ameerega_aligned_end.fasta\", format=\"fasta\")\nwriteXStringSet(Ameerega_AA_set_clean, file=\"Ameerega_AA_aligned_end.fasta\", format=\"fasta\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.7 Concatenate and align several markers",
        "code": "## make sure rentrez is loaded\nrequire(rentrez)\n\n## sequences for of all using a loop and list to store each genus CYTB sequences\n\nmy_genus <- c(\"Ameerega\", \"Colostethus\", \"Epipedobates\", \"Silverstoneia\", \"Leucostethus\")\n\n## loop for CYTB\n\ncollect_CYTB_list_seqs <- list()\n\nfor (i in 1:length(my_genus)) {\n\none_genus_CYTB <- paste0(my_genus[i], \"[Organism] AND CYTB[Gene]\")\none_genus_seq_IDs <- entrez_search(db=\"nuccore\", term= one_genus_CYTB )\none_genus_seq_fasta <- entrez_fetch(db=\"nuccore\", id=one_genus_seq_IDs$ids, rettype=\"fasta\")\n\n## collect sequences in list\n\ncollect_CYTB_list_seqs[[i]] <- one_genus_seq_fasta\n\n## visualize the collected sequences\n\ncat(\"these are CYTB sequences from genus:\", my_genus[i], \"\\n\")\nSys.sleep(1)\ncat(collect_CYTB_list_seqs[[i]])\n                              }\n\n## loop for COI\n\ncollect_COI_list_seqs <- list()\n\nfor (i in 1:length(my_genus)) {\n\none_genus_COI <- paste0(my_genus[i], \"[Organism] AND COI[Gene]\")\none_genus_seq_IDs <- entrez_search(db=\"nuccore\", term= one_genus_COI )\none_genus_seq_fasta <- entrez_fetch(db=\"nuccore\", id=one_genus_seq_IDs$ids, rettype=\"fasta\")\n\n## collect sequences in list\n\ncollect_COI_list_seqs[[i]] <- one_genus_seq_fasta\n\n## visualize the collected sequences\n\ncat(\"these are COI sequences from genus:\", my_genus[i], \"\\n\")\nSys.sleep(1)\ncat(collect_COI_list_seqs[[i]])\n                              }"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.7 Concatenate and align several markers",
        "code": "## visualize sequences in console \n# \"Ameerega\"\ncat(collect_CYTB_list_seqs[[1]])\ncat(collect_COI_list_seqs[[1]])\n\n# \"Colostethus\"\ncat(collect_CYTB_list_seqs[[2]])\ncat(collect_COI_list_seqs[[2]])\n\n# \"Epipedobates\"\ncat(collect_CYTB_list_seqs[[3]])\ncat(collect_COI_list_seqs[[3]])\n\n# \"Silverstoneia\"\ncat(collect_CYTB_list_seqs[[4]])\ncat(collect_COI_list_seqs[[4]])\n\n# \"Leucostethus\"\ncat(collect_CYTB_list_seqs[[5]])\ncat(collect_COI_list_seqs[[5]])\n\n\n## build vectors before a dataframe\n\ncollected_list <- list(\n    data.frame(taxa = \"Ameerega_bilinguis\", CYTB = \"AF128559.1\", COX = \"MW042030.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Ameerega_hahneli\", CYTB = \"HQ290575\", COX = \"MW042031.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Ameerega_parvula\", CYTB = \"HQ290576.1\", COX = \"MW042032.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Ameerega_braccata\", CYTB = \"DQ502556.1\", COX = \"KU494333.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Ameerega_trivittata\", CYTB = \"HQ290579.1\", COX = \"DQ502903.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Ameerega_silverstonei\", CYTB = \"DQ523154.1\", COX = \"DQ502851.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Colostethus_panamansis\", CYTB = \"HQ290546.1\", COX = \"KC129189.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Colostethus_pratti\", CYTB = \"HQ290547.1\", COX = \"KF807016.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Epipedobates_boulengeri\", CYTB = \"HQ290574.1\", COX = \"MW042034.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Epipedobates_machalilla\", CYTB = \"HQ290542.1\", COX = \"MW042036.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Silverstoneia_flotator\", CYTB = \"HQ290537.1\", COX = \"MW042039.1\", stringsAsFactors = FALSE),\n    data.frame(taxa = \"Leucostethus_fugax\", CYTB = NA, COX = \"MW042037.1\", stringsAsFactors = FALSE))\n\n## build a dataframe\ncollected_df <- do.call(rbind, collected_list)\ncollected_df\n#                      taxa       CYTB        COX\n#1       Ameerega_bilinguis AF128559.1 MW042030.1\n#2         Ameerega_hahneli   HQ290575 MW042031.1\n#3         Ameerega_parvula HQ290576.1 MW042032.1\n#4        Ameerega_braccata DQ502556.1 KU494333.1\n#5      Ameerega_trivittata HQ290579.1 DQ502903.1\n#6    Ameerega_silverstonei DQ523154.1 DQ502851.1\n#7   Colostethus_panamansis HQ290546.1 KC129189.1\n#8       Colostethus_pratti HQ290547.1 KF807016.1\n#9  Epipedobates_boulengeri HQ290574.1 MW042034.1\n#10 Epipedobates_machalilla HQ290542.1 MW042036.1\n#11  Silverstoneia_flotator HQ290537.1 MW042039.1\n#12      Leucostethus_fugax       <NA> MW042037.1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.7 Concatenate and align several markers",
        "code": "## retrive sequences for each taxon\n\ncollected_CYTB_seqs <- character()\ncollected_COI_seqs <- character()\n\n## start of loop\n\nfor(i in 1:nrow(collected_df)) {\n# i <- 12\none_taxon_name <- collected_df[i,\"taxa\"]\n\n# retrieve sequences\n\nif(!is.na(collected_df[i,\"CYTB\"])) {\none_taxon_CYTB <- entrez_fetch(db=\"nuccore\", id=collected_df[i,\"CYTB\"], rettype=\"fasta\")\n                                   } else { one_taxon_CYTB <- \"--------\"}\n\nif(!is.na(collected_df[i,\"COX\"])) {\none_taxon_COI <- entrez_fetch(db=\"nuccore\", id=collected_df[i,\"COX\"], rettype=\"fasta\")\n                                  } else { one_taxon_COI <- \"--------\"}\n    \n# create a common name, split sequence vecto by first \\n\none_taxon_CYTB_1 <-  unlist(strsplit(one_taxon_CYTB, split=\"\\n\", perl=TRUE))\none_taxon_CYTB_1\n#[1] \">AF128559.1 Epipedobates bilinguis cytochrome b (cytb) gene, partial cds; mitochondrial gene for mitochondrial product\"\n#[2] \"CTTCTAGGTCTATGTCTTATTGCCCAAATCGCTACAGGCCTTTTTCTTGCCATACACTATACTGCTGATA\"                                                \n#[3] \"CTTCTATAGCTTTTTCCTCTCTAGCCCATATTTGCCGAGATGTCAACAATGGCTGACTTCTTCGTAATCT\"                                                \n#[4] \"TCACGCTAACGGAGCCTCATTCTTCTTCATTTGTATTTATCTTCATATTGGCCGAGGAATATACTATGGA\"                                                \n#[5] \"TCCTTTTTATTTAAAGAAACATGAAACATTGGAGTAATTTTATTATTTTTAGTTATAGCCAC\"\n#[6] \"\"                                                         \n\n# we want to create a common name, so we will replace the first line and concatenate all others\none_taxon_CYTB_2 <- paste0(one_taxon_CYTB_1[2:length(one_taxon_CYTB_1)], collapse =\"\")\none_taxon_CYTB_2\n#[1] \"CTTCTAGGTCTATGTCTTATTGCCCAAATCGCTACAGGCCTTTTTCTTGCCATACACTATACTGCTGATACTTCTATAGCTTTTTCCTCTCTAGCCCATATTTGCCGAGATGTCAACAATGGCTGACTTCTTCGTAATCTTCACGCTAACGGAGCCTCATTCTTCTTCATTTGTATTTATCTTCATATTGGCCGAGGAATATACTATGGATCCTTTTTATTTAAAGAAACATGAAACATTGGAGTAATTTTATTATTTTTAGTTATAGCCAC\"\n\n#we will vector for sequences\none_taxon_CYTB_3 <- paste0(\">\",one_taxon_name,\"\\n\",one_taxon_CYTB_2,\"\\n\\n\", sep=\"\")\ncat(one_taxon_CYTB_3)\n#>Ameerega_bilinguis\n#CTTCTAGGTCTATGTCTTATTGCCCAAATCGCTACAGGCCTTTTTCTTGCCATACACTATACTGCTGATACTTCTATAGCTTTTTCCTCTCTAGCCCATATTTGCCGAGATGTCAACAATGGCTGACTTCTTCGTAATCTTCACGCTAACGGAGCCTCATTCTTCTTCATTTGTATTTATCTTCATATTGGCCGAGGAATATACTATGGATCCTTTTTATTTAAAGAAACATGAAACATTGGAGTAATTTTATTATTTTTAGTTATAGCCAC\ncollected_CYTB_seqs[i] <- one_taxon_CYTB_3\n\ncat(\"\\n\\n\")\n\n## for COI\n\none_taxon_COI_1 <-  unlist(strsplit(one_taxon_COI, split=\"\\n\", perl=TRUE))\none_taxon_COI_2 <- paste0(one_taxon_COI_1[2:length(one_taxon_COI_1)], collapse =\"\")\none_taxon_COI_3 <- paste0(\">\",one_taxon_name,\"\\n\",one_taxon_COI_2,\"\\n\\n\", sep=\"\")\ncat(one_taxon_COI_3)\n#>Ameerega_bilinguis\n#GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTTAGCCTTTTAATTCGAGCCGAATTAAGCCAGCCCGGGTCCTTACTAGGCGATGACCAGATCTACAACGTTATTGTTACCGCCCATGCTTTCGTTATAATCTTTTTTATAGTAATGCCAATTCTAATCGGTGGCTTTGGGAATTGATTAGTGCCCCTAATAATTGGAGCCCCAGACATAGCTTTTCCCCGAATAAACAATATGAGCTTTTGGCTTCTTCCCCCCTCTTTCCTACTACTCCTAGCATCCGCAGGCGTTGAAGCAGGCGCCGGTACTGGCTGAACTGTGTACCCTCCCCTTGCAGGCAACCTAGCTCATGCTGGCCCATCAGTTGATTTAACTATTTTTTCACTTCATCTCGCCGGTGTTTCTTCTATTCTAGGGGCAATTAACTTTATTACAACAACCTTAAACATAAAACCCCCTTCATTAACACAATATCAAACCCCATTATTTGTCTGATCTGTATTAATTACTGCAGTCCTTCTTCTTCTCTCCCTCCCAGTTCTGGCTGCCGGAATCACTATACTCTTGACTGACCGAAACCTAAACACCACCTTCTTTGACCCAGCAGGTGGAGGCGACCCTGTCCTGTACCAACACCTGTTCTGATTCTTTGGTCACCCCGAAGTCTACATCCTTATCCTGCCTGGATTTGGTATCATCTCCCATGTTGTCACATTCTACTCTAGCAAAAAAGAACCCTTCGGCTATATAGGAATAGTCTGAGCTATAATATCGATTGGTCTCCTAGGTTTCATTGTTTGAGCTCACCACATATTCACAACAGACCTTAATGTAGACACTCGAGCCTACTTTACCTCAGCTACTATAATCATCGCTATCCCAACAGGTGTCAAAGTCTTTAGCTGACTTGCCACCATGCACGGAGGAATTATTAAATGAGACGCCGCCATATTATGGGCTCTCGGATTCATCTTTTTATTTACAGTTGGAGGACTAACTGGAATCGTTTTAGCCAACTCCTCTTTAGACATTGTTTTGCATGATACATATTATGTAGTAGCCCACTTTCACTACGTTCTTTCTATGGGGGCAGTATTTGCCATTATAGCCGGCTTCGTACACTGATTTCCTCTCTTTTCCGGATTTACCCTTCATGAAGCCTGAACAAAAATTCAATTTGGCGTCATATTTACCGGCGTAAATTTAACATTCTTCCCCCAGCATTTCTTAGGTCTCGCAGGCATGCCTCGACGTTATTCAGACTACCCTGACGCCTACACATTATGAAACACCGTTTCATCAATCGGCTCTTTAATCTCTCTAGTTGCAGTAATCATTATGATGTTTATCATTTGAGAAGCTTTCTCTTCCAAACGCCTACCTCTACCTGCAGAAATAACCCCAACTAATGTAGAATGATTATACGGATCCCCCCCACCTTACCACACTTTTGAGGAAGCCGTTTACTCCAAAATT\ncollected_COI_seqs[i] <- one_taxon_COI_3\n\n                           }\n\n## end of loop\n\n## collapse all collections before write a text file\ncollected_CYTB_seqs_con <- paste0(collected_CYTB_seqs, collapse=\"\")\ncollected_COI_seqs_con <- paste0(collected_COI_seqs, collapse=\"\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.7 Concatenate and align several markers",
        "code": "# this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_11/sequences_example\")\nwrite(collected_CYTB_seqs_con, \"my_collected_CYTB_fasta.txt\")\nwrite(collected_COI_seqs_con, \"my_collected_COI_fasta.txt\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.7 Concatenate and align several markers",
        "code": "## make sure that Biostrings is loaded\nrequire(Biostrings)\n\n## load CYTB\n\nCYTB_set <- readDNAStringSet(filepath = \"~/Desktop/Teach_R/my_working_directory/my_collected_CYTB_fasta.txt\", \n                                         format = \"fasta\")\nCYTB_set\n#A DNAStringSet instance of length 12\n#     width seq                                                                                                                  names               \n# [1]   272 CTTCTAGGTCTATGTCTTATTGCCCAAATCGCTACAGGCCTTTTTCTTGCCATACAC...TTATTTAAAGAAACATGAAACATTGGAGTAATTTTATTATTTTTAGTTATAGCCAC Ameerega_bilinguis\n# [2]   690 GGCCTATGTTTAATTGCCCAAATCATCACAGGTCTCTTCCTAGCCATACACTATACA...TTCTCGGAGATCCAGATAATTTTACCCCAGCTAACCCCCTAGTCACCCCCCCTCAT Ameerega_hahneli\n# [3]   690 GGCTTATGTCTAATTGCTCAAATCATTACAGGTCTTTTTCTAGCTATACATTATACA...TTCTCGGAGATCCAGACAATTTCACCCCAGCTAACCCCCTAGTCACCCCCCCTCAC Ameerega_parvula\n# [4]   385 AACACACCCCGCTCTAAAAATTATCAACAACTCATTCATTGACCTTCCATCCCCTGC...GCGTGATTCTTCTATTTTTAGTAATAGCCACCGCCTTCGTCGGCTATGTCCTCCCT Ameerega_braccata\n# [5]   690 GGCCTCTGCCTAATCGCCCAGATCATCACAGGCCTCTTCTTAGCTATACACTACACA...TTCTCGGAGACCCAGACAATTTCACCCCCGCTAACCCCCTGGTCACCCCACCTCAC Ameerega_trivittata\n# ...   ... ...\n# [8]   690 GGCCTCTGCCTTATTATCCAGATTGTCACTGGCCTTTTCCTAGCTATGCACTATACA...TCTTGGGCGACCCAGACAACTTCACCCCAGCTAACCCCCTAGTTACTCCCCCCCAC Colostethus_pratti\n# [9]   690 GGTCTATGTCTTATTGCCCAAATCGCTACAGGACTTTTTCTTGCTATACACTATACT...TTTTAGGAGACCCAGACAACTTCACCCCTGCTAACCCTCTAGTCACCCCTCCTCAT Epipedobates_boul...\n#[10]   690 GGCCTATGTCTTATTGCCCAAATCGCTACAGGTCTTTTTCTTGCCATACACTATACT...TCCTAGGAGATCCAGACAACTTCACCCCTGCCAACCCTTTAGTCACCCCTCCTCAC Epipedobates_mach...\n#[11]   690 GGCCTTTGCCTCATTGCCCAAATTGCCACAGGCCTTTTTTTAGCTATACACTACACC...TTCTAGGCGACCCAGACAACTTCACCCCAGCTAATCCCCTAGTAACCCCACCACAC Silverstoneia_flo...\n#[12]    10 NA--------\n\n\n## NOTICE: for alignment, we need to remove any gap of missing gaps. In this case sequence [12] needs to be removed.\nCYTB_set <- CYTB_set[-12]\n\n## load COI\n\nCOI_set <- readDNAStringSet(filepath = \"~/Desktop/Teach_R/my_working_directory/my_collected_COI_fasta.txt\", \n                                         format = \"fasta\")\nCOI_set\n#A DNAStringSet instance of length 12\n#     width seq                                                                                                                  names               \n# [1]  1539 GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATAC...TATACGGATCCCCCCCACCTTACCACACTTTTGAGGAAGCCGTTTACTCCAAAATT Ameerega_bilinguis\n# [2]  1539 GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGACATTGGAACCTTATAT...TGTACGGATCCCCCCCTCCCTACCATACATTTGAAGAAGCCGTTTATTCCAAAATT Ameerega_hahneli\n# [3]  1539 GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGATATTGGAACCTTATAC...TATACGGGTCTCCCCCACCTTATCACACATTTGAGGAAGCCGTTTACTCCAAAATT Ameerega_parvula\n# [4]   647 GAACTTTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTCAGCC...GTAACTTAAATACCACCTTCTTTGACCCAGCAGGGGGAGGTGACCCTGTTCTATAC Ameerega_braccata\n# [5]   658 AACTCTATACCTAGTGTTTGGGGCATGAGCAGGCATAGTCGGCACTGCTCTTAGTCT...CCACTTTCTTTGACCCAGCAGGGGGAGGCGACCCCGTCCTGTACCAACACCTGTTC Ameerega_trivittata\n# ...   ... ...\n# [8]   658 AACTTTATACCTTGTATTTGGGGCATGGGCCGGAATAGTCGGAACCGCCCTAAGCCT...CTACTTTCTTTGACCCGGCCGGCGGAGGTGACCCTGTTCTCTACCAACATCTCTTT Colostethus_pratti\n# [9]  1539 GTGATAATTACCCGATGATTATTTTCCACAAACCATAAAGATATTGGAACCCTATAT...TATATGGCTCCCCTCCTCCTTACCACACATTTGAGGAAGCCGTTTATTCTAAAGTA Epipedobates_boul...\n#[10]  1539 GTGATAATTACCCGATGATTATTCTCCACAAACCATAAAGATATCGGAACCCTATAT...TATATGGCTCCCCTCCTCCTTACCACACATTCGAGGAAGCTGTTTATTCTAAAGTA Epipedobates_mach...\n#[11]  1539 GTGATAATTACCCGATGATTATTTTCTACAAACCACAAAGACATTGGAACTTTATAT...TGTATGGATCACCACCACCATATCACACGTTTGAAGAAGCTGTTTATTCTAAAATT Silverstoneia_flo...\n#[12]  1539 GTGATAATTACCCGATGATTATTTTCCACAAACCACAAAGACATTGGAACCCTATAC...TATACGGAACCCCTCCCCCTTATCACACATTTGAAGAAGCTGTTTACTCCAAAATT Leucostethus_fugax"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.7 Concatenate and align several markers",
        "code": "## make sure that DECIPHER is loaded\nrequire(DECIPHER)\n\n## CYTB alignment and further adjustments if necessary\nCYTB_aligned <- AlignSeqs(CYTB_set)\nCYTB_aligned <- AdjustAlignment(CYTB_aligned)\nCYTB_aligned\n#A DNAStringSet instance of length 11\n#     width seq                                                                                                                  names               \n# [1]   944 ---------------------------------------------------------...-------------------------------------------------------- Ameerega_bilinguis\n# [2]   944 ---------------------------------------------------------...-------------------------------------------------------- Ameerega_hahneli\n# [3]   944 ---------------------------------------------------------...-------------------------------------------------------- Ameerega_parvula\n# [4]   944 AACACACCCCGCTCTAAAAATTATCAACAACTCATTCATTGACCTTCCATCCCCTGC...-------------------------------------------------------- Ameerega_braccata\n# [5]   944 ---------------------------------------------------------...-------------------------------------------------------- Ameerega_trivittata\n# ...   ... ...\n# [7]   944 ---------------------------------------------------------...-------------------------------------------------------- Colostethus_panam...\n# [8]   944 ---------------------------------------------------------...-------------------------------------------------------- Colostethus_pratti\n# [9]   944 ---------------------------------------------------------...-------------------------------------------------------- Epipedobates_boul...\n#[10]   944 ---------------------------------------------------------...-------------------------------------------------------- Epipedobates_mach...\n#[11]   944 ---------------------------------------------------------...-------------------------------------------------------- Silverstoneia_flo...\n\n## check CYTB alignment\nBrowseSeqs(CYTB_aligned)\n\n## COI alignment and further adjustments if necessary\nCOI_aligned <- AlignSeqs(COI_set)\nCOI_aligned <- AdjustAlignment(COI_aligned)\nCOI_aligned\n#  A DNAStringSet instance of length 12\n#     width seq                                                                                                                  names               \n# [1]  1539 GTGATAATTACTCGATGATTATTTTCTACCAACCACAAAGACATCGGAACTTTATAC...TATACGGATCCCCCCCACCTTACCACACTTTTGAGGAAGCCGTTTACTCCAAAATT Ameerega_bilinguis\n# [2]  1539 GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGACATTGGAACCTTATAT...TGTACGGATCCCCCCCTCCCTACCATACATTTGAAGAAGCCGTTTATTCCAAAATT Ameerega_hahneli\n# [3]  1539 GTGATAATTACTCGATGATTATTTTCCACCAACCATAAAGATATTGGAACCTTATAC...TATACGGGTCTCCCCCACCTTATCACACATTTGAGGAAGCCGTTTACTCCAAAATT Ameerega_parvula\n# [4]  1539 ----------------------------------------------GAACTTTATAC...-------------------------------------------------------- Ameerega_braccata\n# [5]  1539 -----------------------------------------------AACTCTATAC...-------------------------------------------------------- Ameerega_trivittata\n# ...   ... ...\n# [8]  1539 -----------------------------------------------AACTTTATAC...-------------------------------------------------------- Colostethus_pratti\n# [9]  1539 GTGATAATTACCCGATGATTATTTTCCACAAACCATAAAGATATTGGAACCCTATAT...TATATGGCTCCCCTCCTCCTTACCACACATTTGAGGAAGCCGTTTATTCTAAAGTA Epipedobates_boul...\n#[10]  1539 GTGATAATTACCCGATGATTATTCTCCACAAACCATAAAGATATCGGAACCCTATAT...TATATGGCTCCCCTCCTCCTTACCACACATTCGAGGAAGCTGTTTATTCTAAAGTA Epipedobates_mach...\n#[11]  1539 GTGATAATTACCCGATGATTATTTTCTACAAACCACAAAGACATTGGAACTTTATAT...TGTATGGATCACCACCACCATATCACACGTTTGAAGAAGCTGTTTATTCTAAAATT Silverstoneia_flo...\n#[12]  1539 GTGATAATTACCCGATGATTATTTTCCACAAACCACAAAGACATTGGAACCCTATAC...TATACGGAACCCCTCCCCCTTATCACACATTTGAAGAAGCTGTTTACTCCAAAATT Leucostethus_fugax\n\n## check COI alignment\nBrowseSeqs(COI_aligned)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.8 Concatenate with data.table",
        "code": "## make sure that data.table is loaded\nrequire(data.table)\n\n## transform into matrices using data.table\n\nCYTB_aligned.dt<-data.table(as.matrix(CYTB_aligned), keep.rownames = TRUE)\nCOI_aligned.dt<-data.table(as.matrix(COI_aligned), keep.rownames = TRUE)\nCOI_CYTB.dt   <-merge(COI_aligned.dt, CYTB_aligned.dt, by=\"rn\", all=TRUE)\n\n## slightly modified from original, added arg \"x\"\nf_dowle <- function(dt, x) {     \n                na.replace = function(v,value=x) { v[is.na(v)] = value; v }\n                       for (i in names(dt))\n        eval(parse(text=paste(\"dt[,\",i,\":=na.replace(\",i,\")]\")))    }\n\n## use f_dowle() to replace NA for \"-\"\n\nf_dowle(COI_CYTB.dt, \"-\")\n\n## return to matrix\n\nCOI_CYTB <- apply(COI_CYTB.dt[ ,!\"rn\"], 1, paste, collapse=\"\")\n\n## Convert back to DNAStringSet and add back names\n\nCOI_CYTB_DT_path_set <- DNAStringSet(COI_CYTB)\nnames(COI_CYTB_DT_path_set) <- COI_CYTB.dt$rn\n\n## check COI_CYTB alignment\nBrowseSeqs(COI_CYTB_DT_path_set)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.9 Concatenate with Biostrings",
        "code": "## make sure that Biostrings is loaded\nrequire(Biostrings)\n\n## find what sequence (taxon) name is missing\nmissing_COI_taxon <- base::setdiff(names(CYTB_aligned),names(COI_aligned))\nmissing_COI_taxon\n#character(0)\nmissing_CYTB_taxon <- base::setdiff(names(COI_aligned),names(CYTB_aligned))\nmissing_CYTB_taxon\n#[1] \"Leucostethus_fugax\"\n\n## The sequence of \"Leucostethus_fugax\" is missing in CYTB matrix, we need add such sequence as gaps \"-\" to the aligned matrix.\nCYTB_aligned\n#A DNAStringSet instance of length 11\n#     width seq                                                                                                                  names               \n# [1]   944 ---------------------------------------------------------...-------------------------------------------------------- Ameerega_bilinguis\n# [2]   944 ---------------------------------------------------------...-------------------------------------------------------- Ameerega_hahneli\n# [3]   944 ---------------------------------------------------------...-------------------------------------------------------- Ameerega_parvula\n# [4]   944 AACACACCCCGCTCTAAAAATTATCAACAACTCATTCATTGACCTTCCATCCCCTGC...-------------------------------------------------------- Ameerega_braccata\n# [5]   944 ---------------------------------------------------------...-------------------------------------------------------- Ameerega_trivittata\n# ...   ... ...\n# [7]   944 ---------------------------------------------------------...-------------------------------------------------------- Colostethus_panam...\n# [8]   944 ---------------------------------------------------------...-------------------------------------------------------- Colostethus_pratti\n# [9]   944 ---------------------------------------------------------...-------------------------------------------------------- Epipedobates_boul...\n#[10]   944 ---------------------------------------------------------...-------------------------------------------------------- Epipedobates_mach...\n#[11]   944 ---------------------------------------------------------...-------------------------------------------------------- Silverstoneia_flo...\n\n## we notice that each aligned CYTB sequences has 944 characters, so we need to create a vector named Leucostethus_fugax with 944 \"-\".\n\nmissing_taxon_CYTB <- paste0(rep(\"-\",944), collapse =\"\")\nnames(missing_taxon_CYTB) <- \"Leucostethus_fugax\"\nmissing_taxon_CYTB_set <- DNAStringSet(missing_taxon_CYTB)\n\n## we add missing sequence\nCYTB_aligned_add <- CYTB_aligned\nnames_on_stringset <- names(CYTB_aligned_add)\nnames_on_stringset <- c(names_on_stringset, \"Leucostethus_fugax\")\n\n## append sequence at the [12] slots and add taxon name\n\nCYTB_aligned_add[12] <- missing_taxon_CYTB_set\n\n## change names\n\nnames(CYTB_aligned_add) <- names_on_stringset\n\n## Confirm that we do not have any more missing taxa (i.e., character(0))\n\nmissing_COI_taxon <- base::setdiff(names(CYTB_aligned_add),names(COI_aligned))\nmissing_COI_taxon\n#character(0)\n\nmissing_CYTB_taxon <- base::setdiff(names(COI_aligned),names(CYTB_aligned_add))\nmissing_CYTB_taxon\n#character(0)\n\n## IMPORTANT: to make concatenation, you have to make sure that the order of names in both COI and CYTB are the same\n\nCOI_aligned_order <- COI_aligned[order(names(COI_aligned), decreasing=FALSE)]\nCYTB_aligned_add_order <- CYTB_aligned_add[order(names(CYTB_aligned_add), decreasing=FALSE)]\n\n## Now, we can finally concatenate with xsact()\n\nCOI_CYTB_String_path_set <- xscat(COI_aligned_order,CYTB_aligned_add_order)\nnames(COI_CYTB_String_path_set) <- names(COI_aligned_order)\n\n## check COI_CYTB alignment\nBrowseSeqs(COI_CYTB_String_path_set )"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.9 Concatenate with Biostrings",
        "code": "# this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_11/sequences_example\")\nwriteXStringSet(COI_CYTB_DT_path_set, file=\"my_collected_COI_CYTB_DT_path_fasta.txt\", format=\"fasta\")\nwriteXStringSet(COI_CYTB_String_path_set, file=\"my_collected_COI_CYTB_String_path_fasta.txt\", format=\"fasta\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.10 Visualizing alignments in R",
        "code": "## installing the packages\ninstall.packages(\"yulab.utils\")\nif (!require(\"BiocManager\"))\n    install.packages(\"BiocManager\")\nBiocManager::install(\"ggmsa\")\nBiocManager::install(\"seqmagick\")\n\n## load packages including cowplot\nrequire(ggmsa)\nrequire(seqmagick)\nrequire(cowplot)\n\n## you need just to provide the fasta file that contains the alignment from DECIPHER (change path to your computer)\n## Notice: I have renamed the taxa to fit on the plot if called\n\nAA_alignment <- \"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/Ameerega_AA_aligned_end_renamed.fasta\"\n\n## we can plot the amino acid sequence from 1 to 300 residues. You can select any section of sites in your alignment.\n\nmy_aaplot_1 <- ggmsa(msa = AA_alignment,\n                 start = 1,\n                   end = 100,\n                  font = \"helvetical\",\n                 color = \"Chemistry_AA\",\n            char_width = 0.9)\n\n\nmy_aaplot_2 <- ggmsa(msa = AA_alignment,\n                 start = 101,\n                   end = 200,\n                  font = \"helvetical\",\n                 color = \"Chemistry_AA\",\n            char_width = 0.9)\n\nmy_aaplot_3 <- ggmsa(msa = AA_alignment,\n                 start = 201,\n                   end = 300,\n                  font = \"helvetical\",\n                 color = \"Chemistry_AA\",\n            char_width = 0.9)\n\n\n## we plot all using cowplot\n\nplot_grid(my_aaplot_1, \n          my_aaplot_2, \n          my_aaplot_3, \n          ncol = 1)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/sequence-alignments.html",
        "section": "Session 11 \u2013 Sequence Alignments",
        "subsection": "11.10 Visualizing alignments in R",
        "code": "## load packages including cowplot\nrequire(ggmsa)\nrequire(seqmagick)\nrequire(cowplot)\n\n## you need just to provide the fasta file that contains the alignment from DECIPHER (change path to your computer)\n\nnt_alignment <- \"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/Ameerega_aligned_end.fasta\"\n\n## we can plot the amino acid sequence from 1 to 600 residues. You can select any section of sites in your alignment.\n\nmy_aaplot_1 <- ggmsa(msa = nt_alignment,\n                 start = 1,\n                   end = 200,\n                  font = \"helvetical\",\n                 color = \"Shapely_NT\",\n            char_width = 0.3)\n\n\nmy_aaplot_2 <- ggmsa(msa = nt_alignment,\n                 start = 201,\n                   end = 400,\n                  font = \"helvetical\",\n                 color = \"Shapely_NT\",\n            char_width = 0.3)\n\nmy_aaplot_3 <- ggmsa(msa = nt_alignment,\n                 start = 401,\n                   end = 600,\n                  font = \"helvetical\",\n                 color = \"Shapely_NT\",\n            char_width = 0.3)\n\n\n## we plot all using cowplot\n\nplot_grid(my_aaplot_1, \n          my_aaplot_2, \n          my_aaplot_3, \n          ncol = 1)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.3 Installing and running iqtree2 in a PC",
        "code": "## this is an example of the commands that you need to input in the format for PCs\n[1] \"iqtree2  -s Ameerega_aligned_end.fasta     -m  MFP+MERGE  \""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.4 Loading the iqtree_runner_R function",
        "code": "## it requires to install these R packages\ninstall.packages(\"doParallel\")\ninstall.packages(\"ape\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.4 Loading the iqtree_runner_R function",
        "code": "## make sure that you have the required packages\nrequire(doParallel)\nrequire(ape)\n\n## iqtree_runner function copy text from here until END OF FUNCTION (find this below)\n\niqtree_runner_R <- function(input_alignment_file_user,\n                           iqtree_bin_location_user,\n                           run_iqtree_call_user = c(\"serial\",\"parallel\"),\n                           iqtree_quiet_user = FALSE,\n                           iqtree_redo_user = FALSE,\n                           iqtree_prefix_user = NULL,\n                           iqtree_input_model_m_user = NULL,\n                           iqtree_mtree_user = FALSE,\n                           iqtree_sequence_type_st_user = NULL,\n                           iqtree_UFBoot_B_user = NULL,\n                           iqtree_UFBoot_bnni_user = TRUE,\n                           iqtree_nonpara_boot_b_user = NULL,\n                           iqtree_SHaLRT_alrt_user = NULL,\n                           iqtree_multicore_T_user = NULL,\n                           iqtree_maxcores_ntmax_user = NULL,\n                           iqtree_partition_user = NULL,\n                           iqtree_partition_if_by_position_user = TRUE,\n                           iqtree_partition_file_user = NULL,\n                           iqtree_chronogram_from_tree_file_user = NULL,\n                           iqtree_chronogram_mrca_bounds_user = NULL,\n                           iqtree_date_file_user = NULL,\n                           iqtree_pass_parameters_user = NULL){\n\n## require libraries\n\nrequire(doParallel)\nrequire(ape)\n\n############# input from user\n\n## sequence and tree arguments\n\ninput_files <- input_alignment_file_user \n\n# iqtree location\n\niqtree_bin_location <- iqtree_bin_location_user\n\n# serial or parallel calls\n\nrun_iqtree <- run_iqtree_call_user\n\niqtree_quiet <- iqtree_quiet_user\n\n####### basic iqtree parameters\n\n# overwrite all previous output: -redo\n\niqtree_redo <- iqtree_redo_user\n\n# add prefi: --prefix\n\niqtree_prefix <- iqtree_prefix_user\n\n# add model: -m\n\niqtree_model <- iqtree_input_model_m_user\n\n# increase accuracy: -mtree\n\niqtree_mtree <- iqtree_mtree_user\n\n# Specify sequence type as either of NULL (autodetect) DNA, AA, BIN, MORPH, CODON or NT2AA for DNA\n\niqtree_st <- iqtree_sequence_type_st_user\n\n# UFBoot mode: -B 1000\n\niqtree_UFBoot_B <- iqtree_UFBoot_B_user\n\n# Red_impact_UFBoot\n\niqtree_UFBoot_bnni <- iqtree_UFBoot_bnni_user\n\n# nonparametric bootstrap -b 100\n\niqtree_nonpara_b <- iqtree_nonpara_boot_b_user\n\n# Assessing branch supports with single branch tests SH-like approximate likelihood ratio test: -alrt 1000\n\niqtree_alrt <- iqtree_SHaLRT_alrt_user\n\n# multicore -T AUTO -T 2\n\niqtree_multicore_T <- iqtree_multicore_T_user\n\n# maxcores -ntmax \n\niqtree_maxcores_ntmax <- iqtree_maxcores_ntmax_user\n\n##############       iqtree_partition_user\n\niqtree_partition <- iqtree_partition_user\ndo_by_codon_pos <- iqtree_partition_if_by_position_user\n\n\nif(!is.null(iqtree_partition)) {\n\n      iqtree_partition_matrix <- do.call(rbind,iqtree_partition)\n             partitions_names <- rownames(iqtree_partition_matrix)\n              type_partitions <- iqtree_partition_matrix[,1]\n                   start_part <- as.numeric(iqtree_partition_matrix[,2])\n                     end_part <- as.numeric(iqtree_partition_matrix[,3])\n                   codon_part <- iqtree_partition_matrix[,4]\n          iqtree_partition_df <- data.frame(partition_name = partitions_names, type = type_partitions, start = start_part, end = end_part, codon = codon_part, stringsAsFactors = FALSE)\nrownames(iqtree_partition_df) <- NULL\n\n# output file name\n\nout_part_file <- sub(\".*/\", \"\", input_files)\nout_part_file <- sub(\"[.]\", \"_\", out_part_file)\nout_part_file <- paste0(out_part_file,\"_partition.txt\")\n\n\nfor(i in 1:nrow(iqtree_partition_df)) {\n  # i <- 3\n   one_line <- paste0(iqtree_partition_df$type[i], \", \", iqtree_partition_df$partition_name[i], \" = \", \n                      iqtree_partition_df$start[i], \"-\", iqtree_partition_df$end[i])\n\nif(!is.na(iqtree_partition_df$codon[i])) {\n\n# do_by_codon_pos\n   if(do_by_codon_pos) {\n              pos1_start <- iqtree_partition_df$start[i]\n               pos1_name <- paste0(iqtree_partition_df$partition_name[i],\"_pos1\")\n              pos2_start <- iqtree_partition_df$start[i]+1\n               pos2_name <- paste0(iqtree_partition_df$partition_name[i],\"_pos2\")\n              pos3_start <- iqtree_partition_df$start[i]+2\n               pos3_name <- paste0(iqtree_partition_df$partition_name[i],\"_pos3\")\n\n   one_line <- paste0(iqtree_partition_df$type[i], \", \", pos1_name, \" = \", pos1_start, \"-\", iqtree_partition_df$end[i], \"\\\\\", iqtree_partition_df$codon[i], \"\\n\",\n                      iqtree_partition_df$type[i], \", \", pos2_name, \" = \", pos2_start, \"-\", iqtree_partition_df$end[i], \"\\\\\", iqtree_partition_df$codon[i], \"\\n\",\n                      iqtree_partition_df$type[i], \", \", pos3_name, \" = \", pos3_start, \"-\", iqtree_partition_df$end[i], \"\\\\\", iqtree_partition_df$codon[i], \"\\n\")\n                       }\n\n                                        }\n\n#     one_line <- paste0(one_line, \"\\\\\", iqtree_partition_df$codon[i]) }\n\ncat(one_line,file=out_part_file,sep=\"\\n\",append=TRUE)\n\n                                      }\n                                      rm(i)\n\niqtree_partition_files <- out_part_file \n\n                                         } else {\n\niqtree_partition_files <- iqtree_partition_file_user\n\n                                         }\n\n##############       chronogram_functions\n\niqtree_chronogram_from_tree <- iqtree_chronogram_from_tree_file_user\n\niqtree_mrca_bounds <- iqtree_chronogram_mrca_bounds_user\n\nif(!is.null(iqtree_mrca_bounds)) {\n\n# name for DATE_FILE\n\nout_part_file <- sub(\".*/\", \"\", input_files)\nout_part_file <- sub(\"[.]\", \"_\", out_part_file)\nout_date_file <- paste0(out_part_file,\"_dates.txt\")\n\n# build DATE_FILE\n\nn_total <- length(iqtree_mrca_bounds)\nn_constraints <- seq(1,by=2, to=n_total)\n\nfor(i in n_constraints) {\n\n# i <- 1\n\n   taxa_part <- paste0(iqtree_mrca_bounds[[i]], collapse=\",\")\n   date_part <- paste0(\"-\", iqtree_mrca_bounds[[i+1]])\n\n   one_line <- paste0(taxa_part, \" \", date_part)\n\n#     one_line <- paste0(one_line, \"\\\\\", iqtree_partition_df$codon[i]) }\n\ncat(one_line,file=out_date_file,sep=\"\\n\",append=TRUE)\n\n                                      }\n                                      rm(i)\n\niqtree_date_files <- out_date_file \n\n                                 } else {\n\niqtree_date_files <- iqtree_date_file_user\n\n                                         }\n\n# iq pass paramters\n\niqtree_pass <- iqtree_pass_parameters_user\n\n# get work directory to go back\n\nmaster_wd_directory <- getwd()\n\n\n## get iqtree path\n\npath_of_iqtree <- paste0(iqtree_bin_location)\n\n######     prepare iqtree commands\n\nlist_iqtree_scripts <- list()\nname_of_analyses_iqtree <- character()\n\ncounter <- 0\n\n\n   for(i in 1:length(input_files)) {\n      # i <- 1\n    one_alignment_file <- input_files[i]\n    counter <- counter + 1\n\n# simplify names\n\none_input_file <- sub(\".*/\", \"\", one_alignment_file)\n\n# prepare commands\n\nline_iqtree <- paste0(\"iqtree2  -s \", one_input_file, \"  \")\n\n# list of iqtre parameters\n\nlist_of_iqtree <- c(line_iqtree)\n\ncounter_2 <- 1\n\n# Specify sequence type as either of NULL (autodetect) DNA, AA, BIN, MORPH, CODON or NT2AA for DNA\n\nif(!is.null(iqtree_st)) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -st  \", iqtree_st, \"  \") \n   list_of_iqtree[counter_2] <- out_line\n                     }\n\n# add prefi: --prefix\n\nif(!is.null(iqtree_prefix)) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  --prefix  \", iqtree_prefix, \"  \") \n   list_of_iqtree[counter_2] <- out_line\n                     }\n\n# add model: -m\n\nif(!is.null(iqtree_model)) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -m  \", iqtree_model, \"  \") \n   list_of_iqtree[counter_2] <- out_line\n                     }\n\n# increase accuracy: -mtree\n\nif(iqtree_mtree) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -mtree  \") \n   list_of_iqtree[counter_2] <- out_line\n                     }\n\n# overwrite all previous output: -redo\n\nif(iqtree_redo) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -redo  \") \n   list_of_iqtree[counter_2] <- out_line\n                     }\n\n# add partition\n\nif(!is.null(iqtree_partition_files)) {counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -p  \", iqtree_partition_files[i]) \n   list_of_iqtree[counter_2] <- out_line\n\n                              }\n\n# add DATE_FILE\n\nif(is.null(iqtree_chronogram_from_tree)) {\n\nif(!is.null(iqtree_date_files)) {counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  --date  \", iqtree_date_files[i], ' --date-tip 0') \n   list_of_iqtree[counter_2] <- out_line\n\n                              }\n\n                                        }\n\n# make chronogram from tree\n\nif(!is.null(iqtree_chronogram_from_tree)) {counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  --date  \", iqtree_date_files[i], ' --date-tip 0', \" -te \", iqtree_chronogram_from_tree) \n   list_of_iqtree[counter_2] <- out_line\n\n                              }\n\n##### ultra fast bootstrap\n\n# UFBoot mode: -B 1000\n\nif(!is.null(iqtree_UFBoot_B)) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -B \", iqtree_UFBoot_B, \"  \") \n   list_of_iqtree[counter_2] <- out_line\n                     }\n\n# Red_impact_UFBoot\n\nif(!is.null(iqtree_UFBoot_B)) {\n         if(iqtree_UFBoot_bnni) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -bnni  \") \n   list_of_iqtree[counter_2] <- out_line\n                                }\n                              }\n\n##### non-parameteric bootstrap\n\n# nonparametric bootstrap -b 100\n\nif(!is.null(iqtree_nonpara_b)) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -b \", iqtree_nonpara_b, \"  \") \n   list_of_iqtree[counter_2] <- out_line\n                     }\n\n##### SH-like approximate likelihood ratio test\n\n# Assessing branch supports with single branch tests : -alrt 1000\n\nif(!is.null(iqtree_alrt)) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -alrt \", iqtree_alrt, \"  \") \n   list_of_iqtree[counter_2] <- out_line\n                     }\n\n### multicore\n\n# multicore -T AUTO -T 2\n\nif(!is.null(iqtree_multicore_T)) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\"  -T \", iqtree_multicore_T, \"  \") \n   list_of_iqtree[counter_2] <- out_line\n                     }\n\nif(!is.null(iqtree_multicore_T)) {\n          if(!is.null(iqtree_maxcores_ntmax)) {\n                                    counter_2 <- counter_2 + 1\n                                     out_line <- paste0(\"  -ntmax \", iqtree_maxcores_ntmax, \"  \") \n                    list_of_iqtree[counter_2] <- out_line\n                                              }\n                                  }\n\n\n### iqtree pass paramters\n\nif(!is.null(iqtree_pass)) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\" \", iqtree_pass, \"  \") \n   list_of_iqtree[counter_2] <- out_line\n                          }\n\n\n# quiet\n                        \nif(iqtree_quiet) { counter_2 <- counter_2 + 1\n                   out_line <- paste0(\" -quiet  \") \n   list_of_iqtree[counter_2] <- out_line\n                          }\n\n### all lines together\n\niqtree_out <- paste0(list_of_iqtree, collapse = \" \")\nprint(iqtree_out)\n\n  list_iqtree_scripts[[counter]] <- iqtree_out\nname_of_analyses_iqtree[counter] <- one_input_file\n\n                                  }\n                         rm(i)\n                       if(exists(\"counter\")){rm(counter)}\n                       if(exists(\"counter_2\")){rm(counter_2)}\n\n\n#####################################################################################\n#### open and run iqtree from R\n\n# create vector to export path -- export PATH=/opt/local/bin:/opt/local/sbin:$PATH\n\nexport_path_iqtree_bins <- normalizePath(iqtree_bin_location)\nexport_path_iqtree_vector <- paste0(\"export PATH=\",export_path_iqtree_bins,\":$PATH\")\n\n## iqtree execute function\n\nexecute_iqtree_terminal <- function(export_path_section = export_path_iqtree_vector, \n                                   iqtree_command, \n                                   intern = FALSE, \n                                    wait = FALSE){\n\nsystem(paste0(export_path_section, \"\\n\",\n                    iqtree_command, \"\\n\"), \n                                intern = intern, \n                                  wait = wait)\n                                                 }\n\n## run list elements with iqtree commands\n\n## serial\n# run_iqtree <- \"serial\"\n\nif(run_iqtree == \"serial\") {\n\ncat(\"\\n****** started serial analisis of: \", length(list_iqtree_scripts), \"\\n\" )\n\nfor(j in 1:length(list_iqtree_scripts)) {\n\ncat(\"***** iqtree analysis name: \",name_of_analyses_iqtree[j], \"\\n\")\ncat(\"***** iqtree commands: \", list_iqtree_scripts[[j]], \"\\n\")\n\nexecute_iqtree_terminal(export_path_section = export_path_iqtree_vector, \n                             iqtree_command =  list_iqtree_scripts[[j]], \n                                    intern = FALSE, \n                                      wait = TRUE)\ncat(\"***** DONE ***** \\n\")\n                                        }\n                                        rm(j)\n\n                           }\n\n\n### parallel\n# run_iqtree <- \"parallel\"\n\nif(run_iqtree == \"parallel\") {\n\ncat(\"\\n****** started parallel analisis of: \", length(list_iqtree_scripts), \"\\n\" )\nprint(name_of_analyses_iqtree)\n\nncores <- parallel::detectCores()\ncl <- makeCluster(ncores)\nregisterDoParallel(cl)\nforeach(iqtree_i=list_iqtree_scripts, .export = \"execute_iqtree_terminal\") %dopar% \n                               {execute_iqtree_terminal(iqtree_command=iqtree_i)}\nparallel::stopCluster(cl)\n\ncat(\"\\n ****** DONE ****** \\n\")\n\n                           }\n\n### to return to user grab treefile\n\niqtrees_vector <- list.files(pattern = \"\\\\.treefile$\", ignore.case=TRUE)\n\nlist_of_trees <- list()\n\nfor(i in 1:length(iqtrees_vector)) {list_of_trees[[i]] <- ape::read.tree(iqtrees_vector[i])}\nrm(i)\n\n### if chronograms\n\niqtree_chronograms <- list.files(pattern = \"\\\\.timetree.nex$\", ignore.case=TRUE)\n\nif(length(iqtree_chronograms) > 0) {\n\nfor(i in 1:length(iqtree_chronograms)) {\n                               one_chronogram <- ape::read.nexus(iqtree_chronograms[i])\n                                      n_trees <- length(list_of_trees)\n                   list_of_trees[[n_trees+1]] <- one_chronogram }\nrm(i)\n\n                                   }\n\n############ open and run iqtree from R: DONE\n\nsetwd(master_wd_directory)\n\ncat(\"\\n\\n *************         iqtree outfiles written to        ************* \\n\")\nprint(master_wd_directory)\n\nreturn(list_of_trees)\n\n                                           }\n##    END OF FUNCTION   "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.6 One marker and no partitions",
        "code": "## this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.6 One marker and no partitions",
        "code": "## copy the file Ameerega_aligned_end.fasta to your working directory test_iqtree_in_r\n## this is the path to that file and exclusive to your OWN COMPUTER change it accordingly\nmy_path_to_aligned_sequences <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/my_sequences_aligned/Ameerega_aligned_end.fasta\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.6 One marker and no partitions",
        "code": "## macOS: if you drag and drop the binary iqtree2\n\n~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/iqtree-2.3.2-macOS-arm/bin\n\n## this is exclusive to your OWN COMPUTER and we just need the path to the directory that contains iqtree2\n## Note: the diffecent from path above and the one below.\n\nmy_path_to_iqtree2 <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/iqtree-2.3.2-macOS-arm/bin\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.6 One marker and no partitions",
        "code": "## set up our working directory in the folder for our first iqtree run\n\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r\")\n\n## this folder has our sequence data or you just can copy and paste such file. Remember that these paths are exclusive to your OWN COMPUTER and we just need the path to the directory that contains iqtree2\n\nmy_path_to_aligned_sequences <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r/Ameerega_aligned_end.fasta\"\n\nmy_path_to_iqtree2 <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/iqtree-2.3.2-macOS-arm/bin\"\n\n## SIMPLE iqtree2 run \n\nCOI_simple_phylogeny <- iqtree_runner_R (input_alignment_file_user = my_path_to_aligned_sequences,\n                           iqtree_bin_location_user = my_path_to_iqtree2,\n                           run_iqtree_call_user = \"serial\",\n                           iqtree_input_model_m_user = \"MFP+MERGE\")\n\n\n## you will get this output on the console\n\n# [1] \"iqtree2  -s Ameerega_aligned_end.fasta     -m  MFP+MERGE  \"\n# \n# ****** started serial analisis of:  1 \n# ***** iqtree analysis name:  Ameerega_aligned_end.fasta \n# ***** iqtree commands:  iqtree2  -s Ameerega_aligned_end.fasta     -m  MFP+MERGE   \n# IQ-TREE multicore version 2.1.2 COVID-edition for Mac OS X 64-bit built Oct 22 2020\n# Developed by Bui Quang Minh, James Barbetti, Nguyen Lam Tung,\n# Olga Chernomor, Heiko Schmidt, Dominik Schrempf, Michael Woodhams.\n# \n# Host:    LFQSANTOSJ2016 (AVX2, FMA3, 8 GB RAM)\n# Command: iqtree2 -s Ameerega_aligned_end.fasta -m MFP+MERGE\n# Seed:    487027 (Using SPRNG - Scalable Parallel Random Number Generator)\n# Time:    Tue Feb 23 17:46:25 2021\n# Kernel:  AVX+FMA - 1 threads (4 CPU cores detected)\n# \n# HINT: Use -nt option to specify number of threads because your CPU has 4 cores!\n# HINT: -nt AUTO will automatically determine the best number of threads to use.\n# \n# Reading alignment file Ameerega_aligned_end.fasta ... Fasta format detected\n# Alignment most likely contains DNA/RNA sequences\n# Alignment has 24 sequences with 1539 columns, 452 distinct patterns\n# 378 parsimony-informative, 140 singleton sites, 1021 constant sites\n#             Gap/Ambiguity  Composition  p-value\n#    1  MW042032.1    0.00%    passed     91.59%\n#    2  MW042031.1    0.00%    passed     61.48%\n#    3  MW042030.1    0.00%    passed     81.11%\n#    4  KU494334.1   58.02%    passed     72.66%\n#    5  KU494333.1   57.96%    passed     99.83%\n#    6  KU494332.1   57.96%    passed     99.83%\n#    7  AF097506.1   66.21%    passed     51.07%\n#    8  DQ502932.1   57.24%    passed     90.55%\n#    9  DQ502929.1   57.24%    passed     55.70%\n#   10  DQ502922.1   57.24%    passed     84.11%\n#   11  DQ502920.1   57.24%    passed     33.21%\n#   12  DQ502903.1   57.24%    passed     51.16%\n#   13  DQ502902.1   57.24%    passed     65.03%\n#   14  DQ502901.1   57.24%    passed     48.46%\n#   15  DQ502851.1   57.24%    passed     94.07%\n#   16  DQ502849.1   57.24%    passed     33.21%\n#   17  DQ502848.1   57.24%    passed     29.31%\n#   18  DQ502832.1   57.31%    passed     91.59%\n#   19  DQ502831.1   57.24%    passed     93.67%\n#   20  DQ502825.1   57.24%    passed     60.02%\n#   21  MW042037.1    0.00%    passed     77.97%\n#   22  KR862889.1   57.50%    passed     41.02%\n#   23  MW042036.1    0.00%    failed      0.13%\n#   24  MW042039.1    0.00%    failed      0.57%\n# WARNING: 18 sequences contain more than 50% gaps/ambiguity\n# ****  TOTAL        43.41%  2 sequences failed composition chi2 test (p-value<5%; df=3)\n# NOTE: KU494332.1 is identical to KU494333.1 but kept for subsequent analysis\n# \n# \n# Create initial parsimony tree by phylogenetic likelihood library (PLL)... 0.003 seconds\n# Perform fast likelihood tree search using GTR+I+G model...\n# Estimate model parameters (epsilon = 5.000)\n# \n# WARNING: Estimated model parameters are at boundary that can cause numerical instability!\n# \n# Perform nearest neighbor interchange...\n# Estimate model parameters (epsilon = 1.000)\n# 1. Initial log-likelihood: -7191.031\n# Optimal log-likelihood: -7189.967\n# Rate parameters:  A-C: 7.98907  A-G: 64.12175  A-T: 11.66195  C-G: 1.43333  C-T: 100.00000  G-T: 1.00000\n# Base frequencies:  A: 0.240  C: 0.266  G: 0.172  T: 0.321\n# Proportion of invariable sites: 0.357\n# Gamma shape alpha: 0.388\n# Parameters optimization took 1 rounds (0.044 sec)\n# \n# WARNING: Estimated model parameters are at boundary that can cause numerical instability!\n# \n# Time for fast ML tree search: 0.322 seconds\n# \n# NOTE: ModelFinder requires 3 MB RAM!\n# ModelFinder will test up to 286 DNA models (sample size: 1539) ...\n#  No. Model         -LnL         df  AIC          AICc         BIC\n#   1  GTR+F         7870.984     53  15847.967    15851.822    16130.928\n#   2  GTR+F+I       7216.150     54  14540.301    14544.303    14828.601\n#   3  GTR+F+G4      7199.116     54  14506.232    14510.235    14794.532\n#   4  GTR+F+I+G4    7176.558     55  14463.117    14467.270    14756.755\n#   5  GTR+F+R2      7295.486     55  14700.971    14705.125    14994.610\n#   6  GTR+F+R3      7242.022     57  14598.044    14602.509    14902.361\n#   7  GTR+F+R4      7215.932     59  14549.863    14554.650    14864.858\n#   8  GTR+F+R5      7202.474     61  14526.949    14532.070    14852.621\n#   9  GTR+F+R6      7195.140     63  14516.279    14521.746    14852.629\n#  17  SYM+I+G4      7230.681     52  14565.361    14569.071    14842.984\n#  30  TVM+F+I+G4    7179.891     54  14467.782    14471.784    14756.081\n#  43  TVMe+I+G4     7265.512     51  14633.024    14636.590    14905.307\n#  56  TIM3+F+I+G4   7203.542     53  14513.085    14516.939    14796.046\n#  69  TIM3e+I+G4    7284.220     50  14668.440    14671.867    14935.384\n#  82  TIM2+F+I+G4   7177.515     53  14461.029    14464.884    14743.990\n#  95  TIM2e+I+G4    7233.907     50  14567.815    14571.242    14834.759\n# 108  TIM+F+I+G4    7202.565     53  14511.129    14514.984    14794.090\n# 121  TIMe+I+G4     7283.344     50  14666.689    14670.116    14933.633\n# 134  TPM3u+F+I+G4  7205.716     52  14515.433    14519.142    14793.055\n# 147  TPM3+F+I+G4   7205.716     52  14515.433    14519.142    14793.055\n# 160  TPM2u+F+I+G4  7181.001     52  14466.003    14469.712    14743.625\n# 173  TPM2+F+I+G4   7180.996     52  14465.992    14469.702    14743.614\n# 186  K3Pu+F+I+G4   7204.884     52  14513.768    14517.477    14791.390\n# 199  K3P+I+G4      7315.342     49  14728.684    14731.975    14990.290\n# 212  TN+F+I+G4     7204.352     52  14512.704    14516.413    14790.326\n# 225  TNe+I+G4      7286.452     49  14670.904    14674.195    14932.510\n# 238  HKY+F+I+G4    7206.672     51  14515.343    14518.910    14787.627\n# 251  K2P+I+G4      7318.616     48  14733.231    14736.388    14989.498\n# 264  F81+F+I+G4    7804.765     50  15709.531    15712.958    15976.475\n# 277  JC+I+G4       7964.515     47  16023.030    16026.056    16273.957\n# Akaike Information Criterion:           TIM2+F+I+G4\n# Corrected Akaike Information Criterion: TIM2+F+I+G4\n# Bayesian Information Criterion:         TPM2+F+I+G4\n# Best-fit model: TPM2+F+I+G4 chosen according to BIC\n# \n# All model information printed to Ameerega_aligned_end.fasta.model.gz\n# CPU time for ModelFinder: 6.355 seconds (0h:0m:6s)\n# Wall-clock time for ModelFinder: 6.536 seconds (0h:0m:6s)\n# \n# NOTE: 1 MB RAM (0 GB) is required!\n# Estimate model parameters (epsilon = 0.100)\n# Thoroughly optimizing +I+G parameters from 10 start values...\n# Init pinv, alpha: 0.000, 1.370 / Estimate: 0.000, 0.166 / LogL: -7202.724\n# Init pinv, alpha: 0.074, 1.370 / Estimate: 0.071, 0.192 / LogL: -7203.417\n# Init pinv, alpha: 0.147, 1.370 / Estimate: 0.149, 0.227 / LogL: -7203.178\n# Init pinv, alpha: 0.221, 1.370 / Estimate: 0.592, 1.298 / LogL: -7181.054\n# Init pinv, alpha: 0.295, 1.370 / Estimate: 0.593, 1.312 / LogL: -7181.038\n# Init pinv, alpha: 0.369, 1.370 / Estimate: 0.592, 1.300 / LogL: -7181.052\n# Init pinv, alpha: 0.442, 1.370 / Estimate: 0.593, 1.311 / LogL: -7181.038\n# Init pinv, alpha: 0.516, 1.370 / Estimate: 0.593, 1.314 / LogL: -7181.034\n# Init pinv, alpha: 0.590, 1.370 / Estimate: 0.593, 1.324 / LogL: -7181.039\n# Init pinv, alpha: 0.663, 1.370 / Estimate: 0.603, 1.476 / LogL: -7181.034\n# Optimal pinv,alpha: 0.593, 1.314 / LogL: -7181.034\n# \n# Parameters optimization took 2.390 sec\n# \n# WARNING: Estimated model parameters are at boundary that can cause numerical instability!\n# \n# Computing ML distances based on estimated model parameters...\n# Computing ML distances took 0.013737 sec (of wall-clock time) 0.013278 sec(of CPU time)\n# Computing RapidNJ tree took 0.000465 sec (of wall-clock time) 0.000218 sec (of CPU time)\n# Log-likelihood of RapidNJ tree: -7193.279\n# --------------------------------------------------------------------\n# |             INITIALIZING CANDIDATE TREE SET                      |\n# --------------------------------------------------------------------\n# Generating 98 parsimony trees... 0.182 second\n# Computing log-likelihood of 98 initial trees ... 0.260 seconds\n# Current best score: -7181.034\n# \n# Do NNI search on 20 best initial trees\n# Estimate model parameters (epsilon = 0.100)\n# \n# WARNING: Estimated model parameters are at boundary that can cause numerical instability!\n# \n# BETTER TREE FOUND at iteration 1: -7181.009\n# Estimate model parameters (epsilon = 0.100)\n# \n# WARNING: Estimated model parameters are at boundary that can cause numerical instability!\n# \n# BETTER TREE FOUND at iteration 3: -7179.089\n# BETTER TREE FOUND at iteration 6: -7179.089\n# Estimate model parameters (epsilon = 0.100)\n# \n# WARNING: Estimated model parameters are at boundary that can cause numerical instability!\n# \n# BETTER TREE FOUND at iteration 7: -7176.557\n# Iteration 10 / LogL: -7178.385 / Time: 0h:0m:3s\n# Estimate model parameters (epsilon = 0.100)\n# \n# WARNING: Estimated model parameters are at boundary that can cause numerical instability!\n# \n# BETTER TREE FOUND at iteration 11: -7176.259\n# Estimate model parameters (epsilon = 0.100)\n# \n# WARNING: Estimated model parameters are at boundary that can cause numerical instability!\n# \n# BETTER TREE FOUND at iteration 13: -7175.959\n# Iteration 20 / LogL: -7176.267 / Time: 0h:0m:3s\n# Finish initializing candidate tree set (16)\n# Current best tree score: -7175.959 / CPU time: 1.545\n# Number of iterations: 20\n# --------------------------------------------------------------------\n# |               OPTIMIZING CANDIDATE TREE SET                      |\n# --------------------------------------------------------------------\n# UPDATE BEST LOG-LIKELIHOOD: -7175.952\n# Iteration 30 / LogL: -7179.103 / Time: 0h:0m:4s (0h:0m:12s left)\n# Iteration 40 / LogL: -7176.262 / Time: 0h:0m:5s (0h:0m:9s left)\n# Iteration 50 / LogL: -7175.952 / Time: 0h:0m:5s (0h:0m:7s left)\n# Iteration 60 / LogL: -7176.560 / Time: 0h:0m:6s (0h:0m:5s left)\n# Iteration 70 / LogL: -7180.060 / Time: 0h:0m:6s (0h:0m:4s left)\n# Iteration 80 / LogL: -7176.560 / Time: 0h:0m:7s (0h:0m:3s left)\n# Iteration 90 / LogL: -7176.793 / Time: 0h:0m:7s (0h:0m:2s left)\n# UPDATE BEST LOG-LIKELIHOOD: -7175.950\n# UPDATE BEST LOG-LIKELIHOOD: -7175.950\n# Iteration 100 / LogL: -7175.950 / Time: 0h:0m:8s (0h:0m:1s left)\n# Iteration 110 / LogL: -7176.560 / Time: 0h:0m:8s (0h:0m:0s left)\n# TREE SEARCH COMPLETED AFTER 114 ITERATIONS / Time: 0h:0m:9s\n# \n# --------------------------------------------------------------------\n# |                    FINALIZING TREE SEARCH                        |\n# --------------------------------------------------------------------\n# Performs final model parameters optimization\n# Estimate model parameters (epsilon = 0.010)\n# 1. Initial log-likelihood: -7175.950\n# Optimal log-likelihood: -7175.948\n# Rate parameters:  A-C: 11.77863  A-G: 100.00000  A-T: 11.77863  C-G: 1.00000  C-T: 100.00000  G-T: 1.00000\n# Base frequencies:  A: 0.240  C: 0.266  G: 0.172  T: 0.321\n# Proportion of invariable sites: 0.596\n# Gamma shape alpha: 1.312\n# Parameters optimization took 1 rounds (0.011 sec)\n# \n# WARNING: Estimated model parameters are at boundary that can cause numerical instability!\n# \n# BEST SCORE FOUND : -7175.948\n# Total tree length: 2.452\n# \n# Total number of iterations: 114\n# CPU time used for tree search: 6.683 sec (0h:0m:6s)\n# Wall-clock time used for tree search: 6.730 sec (0h:0m:6s)\n# Total CPU time used: 9.078 sec (0h:0m:9s)\n# Total wall-clock time used: 9.182 sec (0h:0m:9s)\n# \n# Analysis results written to: \n#   IQ-TREE report:                Ameerega_aligned_end.fasta.iqtree\n#   Maximum-likelihood tree:       Ameerega_aligned_end.fasta.treefile\n#   Likelihood distances:          Ameerega_aligned_end.fasta.mldist\n#   Screen log file:               Ameerega_aligned_end.fasta.log\n# \n# Date and Time: Tue Feb 23 17:46:41 2021\n# #***** DONE ***** \n# #\n# # *************         iqtree outfiles written to        ************* \n# #[1] \"/Users/santosj/Desktop/Teach_R/my_working_directory/my_phylogeny_1\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.6 One marker and no partitions",
        "code": "## content of output object.\nCOI_simple_phylogeny\n#[[1]]\n#\n#Phylogenetic tree with 24 tips and 22 internal nodes.\n#\n#Tip labels:\n#  MW042032.1, MW042031.1, DQ502932.1, DQ502902.1, DQ502922.1, DQ502929.1, ...\n#\n#Unrooted; includes branch lengths.\n\nCOI_simple_phylogeny[[1]]\n#Phylogenetic tree with 24 tips and 22 internal nodes.\n#\n#Tip labels:\n#  MW042032.1, MW042031.1, DQ502932.1, DQ502902.1, DQ502922.1, DQ502929.1, ...\n#\n#Unrooted; includes branch lengths.\n\n## you can plot this tree using ape\nplot(COI_simple_phylogeny[[1]])"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.7 One marker and with partitions",
        "code": "## set up our working directory in the folder for partition\n\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r_partition\")\n\n## this folder has our sequence data or you just can copy and paste such file. Remember that these paths are exclusive to your OWN COMPUTER and we just need the path to the directory that contains iqtree2\n\nmy_path_to_aligned_sequences2 <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r_boot/Ameerega_aligned_end.fasta\"\n\nmy_path_to_iqtree2 <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/iqtree-2.3.2-macOS-arm/bin\"\n\n## iqtree2 run with defined codon positions\nCOI_with_partitions_phylogeny <- iqtree_runner_R (input_alignment_file_user = my_path_to_aligned_sequences2,\n                           iqtree_bin_location_user = my_path_to_iqtree2,\n                           run_iqtree_call_user = \"serial\",\n                           iqtree_input_model_m_user = \"MFP+MERGE\",\n             iqtree_partition_user = list(COI = c(\"DNA\",1,1539,3)),\n                       iqtree_partition_if_by_position_user = TRUE)\n\n## see and plot the new tree\nCOI_with_partitions_phylogeny[[1]]\n#Phylogenetic tree with 24 tips and 22 internal nodes.\n#\n#Tip labels:\n#  MW042032.1, MW042031.1, DQ502932.1, DQ502902.1, DQ502922.1, DQ502929.1, ...\n#\n#Unrooted; includes branch lengths.\nplot(COI_with_partitions_phylogeny[[1]])"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.8 Bootstrap support",
        "code": "## set up our working directory in the folder for bootstraps\n\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r_boot\")\n\n## this folder has our sequence data or you just can copy and paste such file. Remember that these paths are exclusive to your OWN COMPUTER and we just need the path to the directory that contains iqtree2\n\nmy_path_to_aligned_sequences3 <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r_boot/Ameerega_aligned_end.fasta\"\n\nmy_path_to_iqtree2 <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/iqtree-2.3.2-macOS-arm/bin\"\n\n## iqtree2 run with defined codon positions and get 1000 bootstraps\nCOI_with_partitions_phylogeny_boot <- iqtree_runner_R (input_alignment_file_user = my_path_to_aligned_sequences3,\n                           iqtree_bin_location_user = my_path_to_iqtree2,\n                           run_iqtree_call_user = \"serial\",\n                           iqtree_input_model_m_user = \"GTR+F+I+G4\",\n                           iqtree_UFBoot_B_user = 1000,\n                           iqtree_UFBoot_bnni_user = TRUE,\n             iqtree_partition_user = list(COI = c(\"DNA\",1,1539,3)),\n                       iqtree_partition_if_by_position_user = TRUE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.8 Bootstrap support",
        "code": "## read our best tree 'COI_with_partitions_phylogeny': Ameerega_aligned_end_fasta_partition.txt.treefile\n\nrequire(ape)\nbest_tree <- ape::read.tree(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r_boot/Ameerega_aligned_end_fasta_partition.txt.treefile\")\nbest_tree\n#\n#Phylogenetic tree with 24 tips and 22 internal nodes.\n#\n#Tip labels:\n#  MW042032.1, MW042031.1, DQ502932.1, DQ502902.1, DQ502922.1, DQ502929.1, ...\n#Node labels:\n#  , 68, 32, 36, 30, 94, ...\n#\n#Unrooted; includes branch lengths.\n\n## read our bootstrap trees 'COI_with_partitions_phylogeny': Ameerega_aligned_end_fasta_partition.txt.ufboot\n\nboot_trees <- ape::read.tree(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r_boot/Ameerega_aligned_end_fasta_partition.txt.ufboot\")\nboot_trees\n# 1000 phylogenetic trees\n\n\n## calculate proportion of clades\n\nboot_support <- prop.clades(best_tree, boot_trees)\nboot_support\n#[1] 1000  679  319  356  295  937  882  771  582  911  986  947  389  945  894  999  988  209  592  985  833  964\n\n## adjust over 100%\nboot_support <- boot_support/10\nboot_support\n#[1] 100.0  67.9  31.9  35.6  29.5  93.7  88.2  77.1  58.2  91.1  98.6  94.7  38.9  94.5  89.4  99.9  98.8  20.9  59.2  98.5  83.3  96.4\n\n## plot bootstrap tree\n\nplot(best_tree)\ndrawSupportOnEdges(boot_support, frame = \"n\", cex=0.8, col= \"blue\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.9 Many markers and with partitions",
        "code": "## set up a new working directory by creating one; this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/my_working_directory/my_phylogeny_4\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.9 Many markers and with partitions",
        "code": "## copy the file my_collected_COI_CYTB_String_path_fasta to your working directory my_phylogeny_4\n## this is the path to that file and exclusive to your OWN COMPUTER change it accordingly\n\nmy_path_to_aligned_COI_CYTB_sequences <- \"~/Desktop/Teach_R/my_working_directory/my_phylogeny_4/my_collected_COI_CYTB_String_path_fasta.txt\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.9 Many markers and with partitions",
        "code": "## set up our working directory in the folder for COI_CYTB\n\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_COI_CYTB\")\n\n## this folder has our sequence data or you just can copy and paste such file. Remember that these paths are exclusive to your OWN COMPUTER and we just need the path to the directory that contains iqtree2\n\nmy_path_to_aligned_COI_CYTB_sequences <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_COI_CYTB/my_collected_COI_CYTB_String_path_fasta.txt\"\n\nmy_path_to_iqtree2 <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/iqtree-2.3.2-macOS-arm/bin\"\n\n\n## iqtree2 run with defined codon positions\nCOI_CYTB_with_partitions_phylogeny <- iqtree_runner_R (input_alignment_file_user = my_path_to_aligned_COI_CYTB_sequences,\n                           iqtree_bin_location_user = my_path_to_iqtree2,\n                           run_iqtree_call_user = \"serial\",\n                           iqtree_input_model_m_user = \"MFP+MERGE\",\n             iqtree_partition_user = list(COI = c(\"DNA\",1,1539,3),\n                                         CYTB = c(\"DNA\",1540,2483,3)),\n                       iqtree_partition_if_by_position_user = TRUE)\n\n## see and plot the new tree\nCOI_CYTB_with_partitions_phylogeny[[1]]\n\n#Phylogenetic tree with 12 tips and 10 internal nodes.\n#\n#Tip labels:\n#  Ameerega_bilinguis, Ameerega_braccata, Ameerega_hahneli, Ameerega_trivittata, Ameerega_silverstonei, Ameerega_parvula, ...\n#\n#Unrooted; includes branch lengths.\n\nplot(COI_CYTB_with_partitions_phylogeny[[1]])"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.11 Drawing phylogenetic trees with ggtree",
        "code": "## we will install ggtree\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"ggtree\")\nBiocManager::install(\"treeio\")\n\n## we also need treeio\n\nlibrary(ggtree)\nlibrary(treeio)\n\n## we can import a regular iqtree file \n## Notice: the extionsion is *.treefile\n\nmy_tree_file_path <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r/Ameerega_aligned_end.fasta.treefile\"\nmy_tree <- read.newick(my_tree_file_path)\nmy_tree\n#Phylogenetic tree with 24 tips and 22 internal nodes.\n#\n#Tip labels:\n#  MW042032.1, MW042031.1, DQ502932.1, DQ502902.1, DQ502922.1, DQ502929.1, ...\n#\n#Unrooted; includes branch lengths.\n\n\n## we can import the bootstrap summary of iqtree file \n## Notice: the extionsion is *txt.treefile\n\nmy_tree_boot_file_path <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/test_iqtree_in_r_boot/Ameerega_aligned_end_fasta_partition.txt.treefile\"\nmy_tree_boot <- read.iqtree(my_tree_boot_file_path)\nmy_tree_boot\n#'treedata' S4 object that stored information of\n#  '~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/my_phylogeny_3/Ameerega_aligned_end_fasta_partition.txt.treefile'.\n#\n#...@ phylo: \n#Phylogenetic tree with 24 tips and 22 internal nodes.\n#\n#Tip labels:\n#  MW042032.1, MW042031.1, DQ502932.1, DQ502902.1, DQ502922.1, DQ502929.1, ...\n#Node labels:\n#  , 69, 33, 48, 29, 94, ...\n#\n#Unrooted; includes branch lengths.\n#\n#with the following features available:\n#  'SH_aLRT',  'UFboot'."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.11 Drawing phylogenetic trees with ggtree",
        "code": "## make sure that we load cowplot\n\nrequire(cowplot)\n\n## save to an object a both tree\n\np1 <- ggtree(my_tree, color=\"blue\") + geom_tiplab(size=1.7, color='blue') + geom_treescale(fontsize=4, linesize=1, offset=1, color='blue')\np2 <- ggtree(my_tree_boot) + geom_tiplab(size=1.7) + geom_label2(aes(label=label, subset = !is.na(as.numeric(label)) & as.numeric(label) > 75), size = 3) + geom_treescale(fontsize=4, linesize=1, offset=1)\n\n## you can call each individually as\np1\np2\n\n## but you can use cowplot to print both side-by-side\n\ncowplot::plot_grid(p1, p2, ncol=2, labels = LETTERS[1:2])"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/estimating-phylogenetic-trees.html",
        "section": "Session 12 \u2013 Estimating Phylogenetic Trees",
        "subsection": "12.12 Save ggtree plots as PDF or PNG",
        "code": "## save ggtree as pdf and png\nggsave(\"regular_bootstrap_ggtree.pdf\")\nggsave(\"regular_bootstrap_ggtree.png\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/mining-from-a-reference-dataset.html",
        "section": "Session 13 \u2013 Mining from a reference dataset",
        "subsection": "13.2 Build a reference dataset",
        "code": "## this is an example to create a reference index\nmtcars_data <- mtcars\n\n## we need to create a indexing variable, so will use car names\nmtcars_names_vector <- rownames(mtcars_data)\nmtcars_names_vector\n#[1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"          \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"            \n# [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"            \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"         \n#[13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\"  \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"           \n#[19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"       \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"         \n#[25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"       \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"       \n#[31] \"Maserati Bora\"       \"Volvo 142E\"         \n\n## this vector has spaces (\" \") and dashes (-), these might cause problems with some analyses and functions, we will replace them with underscores \"_\"\nmtcars_names_vector <- gsub(\" \", \"_\", mtcars_names_vector)\nmtcars_names_vector <- gsub(\"-\", \"_\", mtcars_names_vector)\nmtcars_names_vector\n#[1] \"Mazda_RX4\"           \"Mazda_RX4_Wag\"       \"Datsun_710\"          \"Hornet_4_Drive\"      \"Hornet_Sportabout\"   \"Valiant\"            \n# [7] \"Duster_360\"          \"Merc_240D\"           \"Merc_230\"            \"Merc_280\"            \"Merc_280C\"           \"Merc_450SE\"         \n#[13] \"Merc_450SL\"          \"Merc_450SLC\"         \"Cadillac_Fleetwood\"  \"Lincoln_Continental\" \"Chrysler_Imperial\"   \"Fiat_128\"           \n#[19] \"Honda_Civic\"         \"Toyota_Corolla\"      \"Toyota_Corona\"       \"Dodge_Challenger\"    \"AMC_Javelin\"         \"Camaro_Z28\"         \n#[25] \"Pontiac_Firebird\"    \"Fiat_X1_9\"           \"Porsche_914_2\"       \"Lotus_Europa\"        \"Ford_Pantera_L\"      \"Ferrari_Dino\"       \n#[31] \"Maserati_Bora\"       \"Volvo_142E\"         \n\n## we can now add this vector as our indexing variable\nmtcars_data$my_index <- mtcars_names_vector\nhead(mtcars_data)\n#                   mpg cyl disp  hp drat    wt  qsec vs am gear carb          my_index\n#Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4         Mazda_RX4\n#Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4     Mazda_RX4_Wag\n#Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1        Datsun_710\n#Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1    Hornet_4_Drive\n#Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 Hornet_Sportabout\n#Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1           Valiant"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/mining-from-a-reference-dataset.html",
        "section": "Session 13 \u2013 Mining from a reference dataset",
        "subsection": "13.3 Build a sampling dataset",
        "code": "## we will start with four random vectors of the my_index variable to serve as what cars these friends have\n\nJoe_10_cars_vector <- sample(mtcars_data$my_index, 10, replace = TRUE)\nMoe_15_cars_vector <- sample(mtcars_data$my_index, 15, replace = TRUE)\nLarry_12_cars_vector <- sample(mtcars_data$my_index, 12, replace = TRUE)\nFred_20_cars_vector <- sample(mtcars_data$my_index, 20, replace = TRUE)\n\n## NOTICE: that this are random samples and each of you will get a different set.\n\n## we build a two-column data frame as follows by making a list of data frames and collect each one\n\nfriends_list <- list()\n\n## Joe\nJoe_df <- data.frame(my_index = Joe_10_cars_vector, stringsAsFactors = FALSE)\nJoe_df$friend <- \"Joe\"\nfriends_list[[1]] <- Joe_df\n\n## Moe\nMoe_df <- data.frame(my_index = Moe_15_cars_vector, stringsAsFactors = FALSE)\nMoe_df$friend <- \"Moe\"\nfriends_list[[2]] <- Moe_df\n\n## Larry\nLarry_df <- data.frame(my_index = Larry_12_cars_vector, stringsAsFactors = FALSE)\nLarry_df$friend <- \"Larry\"\nfriends_list[[3]] <- Larry_df\n\n## Fred\nFred_df <- data.frame(my_index = Fred_20_cars_vector, stringsAsFactors = FALSE)\nFred_df$friend <- \"Fred\"\nfriends_list[[4]] <- Fred_df\n\n## we rbind these data frames into one\n\nfriends_data <- do.call(rbind,friends_list)\nstr(friends_data)\n#'data.frame': 57 obs. of  2 variables:\n# $ my_index: chr  \"Porsche_914_2\" \"Dodge_Challenger\" \"Merc_450SE\" \"Fiat_X1_9\" ...\n# $ friend  : chr  \"Joe\" \"Joe\" \"Joe\" \"Joe\" ...\nhead(friends_data)\n#          my_index friend\n#1    Porsche_914_2    Joe\n#2 Dodge_Challenger    Joe\n#3       Merc_450SE    Joe\n#4        Fiat_X1_9    Joe\n#5        Merc_280C    Joe\n#6         Merc_230    Joe"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/mining-from-a-reference-dataset.html",
        "section": "Session 13 \u2013 Mining from a reference dataset",
        "subsection": "13.4 Extracting from reference dataset",
        "code": "## with reference data frame\n\nfriends_data_with_mtcars_data <- merge(friends_data, mtcars_data, by.x = \"my_index\")\nhead(friends_data_with_mtcars_data)\n#            my_index friend  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#1        AMC_Javelin   Fred 15.2   8  304 150 3.15 3.435 17.30  0  0    3    2\n#2        AMC_Javelin   Fred 15.2   8  304 150 3.15 3.435 17.30  0  0    3    2\n#3 Cadillac_Fleetwood  Larry 10.4   8  472 205 2.93 5.250 17.98  0  0    3    4\n#4 Cadillac_Fleetwood  Larry 10.4   8  472 205 2.93 5.250 17.98  0  0    3    4\n#5  Chrysler_Imperial  Larry 14.7   8  440 230 3.23 5.345 17.42  0  0    3    4\n#6         Datsun_710    Moe 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n\n## we can order by friend name\n\nfriends_data_with_mtcars_data_order <- friends_data_with_mtcars_data[order(friends_data_with_mtcars_data$friend),]\nhead(friends_data_with_mtcars_data_order)\n#       my_index friend  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#1   AMC_Javelin   Fred 15.2   8  304 150 3.15 3.435 17.30  0  0    3    2\n#2   AMC_Javelin   Fred 15.2   8  304 150 3.15 3.435 17.30  0  0    3    2\n#7    Datsun_710   Fred 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#8    Datsun_710   Fred 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#12   Duster_360   Fred 14.3   8  360 245 3.21 3.570 15.84  0  0    3    4\n#13 Ferrari_Dino   Fred 19.7   6  145 175 3.62 2.770 15.50  0  1    5    6"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/mining-from-a-reference-dataset.html",
        "section": "Session 13 \u2013 Mining from a reference dataset",
        "subsection": "13.4 Extracting from reference dataset",
        "code": "## We will split the large data frame into each friend\n\nlist_friends <- split(friends_data_with_mtcars_data_order, friends_data_with_mtcars_data_order$friend)\n\n## names on the lists\n\nnames(list_friends)\n#[1] \"Fred\"  \"Joe\"   \"Larry\" \"Moe\"  \n\n## fred\nfred_df <- list_friends[[1]]\nhead(fred_df)\n#       my_index friend  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#1   AMC_Javelin   Fred 15.2   8  304 150 3.15 3.435 17.30  0  0    3    2\n#2   AMC_Javelin   Fred 15.2   8  304 150 3.15 3.435 17.30  0  0    3    2\n#7    Datsun_710   Fred 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#8    Datsun_710   Fred 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#12   Duster_360   Fred 14.3   8  360 245 3.21 3.570 15.84  0  0    3    4\n#13 Ferrari_Dino   Fred 19.7   6  145 175 3.62 2.770 15.50  0  1    5    6\n\n## you can do the same as: fred_df <- subset(friends_data_with_mtcars_data_order, friend == \"Fred\")\n\njoe_df <- list_friends[[2]]\nlarry_df <- list_friends[[3]]\nmoe_df <- list_friends[[4]]"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/mining-from-a-reference-dataset.html",
        "section": "Session 13 \u2013 Mining from a reference dataset",
        "subsection": "13.4 Extracting from reference dataset",
        "code": "sum(fred_df$wt)\n#[1] 58.893\nsum(joe_df$wt)\n#[1] 30.205\nsum(larry_df$wt)\n#[1] 44.445\nsum(moe_df$wt)\n#[1] 44.445"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/mining-from-a-reference-dataset.html",
        "section": "Session 13 \u2013 Mining from a reference dataset",
        "subsection": "13.4 Extracting from reference dataset",
        "code": "sum(fred_df$hp)\n#[1] 2756\nsum(joe_df$hp)\n#[1] 1166\nsum(larry_df$hp)\n#[1] 1816\nsum(moe_df$hp)\n#[1] 1816"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/mining-from-a-reference-dataset.html",
        "section": "Session 13 \u2013 Mining from a reference dataset",
        "subsection": "13.5 Plots of the extracted data",
        "code": "## check ig ggplot2 is loaded\nrequire(ggplot2)\n\n## Boxplots with standard color\nfriends_hp_boxplot <- ggplot(friends_data_with_mtcars_data_order, aes(x=friend, y=hp, fill=friend)) + \n                       geom_boxplot(width=0.3) +\n                     labs(title=\"Friends car collection -- HP boxplots\", x=\"Friends\", y=\"hp\") +\n                     guides(fill=FALSE) +\n                     theme_minimal()\nfriends_hp_boxplot"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/mining-from-a-reference-dataset.html",
        "section": "Session 13 \u2013 Mining from a reference dataset",
        "subsection": "13.5 Plots of the extracted data",
        "code": "## Overlaid densities\nfriends_wt_plot_den <- ggplot(friends_data_with_mtcars_data_order, aes(x=wt, fill=friend)) +\n                    geom_density(alpha=.3) +\n                     ggtitle(\"Friends car collection -- WT density plots\") +\n                     theme_minimal()\nfriends_wt_plot_den"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/mining-from-a-reference-dataset.html",
        "section": "Session 13 \u2013 Mining from a reference dataset",
        "subsection": "13.5 Plots of the extracted data",
        "code": "## scatterplot\nfriends_scatterplot_mpg_hp <- ggplot(friends_data_with_mtcars_data_order, aes(x=mpg,  y = hp, color=friend)) +\n                       geom_point() +\n                       ggtitle(\"Friends car collection -- mpg versus hp\") +\n                       theme_minimal()\nfriends_scatterplot_mpg_hp"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/introduction-to-python.html",
        "section": "Session 14 \u2013 Introduction to Python",
        "subsection": "14.3 Mac OS X Python Installations",
        "code": "ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/introduction-to-python.html",
        "section": "Session 14 \u2013 Introduction to Python",
        "subsection": "14.3 Mac OS X Python Installations",
        "code": "brew install python2\nbrew install python3"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-keywords-and-identifiers.html",
        "section": "Session 15 \u2013 Python: Keywords and Identifiers",
        "subsection": "15.1 Keywords in Python",
        "code": "#import keyword module, also known as defining what keyword is to Python\nimport keyword\n\n#from keyword, list all keywords (kw)\nkeyword.kwlist"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-keywords-and-identifiers.html",
        "section": "Session 15 \u2013 Python: Keywords and Identifiers",
        "subsection": "15.1 Keywords in Python",
        "code": "#Set variable as an interger\nx = 2\n\n#IF\nif x > 1:\n    print(\"x is greater than 1\")\n#notice no output for the script below:\nif x > 3:\n    print(\"x is greater than 3\")\n\n#ELSE\nif x > 3:\n    print(\"x is greater than 3\")\nelse:\n    print(\"x is not greater than 3\")\n\n#ELSE\nif x > 1:\n    print(\"x is greater than 1\")\nelse:\n    print(\"x is not greater than 1\")\n\n#OR\nif x > 3 or x > 1:\n    print(\"x is greater than 3 -OR- x is greater than 1\")\nelse:\n    print(\"x is not greater than 3 -AND- x is not greater than 1\")\n\n#AND\nif x > 3 and x > 1:\n    print(\"x is greater than 3 -AND- x is greater than 1\")\nelse:\n    print(\"x is not greater than 3 -OR- x is not greater than 1\")\n\n#ELIF\nif x > 3:\n    print(\"x is greater than 3\")\nelif x == 2:\n    print(\"x is not greater than 3, but x is equal to 2\")\nelse:\n    print(\"x is not greater than 3 AND x is not equal to 2\")\n\n#TRY #EXCEPT\ntry:\n    y > x\nexcept NameError: y = 4\n\n#NONE\ntry:\n    y > x\nexcept NameError: y = None\n\nprint(y)\n\n#IS\nif y is None:\n    print(\"y is none\")\nelse:\n    print(\"y was not none\")\n\n#NOT\nif y is not None:\n    print(\"y is defined\")\nelse:\n    print(\"y was not defined\")\n\n#IMPORT #AS\nimport keyword as squidward\nsquidward.iskeyword(\"else\")\nsquidward.iskeyword(\"cans\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-keywords-and-identifiers.html",
        "section": "Session 15 \u2013 Python: Keywords and Identifiers",
        "subsection": "15.2 Identifiers in Python",
        "code": "#for python3 we can use the .isidentifier() command to check our identifiers to see if they are valid (True) or not (False).\n'My_file_2'.isidentifier\n'2_My_file'.isidentifier\n'My_file_@'.isidentifier\n'for'.isidentifier\n\n#we can create variables\nscore_1 = 95\nprint(score_1)\nscore_2 = 45\nprint(score_2)\n\n#we can add variables\nscore_1 + score_2\n\n#we can add variables and store the information\nsum_of_scores = score_1 + score_2\n\n#beware, if intended or not redeclaring a variable will replace the contents\nscore_1 = 95\nprint(score_1)\nscore_1 = 55\nprint(score_1)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-statements-and-expressions.html",
        "section": "Session 16 \u2013 Python: Statements and Expressions",
        "subsection": "16.2 Expressions in Python",
        "code": "#Arithmetic Expression: Calculate an average test score...\n(95+55+45)/3\n\n#Does not have to contain all numbers: 2 to the 4th power...\npow(2,4)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-statements-and-expressions.html",
        "section": "Session 16 \u2013 Python: Statements and Expressions",
        "subsection": "16.3 Simple Assignment Statements in Python",
        "code": "# You can think of this as a variable or identifier will equal an expression\n\nwills_in_store = \"10 people named Will in store\"\n# variable = expression\n\n#use id() to see where your expression lies in your computers' memory\nid(wills_in_store)\n\n#this may seem like a tangent but it is important to note what your computer does with information and where it is stored. \n#we discussed that Python will overwrite the definition of a identifier if reassigned, but what will happen if you assign the same content to two different identifiers?\n\n#scenario 1:\nmy_data = \"data\"\nid(my_data)\n\nmy_data2 = \"data\"\nid(my_data2)\n\n#scenario 2:\nmy_data = \"data here\"\nid(my_data)\n\nmy_data2 = \"data here\"\nid(my_data2)\n\n#scenario 3:\nmy_data = 20\nid(my_data)\n\nmy_data2 = 20\nid(my_data2)\n\n#scenario 4:\nmy_data = 2000\nid(my_data)\n\nmy_data2 = 2000\nid(my_data2)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-statements-and-expressions.html",
        "section": "Session 16 \u2013 Python: Statements and Expressions",
        "subsection": "16.4 Augmented Assignment Statements in Python",
        "code": "#simple assignments\nx = 1\ny = 2\n\n#augmented assignments\nx += y\n#or\nx = x + y\n\n#simple tuple\ntuple_1 = (1, 2, 3)\nprint(tuple_1)\n\n#augment tuple\ntuple_1 += (4, 5)\nprint(tuple_1)\n\n#simple tuple 2\ntuple_2 = ('apple', 'bannana', 'pear')\nprint(tuple_2)\n\n#augment tuple 2\ntuple_2 += ('grape', 'tomato')\nprint(tuple_2)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-statements-and-expressions.html",
        "section": "Session 16 \u2013 Python: Statements and Expressions",
        "subsection": "16.5 Explicit and Implicit Line Continuation",
        "code": "#explicit line continuation: use backslash\nlist_1 = [1, \\\n2, 3, \\\n4 \\\n]\nprint(list_1)\n\n#implicit line continuation: use open parentheses (), braces {}, and brackets []\nlist_1 = [1,\n2, 3,\n4\n]\nprint(list_1)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-statements-and-expressions.html",
        "section": "Session 16 \u2013 Python: Statements and Expressions",
        "subsection": "16.6 Indentation in Python is Crucial to Proper Code function",
        "code": "#lets define a function with proper indentation\ndef even_or_odd(num):\n    print(\"Starting Analysis of Number\")\n    if num % 2 == 0:\n        return True\n    else:\n        return False \n\nnum = 7\nif even_or_odd(num) is True:\n    print(num, 'is an even number')\nelse:\n    print(num, 'is an odd number')"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-statements-and-expressions.html",
        "section": "Session 16 \u2013 Python: Statements and Expressions",
        "subsection": "16.7 Comments",
        "code": "#lets introduce docstrings to our previous code\ndef even_or_odd(num):\n    print(\"Starting Analysis of Number\")\n    if num % 2 == 0:\n        return True\n    else:\n        return False \n\n\n'''\nThese lines will not count\nThey are between the triple quotes\nSo they will not be used as code, but instead a comment\n'''\n\nnum = 7\nif even_or_odd(num) is True:\n    print(num, 'is an even number')\nelse:\n    print(num, 'is an odd number')"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-data-types.html",
        "section": "Session 17 \u2013 Python: Data Types",
        "subsection": "17.1 Booleans",
        "code": "#boolean, test if true\nbee_allergy = True\nif bee_allergy == True:\n print('patient is allergic to bees')\nelse:\n print('patient is not allergic to bees')\n\n#short-hand boolean condition\nbee_allergy = True\nif bee_allergy:\n    print('patient is allergic to bees')\nelse:\n    print('patient is not allergic to bees')\n\n#one-liner!\nprint('patient is allergic to bees') if bee_allergy else print('patient is not allergic to bees')"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-data-types.html",
        "section": "Session 17 \u2013 Python: Data Types",
        "subsection": "17.2 Numbers: int, float and complex",
        "code": "#using type and instance to decipher number type\ntype(2)\n\ntype(2.0)\n\ntype(2+3x)\n\ntype(2+3j)\n\nisinstance(2+3j, complex)\n\n#what does j mean??\n#create a complex number\ncomplex(2,3)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-data-types.html",
        "section": "Session 17 \u2013 Python: Data Types",
        "subsection": "17.3 Strings",
        "code": "#simple string\nprint(\"the store is out of apples\")\n\n#simple string 2\nprint('the store is out of apples')\n\n#multiline string\nprint(\"\"\"the store \nis out of \napples\n\"\"\")\n\n#One-liner, multiline string?!\nprint(\"the store \\n is out of \\n apples\")\n\n#One-liner, multiline string?! fixed for spacing issues\nprint(\"the store \\nis out of \\napples\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-data-types.html",
        "section": "Session 17 \u2013 Python: Data Types",
        "subsection": "17.5 Lists",
        "code": "#lets make a list containing different classes\nmy_list = [True, False, 1, 1.1, 1+2j, 'Learn', b'Python']\n\nprint(my_list)\n\nprint(my_list[0])\n\nprint(my_list[-1])\n\n#lets print the class of each item in the list\nfor item in my_list:\n    print(type(item))\n\n#you can target and change items in the list\nmy_list[3] = 4\nprint(my_list)\n\n#you can slice a list\nprint(my_list[0:3])"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-data-types.html",
        "section": "Session 17 \u2013 Python: Data Types",
        "subsection": "17.6 Tuples",
        "code": "#empty tuple\n\ntuple_1 = ()\ntuple_1\n\n#tuple in tuple; nested tuple\n\ntuple_1 = (1,2,3)\ntuple_2 = ('apple', 'bannana')\ntuple_3 = (tuple_1, tuple_2)\ntuple_3\n\n#modify tuples\n\ntuple_na = (\"na\",)*3\ntuple_na\n\ntuple_bat = (tuple_na, 'batman') \ntuple_bat\n\n#slicing tuples\n\ntuple_num = (1,2,3,4)\ntuple_num[1:]"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-data-types.html",
        "section": "Session 17 \u2013 Python: Data Types",
        "subsection": "17.7 Sets",
        "code": "#Simple set\nsimple_set = set(\"strawberry mango\")\ntype(simple_set)\nsimple_set\n\n#Another Simple Set\nsimpler_set = {'strawberry', 'mango', 'grapefruit'}\ntype(simpler_set)\nsimpler_set\n\n#Frozenset\nfood = {'fish', 'shrimp'}\nfood\nfrozen_food = frozenset(food)\ntype(frozen_food)\nfrozen_food"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-data-types.html",
        "section": "Session 17 \u2013 Python: Data Types",
        "subsection": "17.8 Dictionary",
        "code": "#dictionary, below are random dates\nworst_days_of_year = {'key':'value', 'feb':28, 'oct':2, 'dec':8}\ntype(worst_days_of_year)\nworst_days_of_year\n\n#drawing information from the dictionary\nworst_days_of_year['feb']\n\n#key filtering\nworst_days_of_year.keys()\n\n#value filtering\nworst_days_of_year.values()\n\n#item listing\nworst_days_of_year.items()\n\n#update a dictionary\nworst_days_of_year.update({'mar':4})\nworst_days_of_year\n\n#reassign data\nworst_days_of_year['mar'] = 5\nworst_days_of_year\n\n#delete data\ndel worst_days_of_year['mar']\nworst_days_of_year"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-strings.html",
        "section": "Session 18 \u2013 Python: Strings",
        "subsection": null,
        "code": "#types of quotes that can be used\nstr = 'apple'\nstr = \"apple\"\nstr = \"\"\"apple\"\"\"\n\n#you can replace items in a string easily\nstr\nnew_str = str.replace(\"apple\", \"pear\")\nnew_str\n\n#you can obtain items from a string just like a list\nstr_2 = 'There are 10 apples in the store'\nstr_2[0]\n\nstr_2[1]\n\nstr_2[-1]\n\n#you can slice a string\nstr_2[0:3]\n\nstr_2[1:2]\n\nstr_2[4:-1]"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-strings.html",
        "section": "Session 18 \u2013 Python: Strings",
        "subsection": "18.1 String Operators",
        "code": "#cat strings together\nword_1 = 'hey! '\nword_2 = 'hi! '\nphrase_1 = 'How you doing?'\nprint(word_1 + word_2 + phrase_1)\n\n#repeat words or phrases\nfruit = \"apples\"\nprint(fruit*6)\n\n#membership\nfruit = \"apples\"\nprint(\"e\" in fruit)\n\n#no membership\nfruit = \"apples\"\nprint(\"e\" not in fruit)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-strings.html",
        "section": "Session 18 \u2013 Python: Strings",
        "subsection": "18.2 Other String Modifiers",
        "code": "#iteration through a string\nfor fruit_letter in fruit: print(fruit_letter, end =\"\")\n\nfor fruit_letter in fruit: print(fruit_letter)\n\n#count number of occurances\nsuspect_description = 'two short teenage males wearing one long brown coat and one brown hat'\nstr = 'one'\nprint(suspect_description.count(str))\n\nstr = 'two'\nprint(suspect_description.count(str))\n\nstr = 'brown'\nprint(suspect_description.count(str))\n\n#the power of es-cap-e (escape)\nprint('\\n')\n\nprint(r'\\n')\n\n#in-line es-cap-e\nsentence = \"It was \\\"him\\\" your honor!\"\n\n#notice how the example below will not work\nsentence = \"It was \"him\" your honor!\"\n\n#capitalize first letter\nname_1 = 'TOM'\nprint(name_1.capitalize())\n\nname_2 = 'tom'\nprint(name_2.capitalize())\n\n#lowercase letters\nprint(name_1.lower())\n\n#uppercase letters\nprint(name_2.upper())\n\n#swapcase of characters\nname_3 = 'ToM HollAnD'\nprint(name_3.swapcase())\n\n#title, capitalize first letters of each word\nprint(name_3.title())"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-strings.html",
        "section": "Session 18 \u2013 Python: Strings",
        "subsection": "18.3 Format-Characters in Strings",
        "code": "print(\"Last Name: %s,\\nFirst Name: %s,\\nLast Name: %s\" % ('Bond','James','Bond'))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-strings.html",
        "section": "Session 18 \u2013 Python: Strings",
        "subsection": "18.4 Comparisons with Strings",
        "code": "#check case type\nterm1 = \"highlands\"\n\n#check if all lowercase\nprint(term1.islower())\n\n#check if all uppercase\nprint(term1.isupper())\n\n#check if characters are decimals\nterm2 = '20.2'\nprint(term2.isdecimal())\n\nterm2 = '202'\nprint(term2.isdecimal())\n\n#check if characters are digits\nprint(term2.isdigit())\n\n#check if characters are numeric\nprint(term2.isnumeric())\n\n#check if string contains at least one character, all alphabetic\nprint(term2.isalpha())\n\nterm3 = 'wow5'\nprint(term3.isalpha())\n\n#same as alpha but includes decimal digits\nprint(term2.isalnum())\n\nprint(term3.isalnum())"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-strings.html",
        "section": "Session 18 \u2013 Python: Strings",
        "subsection": "18.5 Padding strings",
        "code": "#padding with rjust, rightsided\nreadme = \"Start App\"\nprint(readme.rjust(15))\n\nprint(readme.rjust(15, '~'))\n\n#padding with ljust, leftsided\nprint(readme.ljust(15))\n\nprint(readme.ljust(15, '~'))\n\n#padding with center, centered\nprint(readme.center(25))\n\n#padding with zfill, fills after a + or -\nprint(readme.zfill(25))\n\nreadme_aug = '-Start App-'\nprint(readme_aug.zfill(25))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-strings.html",
        "section": "Session 18 \u2013 Python: Strings",
        "subsection": "18.6 Search for words in string and output location",
        "code": "#find function\nhouse = \"green two-story home\"\nstr = \"two\"\nprint(house.find(str))\n\nprint(house.find(str,5))\n\n#what happens below, when we pass the location of 'two'\nprint(house.find(str,10))\n\n#for this case above, we should use index instead of find\nprint(house.index(str,10))\n\n#count\nprint(house.count(str))\n\nprint(house.count(str, 10))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-strings.html",
        "section": "Session 18 \u2013 Python: Strings",
        "subsection": "18.7 Seek and replace in strings",
        "code": "#replace\nsmthg_he_wrote = 'I am moving out'\nprint(smthg_he_wrote.replace('out','away'))\n\n#split\nprint(smthg_he_wrote.split())\n\n#splitlines\nprint(smthg_he_wrote.splitlines())\n\nsmthg_he_wrote_2 = 'I am definately \\nwithout a doubt \\nmoving out'\nprint(smthg_he_wrote_2)\n\nprint(smthg_he_wrote_2.splitlines())\n\n#join\nalphabet = ('a','b','c')\nprint(' '.join(alphabet))\n\nprint('+'.join(alphabet))\n\n#remove leftsided whitespaces\nextra_spaces = '     hi     hey     '\nprint(extra_spaces.lstrip())\n\n#remove rightsided whitespaces\nprint(extra_spaces.rstrip())\n\n#remove any type of character, not just whitespaces\nextra_char = '-----hi-----'\nprint(extra_spaces.rstrip('-'))\n\n#print length of string\nprint(len(extra_spaces))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-operators.html",
        "section": "Session 19 \u2013 Python: Operators",
        "subsection": "19.2 Arithmetic operators",
        "code": "#addition\n1+2\n\n#subtraction\n1-2\n\n#multiplication\n1*2\n\n#float division\n1/2\n\n#floor division (exclude fraction)\n1//2\n\n#modulus\n1%2\n\n#exponent\n1**2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-operators.html",
        "section": "Session 19 \u2013 Python: Operators",
        "subsection": "19.3 Comparison operators",
        "code": "a=1\nb=2\n\n#greater than\nprint('a > b is', a>b)\n\n#less than\nprint('a < b is', a<b)\n\n#equal to\nprint('a == b is', a==b)\n\n#not equal to\nprint('a != b is', a!=b)\n\n#greater than or equal to\nprint('a >= b is', a>=b)\n\n#less than or equal to\nprint('a <= b is', a<=b)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-operators.html",
        "section": "Session 19 \u2013 Python: Operators",
        "subsection": "19.4 Logical operators",
        "code": "a=1\nb=2\n\n#and\nprint('a and b is',a and b)\n1 == 1 and 2 == 3\n1 == 1 and 2 == 2\n\n\n#or\nprint('a or b is',a or b)\n1 == 1 or 2 == 3\n1 == 1 or 2 == 2\n\n#not\nprint('not a is',not a)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-operators.html",
        "section": "Session 19 \u2013 Python: Operators",
        "subsection": "19.5 Bitwise operators",
        "code": "=    a=2        a=2\n\nArithmetic Assignments:\n\n+=    a+=2    a=a+2\n-=    a-=2    a=a-2\n*=    a*=2    a=a*2\n/=    a/=2    a=a/2\n%=    a%=2    a=a%2\n**=    a**=2    a=a**2\n\nBitwise Assignments:\n\n&=    a&=2    a=a&2\n|=    a|=2    a=a|2\n^=    a^=2    a=a^2\n>>=    a>>=2    a=a>>2\n<<=    a<<=2    a=<<2"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-operators.html",
        "section": "Session 19 \u2013 Python: Operators",
        "subsection": "19.6 Identity Operators",
        "code": "a = 2\n\n#is\nif (type(a) is int):\n    print(\"true\")\nelse:\n    print(\"false\")\n\n#is not\nif (type(a) is not int):\n    print(\"true\")\nelse:\n    print(\"false\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-operators.html",
        "section": "Session 19 \u2013 Python: Operators",
        "subsection": "19.7 Membership operators",
        "code": "#in\nevidence = 'jack and jill were at the crime scene'\nprint('jill' in evidence)\nprint('james' in evidence)\nprint('j' in evidence)\nprint('randy' not in evidence)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-operators.html",
        "section": "Session 19 \u2013 Python: Operators",
        "subsection": "19.8 What is the order of operations with operators?",
        "code": "#multiplication preceeds addition even below\n2 + 6 * 5\n\n#you can use parentheses to force addition first\n(2 + 6) * 5\n\n#some operators share the same precedence, so the leftmost will be performed first\nprint(4 + 7 - 1)\n\nprint(4 - 7 + 1)\n\nprint(4 * 7 / 1)\n\nprint(4 / 7 * 1)\n\n#make sure to test order of operations throughly to make sure your formula is working as preferred\n#the best way is to start small and add more as you go\n\n#EXCEPTION!!!\n#exponents have right-to-left associativity, which is atypical\nprint(4 ** 2 ** 2)\n\nprint((4 ** 2) ** 2)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython.html",
        "section": "Session 20 \u2013 Biopython",
        "subsection": "20.2 Biopython Installation",
        "code": "pip install biopython\npip install --upgrade biopython"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython.html",
        "section": "Session 20 \u2013 Biopython",
        "subsection": "20.3 Getting Started",
        "code": "# Open Bio.Seq Module, Import what you need only: Seq\nfrom Bio.Seq import Seq\n\n# Create your own sequence inside the Seq() object\nmy_first_seq = Seq(\"TGCATGCATCGATCG\")\n\n# Print command mediated print function\nprint(my_first_seq)\n\n# find the complement sequence easily with: complement()\nmy_first_seq.complement()\n\n# find the reverse complement easily with reverse_complement()\nmy_first_seq.reverse_complement()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython.html",
        "section": "Session 20 \u2013 Biopython",
        "subsection": "20.4 Parsing my FASTA",
        "code": "# configure file location\nfasta_file = PATH TO FASTA FILE\n\n# import SeqIO toolkit\nfrom Bio import SeqIO\n\n# for X in fasta file, print ID SEQUENCE and LENGTH of SEQ\nfor seq_record in SeqIO.parse(fasta_file, \"fasta\"):\n    print(seq_record.id)\n    print(repr(seq_record.seq))\n    print(len(seq_record))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython.html",
        "section": "Session 20 \u2013 Biopython",
        "subsection": "20.4 Parsing my FASTA",
        "code": "# import module for changing directories\nimport os\n\n# Change Directory\nos.chdir(\"Your Python Work Folder For This Class\")\n\n# Save the data!\nfor seq_record in SeqIO.parse(fasta_file, \"fasta\"):\n    with open('parsed_fasta.txt', 'a') as f:\n        f.write(seq_record.id)\n        f.write(\"\\n\")\n        f.close()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython.html",
        "section": "Session 20 \u2013 Biopython",
        "subsection": "20.5 Parsing my GenBank or GenPept",
        "code": "from Bio import SeqIO\nfor seq_record in SeqIO.parse(\"sequence.gp\", \"genbank\"):\n     print(seq_record.id)\n     print(repr(seq_record.seq))\n     print(len(seq_record))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-sequences.html",
        "section": "Session 21 \u2013 Biopython: Sequences",
        "subsection": "21.1 Sequence Objects",
        "code": "# old stuff we have introduced before\nfrom Bio.Seq import Seq\nmy_first_seq = Seq(\"CATGCAT\")\n\n# new part, separate sequence into rows\nfor index, letter in enumerate(my_first_seq):\n    print(\"%i %s\" % (index, letter))\n\n# retrieving specific elements\nprint(my_first_seq[0])\nprint(my_first_seq[5])\nprint(my_first_seq[-1])\nprint(my_first_seq[-2])\n\n# counting repeat sequences within a sequence\nmy_first_seq.count(\"CAT\")\n\n# counting base content\nmy_first_seq.count(\"C\")\n\n# determining GC percentage\n100 * float(\nmy_first_seq.count(\"G\") + my_first_seq.count(\"C\")\n) / len(my_first_seq)\n\n# Improved simplicity in GC percentage calculation\nfrom Bio.SeqUtils import GC\nGC(my_first_seq)\n\n# slicing your sequence\nmy_first_seq[2:5]"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-sequences.html",
        "section": "Session 21 \u2013 Biopython: Sequences",
        "subsection": "21.2 Concatenation with Sequences",
        "code": "#Simple Cat?\nfrom Bio.Seq import Seq\nseq_list = [Seq(\"CCC\"), Seq(\"AAA\"), Seq(\"TTT\")]\ncat_list = Seq(\"\")\nfor s in seq_list:\n    cat_list += s\n\nprint(cat_list)\n\n#BioPython Cat w/ spacer seqs\nfrom Bio.Seq import Seq\nseq_list = [Seq(\"CCC\"), Seq(\"AAA\"), Seq(\"TTT\")]\nspacer = Seq(\"N\"*3)\nspacer.join(seq_list)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-sequences.html",
        "section": "Session 21 \u2013 Biopython: Sequences",
        "subsection": "21.3 Transcription: DNA to mRNA",
        "code": "from Bio.Seq import Seq\n\n# coding DNA strand\ncoding_dna = Seq(\"ACTGCATCGATCGTATGTGATGTGACACAC\")\nprint(coding_dna)\n\n# template DNA strand\ntemplate_dna = coding_dna.reverse_complement()\nprint(template_dna)\n\n# coding >>> mRNA\nm_rna = coding_dna.transcribe()\nprint(m_rna)\n\n# template >>> mRNA\ntemplate_dna.reverse_complement().transcribe()\n\n# mRNA >>> cDNA\nm_rna.back_transcribe()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-sequences.html",
        "section": "Session 21 \u2013 Biopython: Sequences",
        "subsection": "21.4 Translation: RNA to PROT",
        "code": "from Bio.Seq import Seq\n\n# mRNA to PROT\nm_rna = Seq(\"ACUGAUCGAUAGAUGGUGUGUACUCAUAUCACUGACUAG\")\nm_rna.translate()\n\n# coding DNA >>> PROT\ncoding_dna = Seq(\"ATCGATCGATAGATCGATCGTCGATCGATCGATCGTTAG\")\ncoding_dna.translate()\n\n# change translation table type (mitochondrial)\ncoding_dna.translate(table=\"Vertebrate Mitochondrial\")\n\n# translate to first stop codon\ncoding_dna.translate(to_stop=True)\ncoding_dna.translate(table=\"Vertebrate Mitochondrial\", to_stop=True)\n\n# bacterial gene full example from biopython.org\nfrom Bio.Seq import Seq\ngene = Seq(\"GTGAAAAAGATGCAATCTATCGTACTCGCACTTTCCCTGGTTCTGGTCGCTCCCATGGCA\"\n    \"GCACAGGCTGCGGAAATTACGTTAGTCCCGTCAGTAAAATTACAGATAGGCGATCGTGAT\"\n    \"AATCGTGGCTATTACTGGGATGGAGGTCACTGGCGCGACCACGGCTGGTGGAAACAACAT\"\n    \"TATGAATGGCGAGGCAATCGCTGGCACCTACACGGACCGCCGCCACCGCCGCGCCACCAT\"\n    \"AAGAAAGCTCCTCATGATCATCACGGCGGTCATGGTCCAGGCAAACATCACCGCTAA\")\ngene.translate(table=\"Bacterial\")\ngene.translate(table=\"Bacterial\", to_stop=True)\ngene.translate(table=\"Bacterial\", cds=True)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-mulitple-sequence-alignments.html",
        "section": "Session 22 \u2013 Biopython: Mulitple Sequence Alignments",
        "subsection": "22.1 pairwise2",
        "code": "from Bio import pairwise2\nfrom Bio import SeqIO\n\nseq1 = SeqIO.read(\"alpha.faa\", \"fasta\")\nseq2 = SeqIO.read(\"beta.faa\", \"fasta\")\nalignments = pairwise2.align.globalxx(seq1.seq, seq2.seq)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-mulitple-sequence-alignments.html",
        "section": "Session 22 \u2013 Biopython: Mulitple Sequence Alignments",
        "subsection": "22.2 PairwiseAligner",
        "code": "from Bio import Align\naligner = Align.PairwiseAligner(match_score=1.0)\nprint(aligner)\n\naligner.algorithm\n\nseq1 = \"TATACATTAAAGGAGGGGGATGCGGATAAATGGAAAGGCGAAAAAGAAAAAAATGAATCTAAATGATA\"\nseq2 = \"TATACATTAAAGGAGGGGGATGCGGATAAATGGAAAGGCGAAAGAAAGAAAAAAATGAATCTAAATGATA\"\nscore = aligner.score(seq1, seq2)\nscore\n\nalignments = aligner.align(seq1, seq2)\nfor alignment in alignments:\n    print(alignment)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-genomediagram.html",
        "section": "Session 23 \u2013 Biopython: GenomeDiagram",
        "subsection": "23.1 Linear/Circular Gene Diagrams",
        "code": "# import modules\nimport os\nfrom reportlab.lib import colors\nfrom reportlab.lib.units import cm\nfrom Bio.Graphics import GenomeDiagram\nfrom Bio import SeqIO\n\n# set wd\nos.chdir(\"YOUR WORKING DIRECTORY WITH GENBANK FILE HERE\")\n\n# load file as record\nrecord = SeqIO.read(\"GENBANK FILE HERE\", \"genbank\")\n\n# set parameters, set empty diagram\ngen_diagram = GenomeDiagram.Diagram(\"TITLE HERE\")\ngen_track_for_features = gen_diagram.new_track(1, name=\"Annotated Features\")\ngen_feature_set = gen_track_for_features.new_set()\n\n# Generate diagram, alternate colors\nfor feature in record.features:\n    if feature.type != \"gene\":\n        # Do Nothing\n        continue\n    if len(gen_feature_set) % 2 == 0:\n        color = colors.blue\n    else:\n        color = colors.lightblue\n    gen_feature_set.add_feature(feature, color=color, label=True, label_size=10)\n\n# Create output\ngen_diagram.draw(\n    format=\"linear\",\n    orientation=\"landscape\",\n    pagesize=\"A4\",\n    fragments=4,\n    start=0,\n    end=len(record),\n)\n\n# Save figure as ...\ngen_diagram.write(\"example1.pdf\", \"PDF\")\ngen_diagram.write(\"example1.eps\", \"EPS\")\ngen_diagram.write(\"example1.svg\", \"SVG\")\ngen_diagram.write(\"example1.png\", \"PNG\")\n\n\n# Circular figure:\ngen_diagram.draw(\n    format=\"circular\",\n    circular=True,\n    pagesize=(20 * cm, 20 * cm),\n    start=0,\n    end=len(record),\n    circle_core=0.7,\n)\ngen_diagram.write(\"example1.pdf\", \"PDF\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-genomediagram.html",
        "section": "Session 23 \u2013 Biopython: GenomeDiagram",
        "subsection": "23.2 Diagram Readability",
        "code": "# edit the code above with the code below and see what changes\ngen_feature_set.add_feature(\n    feature,\n    label=True,\n    color=\"purple\",\n    label_position=\"end\",\n    label_size=20,\n    label_angle=90,\n)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-genomediagram.html",
        "section": "Session 23 \u2013 Biopython: GenomeDiagram",
        "subsection": "23.3 Box Shape",
        "code": "# Default\ngen_feature_set.add_feature(feature)\n\n# Box\ngen_feature_set.add_feature(feature, sigil=\"BOX\")\n\n# Arrow\ngen_feature_set.add_feature(feature, sigil=\"ARROW\")\n\n# Big Arrow\ngen_feature_set.add_feature(feature, sigil=\"BIGARROW\")\n\n# Octo-gon\ngen_feature_set.add_feature(feature, sigil=\"OCTO\")\n\n# Potter Zag\ngen_feature_set.add_feature(feature, sigil=\"JAGGY\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-genomediagram.html",
        "section": "Session 23 \u2013 Biopython: GenomeDiagram",
        "subsection": "23.4 Edit Box Shape: Arrows",
        "code": "# Tail-less Arrow\ngen_feature_set.add_feature(feature, sigil=\"ARROW\", color=\"brown\", arrowshaft_height=1.0)\n\n# Thin Arrow\ngen_feature_set.add_feature(feature, sigil=\"ARROW\", color=\"teal\", arrowshaft_height=0.2)\n\n# Very Thin Arrow\ngen_feature_set.add_feature(\n    feature, sigil=\"ARROW\", color=\"darkgreen\", arrowshaft_height=0.1\n)\n\n# Short Arrowhead\ngen_feature_set.add_feature(feature, sigil=\"ARROW\", color=\"blue\", arrowhead_length=0.25)\n\n# Long Arrowhead\ngen_feature_set.add_feature(feature, sigil=\"ARROW\", color=\"orange\", arrowhead_length=1)\n\n# All Arrowhead\ngen_feature_set.add_feature(feature, sigil=\"ARROW\", color=\"red\", arrowhead_length=10000)\n\n# Big Arrow\ngen_feature_set.add_feature(feature, sigil=\"BIGARROW\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-genomediagram.html",
        "section": "Session 23 \u2013 Biopython: GenomeDiagram",
        "subsection": "23.5 Restriction Map",
        "code": "# old\nfrom reportlab.lib import colors\nfrom reportlab.lib.units import cm\nfrom Bio.Graphics import GenomeDiagram\nfrom Bio import SeqIO\n\n# new\nfrom Bio.SeqFeature import SeqFeature, FeatureLocation\n\n# old\nrecord = SeqIO.read(\"YOUR GB FILE HERE\", \"genbank\")\n\n# old\ngd_diagram = GenomeDiagram.Diagram(record.id)\ngd_track_for_features = gd_diagram.new_track(1, name=\"Annotated Features\")\ngd_feature_set = gd_track_for_features.new_set()\n\n# old\nfor feature in record.features:\n    if feature.type != \"gene\":\n        # Exclude this feature\n        continue\n    if len(gd_feature_set) % 2 == 0:\n        color = colors.blue\n    else:\n        color = colors.lightblue\n    gd_feature_set.add_feature(\n        feature, sigil=\"ARROW\", color=color, label=True, label_size=14, label_angle=0\n    )\n\n# new: Add restriction enzymes and sites\nfor site, name, color in [\n    (\"GAATTC\", \"EcoRI\", colors.green),\n    (\"CCCGGG\", \"SmaI\", colors.orange),\n    (\"AAGCTT\", \"HindIII\", colors.red),\n    (\"GGATCC\", \"BamHI\", colors.purple),\n]:\n    index = 0\n    while True:\n        index = record.seq.find(site, start=index)\n        if index == -1:\n            break\n        feature = SeqFeature(FeatureLocation(index, index + len(site)))\n        gd_feature_set.add_feature(\n            feature,\n            color=color,\n            name=name,\n            label=True,\n            label_size=10,\n            label_color=color,\n        )\n        index += len(site)\n\n# old, linear\ngd_diagram.draw(format=\"linear\", pagesize=\"A4\", fragments=4, start=0, end=len(record))\ngd_diagram.write(\"example2.pdf\", \"PDF\")\ngd_diagram.write(\"example2.eps\", \"EPS\")\ngd_diagram.write(\"example2.svg\", \"SVG\")\n\n# old, circular\ngd_diagram.draw(\n    format=\"circular\",\n    circular=True,\n    pagesize=(20 * cm, 20 * cm),\n    start=0,\n    end=len(record),\n    circle_core=0.5,\n)\ngd_diagram.write(\"example2.pdf\", \"PDF\")\ngd_diagram.write(\"example2.eps\", \"EPS\")\ngd_diagram.write(\"example2.svg\", \"SVG\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-genomediagram.html",
        "section": "Session 23 \u2013 Biopython: GenomeDiagram",
        "subsection": "23.6 Tracks on Tracks",
        "code": "from Bio import SeqIO\n\nA_rec = SeqIO.read(\"XL.gb\", \"gb\")\nB_rec = SeqIO.read(\"XT.gb\", \"gb\")\nC_rec = SeqIO.read(\"NP.gb\", \"gb\")\n\nfrom reportlab.lib.colors import (\n    red,\n    grey,\n    orange,\n    green,\n    brown,\n    blue,\n    lightblue,\n    purple,\n)\n\nA_colors = (\n    [red] * 5\n    + [grey] * 7\n    + [orange] * 2\n    + [grey] * 2\n    + [orange]\n    + [grey] * 11\n    + [green] * 4\n    + [grey]\n    + [green] * 2\n    + [grey, green]\n    + [brown] * 5\n    + [blue] * 4\n    + [lightblue] * 5\n    + [grey, lightblue]\n    + [purple] * 2\n    + [grey]\n)\nB_colors = (\n    [red] * 6\n    + [grey] * 8\n    + [orange] * 2\n    + [grey]\n    + [orange]\n    + [grey] * 21\n    + [green] * 5\n    + [grey]\n    + [brown] * 4\n    + [blue] * 3\n    + [lightblue] * 3\n    + [grey] * 5\n    + [purple] * 2\n)\nC_colors = (\n    [grey] * 30\n    + [green] * 5\n    + [brown] * 4\n    + [blue] * 2\n    + [grey, blue]\n    + [lightblue] * 2\n    + [grey] * 5\n)\n\nfrom Bio.Graphics import GenomeDiagram\n\nname = \"Stacked\"\ngd_diagram = GenomeDiagram.Diagram(name)\nmax_len = 0\nfor record, gene_colors in zip([A_rec, B_rec, C_rec], [A_colors, B_colors, C_colors]):\n    max_len = max(max_len, len(record))\n    gd_track_for_features = gd_diagram.new_track(\n        1, name=record.name, greytrack=True, start=0, end=len(record)\n    )\n    gd_feature_set = gd_track_for_features.new_set()\n    i = 0\n    for feature in record.features:\n        if feature.type != \"gene\":\n            # Exclude this feature\n            continue\n        gd_feature_set.add_feature(\n            feature,\n            sigil=\"ARROW\",\n            color=gene_colors[i],\n            label=True,\n            name=str(i + 1),\n            label_position=\"start\",\n            label_size=6,\n            label_angle=0,\n        )\n        i += 1\n\ngd_diagram.draw(format=\"linear\", pagesize=\"A4\", fragments=1, start=0, end=max_len)\ngd_diagram.write(name + \".pdf\", \"PDF\")\ngd_diagram.write(name + \".eps\", \"EPS\")\ngd_diagram.write(name + \".svg\", \"SVG\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-genomediagram.html",
        "section": "Session 23 \u2013 Biopython: GenomeDiagram",
        "subsection": "23.7 Cross-link Data",
        "code": "A_vs_B = [\n    (99, \"ND1\", \"ND1\"),\n    (33, \"ND2\", \"ND2\"),\n    (94, \"COX1\", \"COX1\"),\n    (100, \"COX2\", \"COX2\"),\n    (97, \"ATP8\", \"ATP8\"),\n    (98, \"ATP6\", \"ATP6\"),\n    (98, \"COX3\", \"COX3\"),\n    (100, \"ND3\", \"ND3\"),\n    (100, \"ND4L\", \"ND4L\"),\n    (94, \"ND4\", \"ND4\"),\n    (87, \"ND5\", \"ND5\"),\n    (94, \"ND6\", \"ND6\"),\n    (94, \"CYTB\", \"CYTB\"),\n]\n\nB_vs_C = [\n    (49, \"ND1\", \"ND1\"),\n    (53, \"ND2\", \"ND2\"),\n    (64, \"COX1\", \"COX1\"),\n    (30, \"COX2\", \"COX2\"),\n    (27, \"ATP8\", \"ATP8\"),\n    (88, \"ATP6\", \"ATP6\"),\n    (68, \"COX3\", \"COX3\"),\n    (30, \"ND3\", \"ND3\"),\n    (100, \"ND4L\", \"ND4L\"),\n    (74, \"ND4\", \"ND4\"),\n    (37, \"ND5\", \"ND5\"),\n    (74, \"ND6\", \"ND6\"),\n    (64, \"CYTB\", \"CYTB\"),\n]\n\ndef get_feature(features, id, tags=[\"locus_tag\", \"gene\"]):\n    \"\"\"Search list of SeqFeature objects for an identifier under the given tags.\"\"\"\n    for f in features:\n        for key in tags:\n            # tag may not be present in this feature\n            for x in f.qualifiers.get(key, []):\n                if x == id:\n                    return f\n    raise KeyError(id)\n\nfrom Bio.Graphics.GenomeDiagram import CrossLink\nfrom reportlab.lib import colors\n\nfor rec_X, tn_X, rec_Y, tn_Y, X_vs_Y in [\n    (A_rec, 3, B_rec, 2, A_vs_B),\n    (B_rec, 2, C_rec, 1, B_vs_C),\n]:\n    track_X = gd_diagram.tracks[tn_X]\n    track_Y = gd_diagram.tracks[tn_Y]\n    for score, id_X, id_Y in X_vs_Y:\n        feature_X = get_feature(rec_X.features, id_X)\n        feature_Y = get_feature(rec_Y.features, id_Y)\n        color = colors.linearlyInterpolatedColor(\n            colors.white, colors.firebrick, 0, 100, score\n        )\n        link_xy = CrossLink(\n            (track_X, feature_X.location.start, feature_X.location.end),\n            (track_Y, feature_Y.location.start, feature_Y.location.end),\n            color,\n            colors.lightgrey,\n        )\n        gd_diagram.cross_track_links.append(link_xy)\n\ngd_diagram.draw(format=\"linear\", pagesize=\"A4\", fragments=1, start=0, end=max_len)\ngd_diagram.write(name + \".pdf\", \"PDF\")\ngd_diagram.write(name + \".eps\", \"EPS\")\ngd_diagram.write(name + \".svg\", \"SVG\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-genomediagram.html",
        "section": "Session 23 \u2013 Biopython: GenomeDiagram",
        "subsection": "23.8 Clean Cross-Link",
        "code": "from reportlab.lib import colors\nfrom reportlab.lib.colors import red, grey, orange, green, brown\nfrom reportlab.lib.colors import blue, lightblue, purple\n\nfrom Bio.Graphics import GenomeDiagram\nfrom Bio.Graphics.GenomeDiagram import CrossLink\n\nfrom Bio import SeqIO\nfrom Bio.SeqFeature import SeqFeature, FeatureLocation\n\nname = \"Example3\"\n\nA_rec = SeqIO.read(\"XL.gb\", \"gb\")\nB_rec = SeqIO.read(\"XT.gb\", \"gb\")\nC_rec = SeqIO.read(\"NP.gb\", \"gb\")\nrecords = {rec.name: rec for rec in [A_rec, B_rec, C_rec]}\n\nA_colors = (\n    [red]\n    + [grey]\n    + [orange]\n    + [grey]\n    + [orange]\n    + [grey]\n    + [green]\n    + [grey]\n    + [green]\n    + [grey, green]\n    + [brown]\n    + [blue]\n    + [lightblue]\n    + [grey, lightblue]\n    + [purple]\n    + [grey]\n)\nB_colors = (\n    [red]\n    + [grey]\n    + [orange]\n    + [grey]\n    + [orange]\n    + [grey]\n    + [green]\n    + [grey]\n    + [brown]\n    + [blue]\n    + [lightblue]\n    + [grey]\n    + [purple]\n)\nC_colors = (\n    [grey]\n    + [green]\n    + [brown]\n    + [blue]\n    + [grey, blue]\n    + [lightblue]\n    + [grey] * 8\n)\n\nA_vs_B = [\n    (99, \"ND1\", \"ND1\"),\n    (33, \"ND2\", \"ND2\"),\n    (94, \"COX1\", \"COX1\"),\n    (100, \"COX2\", \"COX2\"),\n    (97, \"ATP8\", \"ATP8\"),\n    (98, \"ATP6\", \"ATP6\"),\n    (98, \"COX3\", \"COX3\"),\n    (100, \"ND3\", \"ND3\"),\n    (100, \"ND4L\", \"ND4L\"),\n    (94, \"ND4\", \"ND4\"),\n    (87, \"ND5\", \"ND5\"),\n    (94, \"ND6\", \"ND6\"),\n    (94, \"CYTB\", \"CYTB\"),\n]\n\nB_vs_C = [\n    (49, \"ND1\", \"ND1\"),\n    (53, \"ND2\", \"ND2\"),\n    (64, \"COX1\", \"COX1\"),\n    (30, \"COX2\", \"COX2\"),\n    (27, \"ATP8\", \"ATP8\"),\n    (88, \"ATP6\", \"ATP6\"),\n    (68, \"COX3\", \"COX3\"),\n    (30, \"ND3\", \"ND3\"),\n    (100, \"ND4L\", \"ND4L\"),\n    (74, \"ND4\", \"ND4\"),\n    (37, \"ND5\", \"ND5\"),\n    (74, \"ND6\", \"ND6\"),\n    (64, \"CYTB\", \"CYTB\"),\n]\n\n\ndef get_feature(features, id, tags=(\"locus_tag\", \"gene\", \"old_locus_tag\")):\n    \"\"\"Search list of SeqFeature objects for an identifier under the given tags.\"\"\"\n    for f in features:\n        for key in tags:\n            # tag may not be present in this feature\n            for x in f.qualifiers.get(key, []):\n                if x == id:\n                    return f\n    raise KeyError(id)\n\n\ngd_diagram = GenomeDiagram.Diagram(name)\nfeature_sets = {}\nmax_len = 0\nfor i, record in enumerate([A_rec, B_rec, C_rec]):\n    max_len = max(max_len, len(record))\n    # Allocate tracks 5 (top), 3, 1 (bottom) for A, B, C\n    # (empty tracks 2 and 4 add useful white space to emphasise the cross links\n    # and also serve to make the tracks vertically more compressed)\n    gd_track_for_features = gd_diagram.new_track(\n        5 - 2 * i,\n        name=record.name,\n        greytrack=True,\n        height=0.5,\n        start=0,\n        end=len(record),\n    )\n    assert record.name not in feature_sets\n    feature_sets[record.name] = gd_track_for_features.new_set()\n\nfor X, Y, X_vs_Y in [\n    (\"NC_001573\", \"NC_006839\", A_vs_B),\n    (\"NC_006839\", \"NC_026789\", B_vs_C),\n]:\n    features_X = records[X].features\n    features_Y = records[Y].features\n    set_X = feature_sets[X]\n    set_Y = feature_sets[Y]\n    for score, x, y in X_vs_Y:\n        color = colors.linearlyInterpolatedColor(\n            colors.white, colors.firebrick, 0, 100, score\n        )\n        border = colors.lightgrey\n        f_x = get_feature(features_X, x)\n        F_x = set_X.add_feature(\n            SeqFeature(FeatureLocation(f_x.location.start, f_x.location.end, strand=0)),\n            color=color,\n            border=border,\n        )\n        f_y = get_feature(features_Y, y)\n        F_y = set_Y.add_feature(\n            SeqFeature(FeatureLocation(f_y.location.start, f_y.location.end, strand=0)),\n            color=color,\n            border=border,\n        )\n        gd_diagram.cross_track_links.append(CrossLink(F_x, F_y, color, border))\n\n\nfor record, gene_colors in zip([A_rec, B_rec, C_rec], [A_colors, B_colors, C_colors]):\n    gd_feature_set = feature_sets[record.name]\n    i = 0\n    for feature in record.features:\n        if feature.type != \"gene\":\n            # Exclude this feature\n            continue\n        try:\n            g_color = gene_colors[i]\n        except IndexError:\n            print(\"Don't have color for %s gene %i\" % (record.name, i))\n            g_color = grey\n        gd_feature_set.add_feature(\n            feature,\n            sigil=\"BIGARROW\",\n            color=g_color,\n            label=True,\n            name=str(i + 1),\n            label_position=\"start\",\n            label_size=6,\n            label_angle=0,\n        )\n        i += 1\n\ngd_diagram.draw(format=\"linear\", pagesize=\"A4\", fragments=1, start=0, end=max_len)\ngd_diagram.write(name + \".pdf\", \"PDF\")\ngd_diagram.write(name + \".eps\", \"EPS\")\ngd_diagram.write(name + \".svg\", \"SVG\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-chromosome-modeling.html",
        "section": "Session 24 \u2013 Biopython: Chromosome Modeling",
        "subsection": "24.1 Gene Feature Modeling",
        "code": "from reportlab.lib.units import cm\nfrom Bio import SeqIO\nfrom Bio.Graphics import BasicChromosome\n\nentries = [\n    (\"Chr I\", \"L1.gb\"),\n    (\"Chr II\", \"L2.gb\"),\n    (\"Chr III\", \"L3.gb\"),\n    (\"Chr IV\", \"L4.gb\"),\n    (\"Chr V\", \"L5.gb\"),\n]\n\nmax_len = 219802468  # Could compute this from the entries dict\ntelomere_length = 100000  # For illustration\n\nchr_diagram = BasicChromosome.Organism()\nchr_diagram.page_size = (45 * cm, 500 * cm)  # A4 landscape\n\nfor index, (name, filename) in enumerate(entries):\n    record = SeqIO.read(filename, \"genbank\")\n    length = len(record)\n    features = [f for f in record.features if f.type == \"gene\"]\n    for f in features:\n        f.qualifiers[\"color\"] = [index + 2]\n    cur_chromosome = BasicChromosome.Chromosome(name)\n    cur_chromosome.scale_num = max_len + 2 * telomere_length\n    start = BasicChromosome.TelomereSegment()\n    start.scale = telomere_length\n    cur_chromosome.add(start)\n    body = BasicChromosome.AnnotatedChromosomeSegment(length, features)\n    body.scale = length\n    cur_chromosome.add(body)\n    end = BasicChromosome.TelomereSegment(inverted=True)\n    end.scale = telomere_length\n    cur_chromosome.add(end)\n    chr_diagram.add(cur_chromosome)\n\nchr_diagram.draw(\"Chromosome.pdf\", \"Xenopus laevis\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-sequence-parsing-with-plots.html",
        "section": "Session 25 \u2013 Biopython: Sequence Parsing with Plots",
        "subsection": "25.1 Histograms",
        "code": "from Bio import SeqIO\nsizes = [len(rec) for rec in SeqIO.parse(\"XL_1L_fasta.txt\", \"fasta\")]\n\nimport pylab\npylab.hist(sizes, bins=20)\npylab.title(\n    \"%i Xenopus laevis sequences\\nLengths %i to %i\" % (len(sizes), min(sizes), max(sizes))\n)\npylab.xlabel(\"Sequence length (bp)\")\npylab.ylabel(\"Count\")\n#pylab.show()\npylab.savefig(\"pylab_fig1.pdf\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-sequence-parsing-with-plots.html",
        "section": "Session 25 \u2013 Biopython: Sequence Parsing with Plots",
        "subsection": "25.2 GC Content",
        "code": "from Bio import SeqIO\nfrom Bio.SeqUtils import GC\n\ngc_values = sorted(GC(rec.seq) for rec in SeqIO.parse(\"XL_1L_fasta.txt\", \"fasta\"))\n\nimport pylab\n\npylab.plot(gc_values)\npylab.title(\n    \"%i orchid sequences\\nGC%% %0.1f to %0.1f\"\n    % (len(gc_values), min(gc_values), max(gc_values))\n)\npylab.xlabel(\"Genes\")\npylab.ylabel(\"GC%\")\npylab.show()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-sequence-parsing-with-plots.html",
        "section": "Session 25 \u2013 Biopython: Sequence Parsing with Plots",
        "subsection": "25.3 Nt Alignment Dot Plot",
        "code": "from Bio import SeqIO\n\nwith open(\"XL_1L_fasta.txt\") as in_handle:\n    record_iterator = SeqIO.parse(in_handle, \"fasta\")\n    rec_one = next(record_iterator)\n    rec_two = next(record_iterator)\n\nwindow = 7\nseq_one = str(rec_one.seq).upper()\nseq_two = str(rec_two.seq).upper()\ndata = [\n    [\n        (seq_one[i : i + window] != seq_two[j : j + window])\n        for j in range(len(seq_one) - window)\n    ]\n    for i in range(len(seq_two) - window)\n]\n\nimport pylab\n\npylab.gray()\npylab.imshow(data)\npylab.xlabel(\"%s (length %i bp)\" % (rec_one.id, len(rec_one)))\npylab.ylabel(\"%s (length %i bp)\" % (rec_two.id, len(rec_two)))\npylab.title(\"Dot plot using window size %i\\n(allowing no mis-matches)\" % window)\npylab.show()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-sequence-parsing-with-plots.html",
        "section": "Session 25 \u2013 Biopython: Sequence Parsing with Plots",
        "subsection": "25.4 Bigger Dots for the Dot Plot",
        "code": "from Bio import SeqIO\n\nwith open(\"XL_1L_fasta.txt\") as in_handle:\n    record_iterator = SeqIO.parse(in_handle, \"fasta\")\n    rec_one = next(record_iterator)\n    rec_two = next(record_iterator)\n\nwindow = 7\ndict_one = {}\ndict_two = {}\nfor (seq, section_dict) in [\n    (str(rec_one.seq).upper(), dict_one),\n    (str(rec_two.seq).upper(), dict_two),\n]:\n    for i in range(len(seq) - window):\n        section = seq[i : i + window]\n        try:\n            section_dict[section].append(i)\n        except KeyError:\n            section_dict[section] = [i]\n\nmatches = set(dict_one).intersection(dict_two)\nprint(\"%i unique matches\" % len(matches))\n\nx = []\ny = []\nfor section in matches:\n    for i in dict_one[section]:\n        for j in dict_two[section]:\n            x.append(i)\n            y.append(j)\n\npylab.cla()  # clear any prior graph\npylab.gray()\npylab.scatter(x, y)\npylab.xlim(0, len(rec_one) - window)\npylab.ylim(0, len(rec_two) - window)\npylab.xlabel(\"%s (length %i bp)\" % (rec_one.id, len(rec_one)))\npylab.ylabel(\"%s (length %i bp)\" % (rec_two.id, len(rec_two)))\npylab.title(\"Dot plot using window size %i\\n(allowing no mis-matches)\" % window)\npylab.show()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/biopython-sequence-parsing-with-plots.html",
        "section": "Session 25 \u2013 Biopython: Sequence Parsing with Plots",
        "subsection": "25.5 FASTQ we did not forget you",
        "code": "import pylab\nfrom Bio import SeqIO\n\nfor subfigure in [1, 2]:\n    filename = \"SRR11880886_%i.fastq\" % subfigure\n    pylab.subplot(1, 2, subfigure)\n    for i, record in enumerate(SeqIO.parse(filename, \"fastq\")):\n        if i >= 50:\n            break\n        pylab.plot(record.letter_annotations[\"phred_quality\"])\n    pylab.ylim(0, 45)\n    pylab.ylabel(\"PHRED quality score\")\n    pylab.xlabel(\"Position\")\n\npylab.show()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-web-scraping-w-beautifulsoup.html",
        "section": "Session 26 \u2013 Python: Web Scraping w/ BeautifulSoup",
        "subsection": "26.3 Getting started",
        "code": "#import request\nimport requests\n\n# get webpage data\npage = requests.get(\"https://dataquestio.github.io/web-scraping-pages/simple.html\")\n\n# if page provides output then we successfully downloaded the page into Python\npage\n\n# you can even get the status code of the webpage\npage.status_code\n\n# you can print the HTML content that was downloaded\npage.content\n\n# now that we downloaded the webpage we can use beautifulsoup to parse, the actual scraping of the content saved above\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# and we can view the html in a structured format\nprint(soup.prettify())\n\n# we can call the HTML as a list with soup\nlist(soup.children)\n\n# we can lookup the element types involved\n[type(item) for item in list(soup.children)]\n\n# We only want to look at the Tags in this case\nhtml = list(soup.children)[2]\nhtml\n\n# Reformat html tags as a list\nlist(html.children)\n\n# We can now further select the html tag from this new list\nbody = list(html.children)[3]\n\n# And make that into a list! We are making so many lists\nlist(body.children)\n\n# we can now select the 2nd item in the list\np = list(body.children)[1]\n\n# and finally we can extract only the text from that element without the html code that flanks it\np.get_text()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-web-scraping-w-beautifulsoup.html",
        "section": "Session 26 \u2013 Python: Web Scraping w/ BeautifulSoup",
        "subsection": "26.4 Mining all matching tags",
        "code": "# You can mine all tags as long as they are identical\nsoup = BeautifulSoup(page.content, 'html.parser')\nsoup.find_all('p')\n\n# Then you can subsequently extract the text\nsoup.find_all('p')[0].get_text()"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-web-scraping-w-beautifulsoup.html",
        "section": "Session 26 \u2013 Python: Web Scraping w/ BeautifulSoup",
        "subsection": "26.4 Mining all matching tags",
        "code": "# find will return the first instance\nsoup.find('p')"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-web-scraping-w-beautifulsoup.html",
        "section": "Session 26 \u2013 Python: Web Scraping w/ BeautifulSoup",
        "subsection": "26.5 Mining tags by class or id",
        "code": "page = requests.get(\"https://dataquestio.github.io/web-scraping-pages/ids_and_classes.html\")\nsoup = BeautifulSoup(page.content, 'html.parser')\nsoup\n\n\n# search tag and class\nsoup.find_all('p', class_='outer-text')\n\n# search only class\nsoup.find_all(class_=\"outer-text\")\n\n# search only id\nsoup.find_all(id=\"first\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-web-scraping-w-beautifulsoup.html",
        "section": "Session 26 \u2013 Python: Web Scraping w/ BeautifulSoup",
        "subsection": "26.6 Use CSS Selectors for positional mining",
        "code": "# finds all p tags inside of div tag\nsoup.select(\"div p\")\n\n# find all p tags with a class of outer-text\nsoup.select(\"p.outer-text\")\n\n# find all p tags with an id of first\nsoup.select(\"p#first\")\n\n# find all p tags with class outer-text inside of body tag\nsoup.select(\"body p.outer-text\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-web-scraping-w-beautifulsoup.html",
        "section": "Session 26 \u2013 Python: Web Scraping w/ BeautifulSoup",
        "subsection": "26.7 Weather Page Example",
        "code": "page = requests.get(\"https://forecast.weather.gov/MapClick.php?lat=37.7772&lon=-122.4168\")\nsoup = BeautifulSoup(page.content, 'html.parser')\nseven_day = soup.find(id=\"seven-day-forecast\")\nforecast_items = seven_day.find_all(class_=\"tombstone-container\")\ntonight = forecast_items[0]\nprint(tonight.prettify())\n\n\nperiod = tonight.find(class_=\"period-name\").get_text()\nshort_desc = tonight.find(class_=\"short-desc\").get_text()\ntemp = tonight.find(class_=\"temp\").get_text()\nprint(period)\nprint(short_desc)\nprint(temp)\n\n\nimg = tonight.find(\"img\")\ndesc = img['title']\nprint(desc)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-web-scraping-w-beautifulsoup.html",
        "section": "Session 26 \u2013 Python: Web Scraping w/ BeautifulSoup",
        "subsection": "26.7 Weather Page Example",
        "code": "# chunks of info\nperiod_tags = seven_day.select(\".tombstone-container .period-name\")\nperiods = [pt.get_text() for pt in period_tags]\nperiods\n\n# all info\nshort_descs = [sd.get_text() for sd in seven_day.select(\".tombstone-container .short-desc\")]\ntemps = [t.get_text() for t in seven_day.select(\".tombstone-container .temp\")]\ndescs = [d[\"title\"] for d in seven_day.select(\".tombstone-container img\")]\nprint(short_descs)\nprint(temps)\nprint(descs)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-web-scraping-w-beautifulsoup.html",
        "section": "Session 26 \u2013 Python: Web Scraping w/ BeautifulSoup",
        "subsection": "26.7 Weather Page Example",
        "code": "import pandas as pd\nweather = pd.DataFrame({\n    \"period\": periods,\n    \"short_desc\": short_descs,\n    \"temp\": temps,\n    \"desc\":descs\n})\nweather"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-subprocess.html",
        "section": "Session 27 \u2013 Python Subprocess",
        "subsection": "27.2 Creating your first python script w/ BBTools",
        "code": ">SRR123456789.001 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50\nTTTCGTAGCTAGATCGACTGACTGCTGCTACTACGATCGACTGCTGCGGG\n>SRR123456789.002 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50\nTTTCGTAGCTAGATCGACTGACTGCTGCTACTACGATCGACTGCTGCGGG\n>SRR123456789.003 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50\nTTTCGTAGCTAGATCGACTGACTGCTGCTACTACGATCGACTGCTGCTTT\n>SRR123456789.004 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50\nTTTCGTAGCTAGATCGACTGACTGCTGCTACTACGATCGACTGCTGCGGG\n>SRR123456789.005 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50\nACTGATCGATCGTCGATCGATCGCTCGTACGTGATCGATCGATCGTACGG\n>SRR123456789.006 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50\nACTGATCGATCGTCGATCGATCGCTCGTACGTGATCGATCGATCGTACGG"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/python-subprocess.html",
        "section": "Session 27 \u2013 Python Subprocess",
        "subsection": "27.2 Creating your first python script w/ BBTools",
        "code": "#!/usr/bin/env python3\nimport subprocess\nimport os\nimport tkinter as tk\nfrom tkinter import filedialog\nfrom my_first_script import *\n\ndef main(): # this can be the main backbone to call the rest of your functions\n    function_one() # this is one of many of the functions you can create to fuel your experiment\n    function_two()\n\nif __name__ == '__main__': # guards script from accidental usage outside of context\n    main()  # run main script\n\ndef function_one():\n    cwd = os.getcwd()\n    root = tk.Tk()\n    root.withdraw()\n    in_file = filedialog.askopenfilename()\n    subprocess.run(f\"{cwd}/bbmap/reformat.sh in={in_file} out=reformat_result.fasta trd\", shell=True)\n    # reformat: trim headers\n\ndef function_two():\n    cwd = os.getcwd()\n    subprocess.run(f\"{cwd}/bbmap/dedupe.sh in=reformat_result.fasta out=dedupe_result.fasta\", shell=True)\n    # dedupe: Remove duplicate contigs"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.2 Conditional if",
        "code": "##  Test if a number is even: A number is even if division by 2 give a remainder of 0; otherwise, if remainder is 1, the number is odd.\n\nmy_numbers <- c(1,2,5,6,8,12, 14.5)\n\n# only integers are allowed (i.e., no decimals)\n\nmy_numbers <- as.integer(my_numbers)\nmy_numbers\n#[1]  1  2  5  6  8 12 14\n\n# choose a single number, in this case the 4th element that is 6, an even number\n\none_number <- my_numbers[4]\none_number \n\n#[1] 6\n\n# if conditional test\n\nif((one_number%% 2) == 0) {\n                     print(paste(one_number,\"is even\"))\n                          }\n\n#[1] \"6 is even\"\n\n## Let's try with an odd number\n\none_number <- my_numbers[3]\none_number \n\n#[1] 5\n\n# if conditional test\n\nif((one_number%% 2) == 0) {\n                     print(paste(one_number,\"is even\"))\n                          }\n\n# There is not output, as the condition is not met by our choosen number: 5"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.3 Conditional if and else",
        "code": "##  Test if a number is even: A number is even if division by 2 give a remainder of 0; otherwise, if remainder is 1, the number is odd.\n\nmy_numbers <- c(1,2,5,6,8,12, 14.5)\n\n# only integers are allowed (i.e., no decimals)\n\nmy_numbers <- as.integer(my_numbers)\nmy_numbers\n#[1]  1  2  5  6  8 12 14\n\n# choose a single number, in this case the 4th element that is 6, an even number\n\none_number <- my_numbers[4]\none_number \n\n#[1] 6\n\n# if conditional test\n\nif((one_number%% 2) == 0) {\n                     print(paste(one_number,\"is even\"))\n                          } else {\n                     print(paste(one_number,\"is odd\"))  \n                          }\n\n#[1] \"6 is even\"\n\n## Let's try with an odd number\n\none_number <- my_numbers[3]\none_number \n\n#[1] 5\n\n# if conditional test\n\nif((one_number%% 2) == 0) {\n                     print(paste(one_number,\"is even\"))\n                          } else {\n                     print(paste(one_number,\"is odd\"))  \n                          } \n\n#[1] \"5 is odd\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.4 Nested conditionals if, else, and if else",
        "code": "##  We have a five students and you want to give them a letter grade based on their numeric scores\n\nmy_class_df <- data.frame(students = c(\"Joe\", \"Moe\", \"Luke\", \"Clarisa\", \"Jenny\"), exam1_scores = c(84.9,72.5,59.3,94.6,87.5))\n\nmy_class_df\n\n#  students exam1_scores\n#1      Joe         84.9\n#2      Moe         72.5\n#3     Luke         59.3\n#4  Clarisa         94.6\n#5    Jenny         87.5\n\nstr(my_class_df)\n#'data.frame':  5 obs. of  2 variables:\n# $ students    : chr  \"Joe\" \"Moe\" \"Luke\" \"Clarisa\" ...\n# $ exam1_scores: num  84.9 72.5 59.3 94.6 87.5\n\n## We need to extract Jenny's score \n\nJenny_score <- as.numeric(subset(my_class_df, students == \"Jenny\", select = \"exam1_scores\"))\nJenny_score\n#[1] 87.5\n\n## We can process the Jenny's score to letter grades using if, if else and else \n\nJenny_letter_grade <- character()\n\nif(Jenny_score >= 92.0) { Jenny_letter_grade <- \"A\"\n                      } else if (Jenny_score >= 89.5 & Jenny_score < 92.0) {Jenny_letter_grade <- \"A-\"\n                      } else if (Jenny_score >= 84.5 & Jenny_score < 89.5) {Jenny_letter_grade <- \"B+\"\n                      } else if (Jenny_score >= 82.0 & Jenny_score < 84.5) {Jenny_letter_grade <- \"B\"\n                      } else if (Jenny_score >= 79.5 & Jenny_score < 82.0) {Jenny_letter_grade <- \"B-\"\n                      } else if (Jenny_score >= 74.5 & Jenny_score < 79.5) {Jenny_letter_grade <- \"C+\"\n                      } else if (Jenny_score >= 72.0 & Jenny_score < 74.5) {Jenny_letter_grade <- \"C\"\n                      } else if (Jenny_score >= 69.5 & Jenny_score < 72.0) {Jenny_letter_grade <- \"C-\"\n                      } else if (Jenny_score >= 64.5 & Jenny_score < 69.5) {Jenny_letter_grade <- \"D+\"\n                      } else if (Jenny_score >= 59.5 & Jenny_score < 64.5) {Jenny_letter_grade <- \"D\"                      \n                      } else {Jenny_letter_grade <- \"F\"}\n\nJenny_letter_grade \n#[1] \"B+\"\n\ncat(\"\\n--- Jenny's score was :\", Jenny_score, \" this values corresponds to this letter grade: \", Jenny_letter_grade, \"\\n\")\n\n#--- Jenny's score was : 87.5  this values corresponds to this letter grade:  B+ "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.4 Nested conditionals if, else, and if else",
        "code": "## This requires that you have openxlsx installed\n\ninstall.packages(\"openxlsx\")\n\n## grader function\n\nmy_grader_function <- function(test_file_path,\n                               is_it_an_excel = TRUE,\n                               name_of_column_with_students = \"student\",\n                               name_of_column_with_exams = c(\"exam_1\", \"exam_2\",\"exam_3\"),\n                               max_score_per_exam = c(100,100,100),\n                               write_output_file = TRUE){\n\n# require\n\nrequire(openxlsx)\n\n# my input\n\ntest_file <- test_file_path\nis_excel <- is_it_an_excel\nname_students <- name_of_column_with_students\nname_exams <- name_of_column_with_exams\nmax_score_vector <- max_score_per_exam\nwrite_out <- write_output_file\n\n# read file\n\nif(is_excel) {\n\ntests_df <- read.xlsx(xlsxFile = test_file,\n                                   sheet = 1,\n                                startRow = 1,\n                                colNames = TRUE)\n             } else {\ntests_df <- read.table (file = test_file,\n                                    header = TRUE, \n                                       sep = \"\\t\",\n                          stringsAsFactors = FALSE)\n             }\n\nmax_score <- sum(max_score_vector)\ntests_df$final_score <- (rowSums(tests_df[2:ncol(tests_df)])/max_score)*100\ncat(\"\\n--- you imported this information and final score calculated:\\n\")\nprint(tests_df)\n\n# calculate total and grade for each student\n\nall_final_scores <- tests_df$final_score\n\nall_student_letter_grade <- character()\n\nfor(i in 1:nrow(tests_df)) {\n         # i <- 1\n         one_student_score <- all_final_scores[i]\n         \n\nif(one_student_score >= 92.0) { one_student_letter_grade <- \"A\"\n                      } else if (one_student_score >= 89.5 & one_student_score < 92.0) {one_student_letter_grade <- \"A-\"\n                      } else if (one_student_score >= 84.5 & one_student_score < 89.5) {one_student_letter_grade <- \"B+\"\n                      } else if (one_student_score >= 82.0 & one_student_score < 84.5) {one_student_letter_grade <- \"B\"\n                      } else if (one_student_score >= 79.5 & one_student_score < 82.0) {one_student_letter_grade <- \"B-\"\n                      } else if (one_student_score >= 74.5 & one_student_score < 79.5) {one_student_letter_grade <- \"C+\"\n                      } else if (one_student_score >= 72.0 & one_student_score < 74.5) {one_student_letter_grade <- \"C\"\n                      } else if (one_student_score >= 69.5 & one_student_score < 72.0) {one_student_letter_grade <- \"C-\"\n                      } else if (one_student_score >= 64.5 & one_student_score < 69.5) {one_student_letter_grade <- \"D+\"\n                      } else if (one_student_score >= 59.5 & one_student_score < 64.5) {one_student_letter_grade <- \"D\"                      \n                      } else {one_student_letter_grade <- \"F\"}\n\nall_student_letter_grade[i] <- one_student_letter_grade \n\n                             }\n\ntests_df$final_letter_grade <- all_student_letter_grade\n\ncat(\"\\n--- you final letter grades:\\n\")\nprint(tests_df)\n\n\n# write file\n\nif(write_out) {write.table(tests_df, file = \"my_students_letter_grade.txt\", sep = \"\\t\", row.names = FALSE)}\n\nreturn(tests_df)\n\n                             } # end of function\n\n## do not forget to set your working directory\nsetwd(\"~/Desktop/Teach_R/my_working_directory\")\n\n## run function\n\nresults <- my_grader_function(test_file_path = \"~/Desktop/Teach_R/my_working_directory/test_example.xlsx\",\n                   is_it_an_excel = TRUE,\n     name_of_column_with_students = \"student\",\n        name_of_column_with_exams = c(\"exam_1\", \"exam_2\",\"exam_3\"),\n               max_score_per_exam = c(100,100,100),\n                write_output_file = FALSE)\n\n#--- you imported this information and final score calculated:\n#  student exam_1 exam_2 exam_3 final_score\n#1     Joe     45     80     90    71.66667\n#2     Moe     60     70     75    68.33333\n#3    Luke     78     75     79    77.33333\n#4 Clasira     90     92     95    92.33333\n#5   Jenny     67     70     70    69.00000\n#6   Peter     80     82     90    84.00000\n#7   Pablo     87     85     90    87.33333\n\n#--- you final letter grades:\n#  student exam_1 exam_2 exam_3 final_score final_letter_grade\n#1     Joe     45     80     90    71.66667                 C-\n#2     Moe     60     70     75    68.33333                 D+\n#3    Luke     78     75     79    77.33333                 C+\n#4 Clasira     90     92     95    92.33333                  A\n#5   Jenny     67     70     70    69.00000                 D+\n#6   Peter     80     82     90    84.00000                  B\n#7   Pablo     87     85     90    87.33333                 B+"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.5 Conditional ifelse",
        "code": "##  We have a five students and you want to give them a letter grade based on their numeric scores\n\nmy_class_df <- data.frame(students = c(\"Joe\", \"Moe\", \"Luke\", \"Clarisa\", \"Jenny\"), exam1_scores = c(84.9,72.5,59.3,94.6,87.5))\n\nmy_class_df\n\n#  students exam1_scores\n#1      Joe         84.9\n#2      Moe         72.5\n#3     Luke         59.3\n#4  Clarisa         94.6\n#5    Jenny         87.5\n\nstr(my_class_df)\n#'data.frame':  5 obs. of  2 variables:\n# $ students    : chr  \"Joe\" \"Moe\" \"Luke\" \"Clarisa\" ...\n# $ exam1_scores: num  84.9 72.5 59.3 94.6 87.5\n\n## We need to extract Jenny's score\n\nJenny_score <- as.numeric(subset(my_class_df, students == \"Jenny\", select = \"exam1_scores\"))\nJenny_score\n#[1] 87.5\n\n## We can do a SIMPLE TEST to determine if Jenny's score is enough for PASS (if her score is >= 75) or FAIL (if it < 75)\n\ndid_Jenny_pass <- ifelse (Jenny_score >=75, \"Jenny PASSED her exam\", \"Jenny FAILED her exam\")\nprint(did_Jenny_pass)\n#[1] \"Jenny PASSED her exam\"\n\n## We can do also a chain of contionals to assign a letter grade using ifelse \n\nJenny_letter_grade <- ifelse(Jenny_score >= 92.0, \"A\",\n                      ifelse(Jenny_score >= 89.5 & Jenny_score < 92.0, \"A-\",\n                      ifelse(Jenny_score >= 84.5 & Jenny_score < 89.5, \"B+\",\n                      ifelse(Jenny_score >= 82.0 & Jenny_score < 84.5, \"B\",\n                      ifelse(Jenny_score >= 79.5 & Jenny_score < 82.0, \"B-\",\n                      ifelse(Jenny_score >= 74.5 & Jenny_score < 79.5, \"C+\",\n                      ifelse(Jenny_score >= 72.0 & Jenny_score < 74.5, \"C\",\n                      ifelse(Jenny_score >= 69.5 & Jenny_score < 72.0, \"C-\",\n                      ifelse(Jenny_score >= 64.5 & Jenny_score < 69.5, \"D+\",\n                      ifelse(Jenny_score >= 59.5 & Jenny_score < 64.5, \"D\", \"F\"))))))))))\n\nJenny_letter_grade \n#[1] \"B+\"\n\ncat(\"\\n--- Jenny's score was :\", Jenny_score, \" this values corresponds to this letter grade: \", Jenny_letter_grade, \"\\n\")\n\n#--- Jenny's score was : 87.5  this values corresponds to this letter grade:  B+ "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.7 The for Loop",
        "code": "##  here is a short for loop for stament where a number is multiplied by itself during 5 iterations\n\nmy_number <- 2\n\n# the loop will iterate for 1 to 5 in the sequence 1:5\n1:5\n#[1] 1 2 3 4 5\n\nfor(i in 1:5) {\n              cat(\"-- this iteration is i = \",i)\n              my_number <- my_number * my_number\n              cat(\" -- the result of the function in this loop is equal -- \", my_number, \"\\n\")\n\n               if(i==5) {print(\"the for loop reached the end!!\")}\n\n               }\n\n#-- this iteration is i =  1 -- the result of the function in this loop is equal --  4 \n#-- this iteration is i =  2 -- the result of the function in this loop is equal --  16 \n#-- this iteration is i =  3 -- the result of the function in this loop is equal --  256 \n#-- this iteration is i =  4 -- the result of the function in this loop is equal --  65536 \n#-- this iteration is i =  5 -- the result of the function in this loop is equal --  4294967296 \n#[1] \"the for loop reached the end!!\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.7 The for Loop",
        "code": "##  We have a five students and you want to give them a letter grade based on their numeric scores\n\nmy_class_df <- data.frame(students = c(\"Joe\", \"Moe\", \"Luke\", \"Clarisa\", \"Jenny\"), exam1_scores = c(84.9,72.5,59.3,94.6,87.5))\nmy_class_df\n#  students exam1_scores\n#1      Joe         84.9\n#2      Moe         72.5\n#3     Luke         59.3\n#4  Clarisa         94.6\n#5    Jenny         87.5\n\nstr(my_class_df)\n#'data.frame':  5 obs. of  2 variables:\n# $ students    : chr  \"Joe\" \"Moe\" \"Luke\" \"Clarisa\" ...\n# $ exam1_scores: num  84.9 72.5 59.3 94.6 87.5\n\n## we extract a vector with the scores\n\nstudents_score <- my_class_df$exam1_scores\nstudents_score\n#[1] 84.9 72.5 59.3 94.6 87.5\n\n## We need to get the letter grade for every student using a loop and stored in students_letter_grade character vector\n\nstudents_letter_grade <- character()\n\nfor (i in 1:length(students_score)) {\n\n# we iterate and calculate the letter_grade one student at a time\n\none_students_score <- students_score[i]\n\nif(one_students_score >= 92.0) { students_letter_grade[i] <- \"A\"\n                      } else if (one_students_score >= 89.5 & one_students_score < 92.0) {students_letter_grade[i] <- \"A-\"\n                      } else if (one_students_score >= 84.5 & one_students_score < 89.5) {students_letter_grade[i] <- \"B+\"\n                      } else if (one_students_score >= 82.0 & one_students_score < 84.5) {students_letter_grade[i] <- \"B\"\n                      } else if (one_students_score >= 79.5 & one_students_score < 82.0) {students_letter_grade[i] <- \"B-\"\n                      } else if (one_students_score >= 74.5 & one_students_score < 79.5) {students_letter_grade[i] <- \"C+\"\n                      } else if (one_students_score >= 72.0 & one_students_score < 74.5) {students_letter_grade[i] <- \"C\"\n                      } else if (one_students_score >= 69.5 & one_students_score < 72.0) {students_letter_grade[i] <- \"C-\"\n                      } else if (one_students_score >= 64.5 & one_students_score < 69.5) {students_letter_grade[i] <- \"D+\"\n                      } else if (one_students_score >= 59.5 & one_students_score < 64.5) {students_letter_grade[i] <- \"D\"                      \n                      } else {students_letter_grade[i] <- \"F\"}\n\n                                     }\n                                     rm <- i # we remove the i index\n\n## These are the letter grades for each student\n\nstudents_letter_grade\n#[1] \"B+\" \"C\"  \"F\"  \"A\"  \"B+\"\n\n## We can add these letter grades to our data frame, so we can see students names, numeric scores and letter grades\n\nmy_class_df$letter_grade <- students_letter_grade\nmy_class_df\n#  students exam1_scores letter_grade\n#1      Joe         84.9           B+\n#2      Moe         72.5            C\n#3     Luke         59.3            F\n#4  Clarisa         94.6            A\n#5    Jenny         87.5           B+"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.8 The while Loop",
        "code": "##  We will do a random sampling among 15 numbers, if the value sampled is 7 then the while stop\n\nmy_numbers <- c(1,3,45,33,5,9,7,11,14,15,19,23,22,31,30)\n\n# notice all the {} they should close in the following loop, otherwise the loop cannot run\n\nsampled_number <- 1\n\nwhile(!sampled_number == 7) {\n                 sampled_number <- sample(my_numbers, size = 1) # it sample randomly one number\n\n   if(!sampled_number == 7) {\n                 cat(\"the sampled number is -- \",sampled_number, \" -- this is DIFFERENT than 7 and the while loop will CONTINUE\\n\")\n                          } else {\n                 cat(\"the sampled number is -- \",sampled_number, \" -- this is EQUAL to 7 and the while loop will STOP\\n\")\n                            }\n\n                            }\n                            rm(sampled_number)\n\n#the sampled number is --  1  -- this is DIFFERENT than 7 and the while loop will CONTINUE\n#the sampled number is --  1  -- this is DIFFERENT than 7 and the while loop will CONTINUE\n#the sampled number is --  9  -- this is DIFFERENT than 7 and the while loop will CONTINUE\n#the sampled number is --  30  -- this is DIFFERENT than 7 and the while loop will CONTINUE\n#the sampled number is --  11  -- this is DIFFERENT than 7 and the while loop will CONTINUE\n#the sampled number is --  1  -- this is DIFFERENT than 7 and the while loop will CONTINUE\n#the sampled number is --  15  -- this is DIFFERENT than 7 and the while loop will CONTINUE\n#the sampled number is --  7  -- this is EQUAL to 7 and the while loop will STOP"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.9 The repeat Loop",
        "code": "##  We will repeat a proces by multipliying by 2 an starting number equal to 7 (x <- 7), if the value after a repetition is more than 24566 then the while stop\n\nx <- 7\ny <- 0\n\nrepeat {\n\n       y <- y + 1\n       cat(\"this is the repetition number ** \", y, \" **\\n\")\n       cat(\"the result of the function is:\", x,\"\\n\")\n             x <- x * 2\n\n       if (x >= 24566){\n                      cat(\"\\n\")\n                      print (\"we have reached a x value more or equal to 24566 and we will stop\")\n                      break\n                      }\n        }\n\n#7 this is the repetition number **  1  **\n#the result of the function is: 7 \n#this is the repetition number **  2  **\n#the result of the function is: 14 \n#this is the repetition number **  3  **\n#the result of the function is: 28 \n#this is the repetition number **  4  **\n#the result of the function is: 56 \n#this is the repetition number **  5  **\n#the result of the function is: 112 \n#this is the repetition number **  6  **\n#the result of the function is: 224 \n#this is the repetition number **  7  **\n#the result of the function is: 448 \n#this is the repetition number **  8  **\n#the result of the function is: 896 \n#this is the repetition number **  9  **\n#the result of the function is: 1792 \n#this is the repetition number **  10  **\n#the result of the function is: 3584 \n#this is the repetition number **  11  **\n#the result of the function is: 7168 \n#this is the repetition number **  12  **\n#the result of the function is: 14336 \n#[1] \"we have reached a x value more or equal to 24566 and we will stop\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.10 The next and break statements",
        "code": "##  like a if loops, if test is TRUE then next iteration in the loop\nif (test_condition) {\n                    next\n                     }"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.10 The next and break statements",
        "code": "##  like a if loops, if test is TRUE then break the containing loop\nif (test_expression) {\n                     break\n                     }"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.10 The next and break statements",
        "code": "##  an example of a for loop with the 'next' and 'break' arguments\nfor (my_value in 1:10) {\n               cat(\"my iteration correspond to my_value = \", my_value, \"\\n\")\n\n                    if (my_value == 6){\n                      cat(\"--- NOTE: my_value is equal 6 and it will SKIP the square calculation for my_value of 6 and continue to 7 \\n\")\n                                     next\n                                      }\n\n                   if (my_value == 9){\n                    cat(\"--- NOTE: my_value is equal 9 and it will STOP the for loop and it will not print square calculation for my_value equal 9 and 10 \\n\")\n                                     break\n                                      }\n                  square_of_my_value <- my_value^2\n                      cat(\"--- my_value square calculation is equal to \", square_of_my_value, \"\\n\")\n\n                          }\n\n#my iteration correspond to my_value =  1 \n#--- my_value square calculation is equal to  1 \n#my iteration correspond to my_value =  2 \n#--- my_value square calculation is equal to  4 \n#my iteration correspond to my_value =  3 \n#--- my_value square calculation is equal to  9 \n#my iteration correspond to my_value =  4 \n#--- my_value square calculation is equal to  16 \n#my iteration correspond to my_value =  5 \n#--- my_value square calculation is equal to  25 \n#my iteration correspond to my_value =  6 \n#--- NOTE: my_value is equal 6 and it will SKIP the square calculation for my_value of 6 and continue to 7 \n#my iteration correspond to my_value =  7 \n#--- my_value square calculation is equal to  49 \n#my iteration correspond to my_value =  8 \n#--- my_value square calculation is equal to  64 \n#my iteration correspond to my_value =  9 \n#--- NOTE: my_value is equal 9 and it will STOP the for loop and it will not print square calculation for my_value equal 9 and 10"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.10 The next and break statements",
        "code": "## Initial values\nmy_stop_the_loop_value <- 5\nmy_initial_value <- 10\nmy_value_to_skip <-7\n\n## while loop with a if test\nwhile(my_initial_value > my_stop_the_loop_value) {\n     \n     my_initial_value <- my_initial_value - 1\n      cat(\"my current value is \", my_initial_value, \"\\n\")\n\n     if (my_initial_value == my_value_to_skip) {\n         cat(\"NOTE: my current value is equal to my_value_to_skip:\", my_value_to_skip,\"\\n\")\n         cat(\"NOTE: my report value is WILL NOT BE PRINTED as it has been skipped \\n\")\n                                             next \n                                              } \n\n         report_value <- my_initial_value^2\n     cat(\"my report value is \",report_value, \"\\n\")\n    \n                                          } \n\n#mmy current value is  9 \n#my report value is  81 \n#my current value is  8 \n#my report value is  64 \n#my current value is  7 \n#NOTE: my current value is equal to my_value_to_skip: 7 \n#NOTE: my report value is WILL NOT BE PRINTED as it has been skipped \n#my current value is  6 \n#my report value is  36 \n#my current value is  5 \n#my report value is  25 "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.10 The next and break statements",
        "code": "## Initial values\nmy_stop_the_loop_value <- 10\nmy_initial_value <- 5\nmy_value_to_skip <- 7\n\n## repat loop with two if tests for break and next\nrepeat{\n     cat(\"my current value is \", my_initial_value, \"\\n\")\n\n         if(my_initial_value == my_stop_the_loop_value) {\n         cat(\"NOTE: my current value is equal to my_stop_the_loop_value:\", my_initial_value,\"\\n\")\n         cat(\"NOTE: the repeat loop has stopped \\n\")\n                                                   break\n                                                        } \n     if (my_initial_value == my_value_to_skip) {\n         cat(\"NOTE: my current value is equal to my_value_to_skip:\", my_value_to_skip,\"\\n\")\n         cat(\"NOTE: my report value is WILL NOT BE PRINTED as it has been skipped \\n\")\n         my_initial_value <- my_initial_value + 1\n                                             next \n                                              } \n\n         my_initial_value <- my_initial_value + 1\n     cat(\"my report value is \",my_initial_value, \"\\n\")\n       }\n\n#my current value is  5 \n#my report value is  6 \n#my current value is  6 \n#my report value is  7 \n#my current value is  7 \n#NOTE: my current value is equal to my_value_to_skip: 7 \n#NOTE: my report value is WILL NOT BE PRINTED as it has been skipped \n#my current value is  8 \n#my report value is  9 \n#my current value is  9 \n#my report value is  10 \n#my current value is  10 \n#NOTE: my current value is equal to my_stop_the_loop_value: 10 \n#NOTE: the repeat loop has stopped "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.12 lapply functions",
        "code": "## an input list\nmy_list <- list(numeric_vector = c(1, 3, 7, 10,5), my_df = data.frame(x = seq(1,10,2), y = c(34,23,45,78,101)))\nmy_list\n#$numeric_vector\n#[1]  1  3  7 10  5\n#\n#$my_df\n#  x   y\n#1 1  34\n#2 3  23\n#3 5  45\n#4 7  78\n#5 9 101\n\n## we want get the sum each element on this list\nlapply(my_list,FUN=sum)\n#$numeric_vector\n#[1] 26\n#\n#$my_df\n#[1] 306\n\n## maximum\nlapply(my_list,FUN=max)\n#$numeric_vector\n#[1] 10\n#\n#$my_df\n#[1] 101\n\n## we want get the mean each element on this list. However, notice that some functions cannot be applied to some elements (e.g., mean to a data.frame)\nlapply(my_list,FUN=mean)\n#$numeric_vector\n#[1] 5.2\n#\n#$my_df\n#[1] NA\n#\n#Warning message:\n#In mean.default(X[[i]], ...) :\n#  argument is not numeric or logical: returning NA"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.13 Other loop functions:apply",
        "code": "## PLACE HOLDER\nmtcars_data <- mtcars\n\n## PLACE HOLDER\nmtcars_names_vector <- rownames(mtcars_data)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.14 Other loop functions:mapply",
        "code": "## PLACE HOLDER\nmtcars_data <- mtcars\n\n## PLACE HOLDER\nmtcars_names_vector <- rownames(mtcars_data)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.15 Other loop functions:tapply",
        "code": "## PLACE HOLDER\nmtcars_data <- mtcars\n\n## PLACE HOLDER\nmtcars_names_vector <- rownames(mtcars_data)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/control-structures-loops-in-r.html",
        "section": "Session 28 \u2013 Control Structures & Loops in R",
        "subsection": "28.16 Other loop functions:split",
        "code": "## PLACE HOLDER\nmtcars_data <- mtcars\n\n## PLACE HOLDER\nmtcars_names_vector <- rownames(mtcars_data)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/bioinformatics-literature.html",
        "section": "Session 29 \u2013 Bioinformatics Literature",
        "subsection": "29.3 Informal access to code: Preprints and vignettes",
        "code": "## If you need to install this package in your computer:\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"DESeq2\")\n\n## If you already have installed the DESeq2 package, load it in R space:\n\nlibrary(DESeq2)\n\n## To view documentation and vignette associated with DESeq2:\n\nbrowseVignettes(\"DESeq2\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.1 Typing directly",
        "code": "## create a vector with some values named 'my_vector'\nmy_vector <- c(1,4,5,2:20,99)\nmy_vector\n#[1]  1  4  5  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 99"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.4 Importing data from a file",
        "code": "# ~/Desktop/Teach_R/class_datasets\n# Next, we can explore what files are inside such folder. \n# NOTE THAT THIS PATH IS SPECIFIC FOR YOUR COMPUTER\nsetwd(\"~/Desktop/Teach_R/class_datasets\")\npath_to_my_datafiles <- \"~/Desktop/Teach_R/class_datasets\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.4 Importing data from a file",
        "code": "setwd(\"C:\\Users\\myPC\\Desktop\\my_working_directory\\class_datasets\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.4 Importing data from a file",
        "code": "setwd(\"C:\\Users\\myPC\\Desktop\\my_working_directory\\class_datasets\")\n#Error: '\\U' used without hex digits in character string starting \"\"C:\\U\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.4 Importing data from a file",
        "code": "setwd(\"C:/Users/myPC/Desktop/my_working_directory/class_datasets\")\ngetwd()\n#[1] \"C:/Users/myPC/Desktop/my_working_directory/class_datasets\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.4 Importing data from a file",
        "code": "setwd(\"C:\\\\Users\\\\myPC\\\\Desktop\\\\my_working_directory\\\\class_datasets\")\ngetwd()\n#[1] \"C:/Users/myPC/Desktop/my_working_directory/class_datasets \""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.4 Importing data from a file",
        "code": "setwd(\"~/Desktop/Teach_R/class_datasets\")\n\npath_to_my_datafiles <- \"~/Desktop/Teach_R/class_datasets\"\n\nlist.files(path = path_to_my_datafiles, \n        pattern = NULL,\n     full.names = TRUE)\n#[1] \"/Users/juansantos/Desktop/Teach_R/class_datasets/acetylcholine_receptor_popset_1248341763_protein.txt\"\n#[2] \"/Users/juansantos/Desktop/Teach_R/class_datasets/acetylcholine_receptor_popset_1248341763.txt\"        \n#[3] \"/Users/juansantos/Desktop/Teach_R/class_datasets/acetylcholine_receptor_Uniprot.txt\"                  \n#[4] \"/Users/juansantos/Desktop/Teach_R/class_datasets/airway_scaledcounts.csv\"  \n\nmy_vector_of_paths <- list.files(path = path_to_my_datafiles, full.names = TRUE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.4 Importing data from a file",
        "code": "#we could select only those that have a .csv (comma delimited) files\nlist.files(path = path_to_my_datafiles, \n        pattern = \"*.csv\",\n     full.names = TRUE)\n# [1] \"/Users/santosj/Desktop/Teach_R/class_datasets/airway_scaledcounts.csv\"\n# [2] \"/Users/santosj/Desktop/Teach_R/class_datasets/mtcars2_csv.csv\"        "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.4 Importing data from a file",
        "code": "# for tab delimited files while preserving headers\nmy_mtcars2_file_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/mtcars2_file_tab.txt\", \n                                    header = TRUE, \n                                       sep = \"\\t\",\n                          stringsAsFactors = FALSE)\nhead(my_mtcars2_file_df)\n#               cars  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#1         Mazda_RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#2     Mazda_RX4_Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#3        Datsun_710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#4    Hornet_4_Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#5 Hornet_Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.4 Importing data from a file",
        "code": "# for comma delimited files while preserving headers\nmy_airway_file_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/airway_scaledcounts.csv\", \n                                    header = TRUE, \n                                       sep = \",\",\n                          stringsAsFactors = FALSE)\nhead(my_airway_file_df)\n#          ensgene SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 SRR1039520 SRR1039521\n#1 ENSG00000000003        723        486        904        445       1170       1097        806        604\n#2 ENSG00000000005          0          0          0          0          0          0          0          0\n#3 ENSG00000000419        467        523        616        371        582        781        417        509\n#4 ENSG00000000457        347        258        364        237        318        447        330        324\n#5 ENSG00000000460         96         81         73         66        118         94        102         74\n#6 ENSG00000000938          0          0          1          0          2          0          0          0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.5 Saving data to a file",
        "code": "#define the the output folder\nsetwd(\"~/Desktop/Teach_R/class_datasets\")\n#confirm that the output directory is correct\ngetwd()\n#[1] \"/Users/juansantos/Desktop/Teach_R/class_datasets\"\"\n# to determine the separation between columns is defined by the argument 'sep ='. For tabs, you use sep =\u201d\\t\u201d and for commas you use sep =\u201d,\u201d\nwrite.table(my_mtcars2_file_df, \n      file = \"mtcars2_file_tab.txt\", \n       sep = \"\\t\",\n col.names = TRUE)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.7 Import Excel formated data",
        "code": "#install package if not present in your library\ninstall.packages(\"openxlsx\")\nlibrary(openxlsx)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.7 Import Excel formated data",
        "code": "my_mtcars2_xlsx_df <- read.xlsx(xlsxFile = \"~/Desktop/Teach_R/class_datasets/mixed_datasets.xlsx\",\n                                   sheet = 1,\n                                startRow = 1,\n                                colNames = TRUE)\nhead(my_mtcars2_xlsx_df)\n#               cars  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#1         Mazda_RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#2     Mazda_RX4_Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#3        Datsun_710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#4    Hornet_4_Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#5 Hornet_Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.7 Import Excel formated data",
        "code": "my_airway_xlsx_df <- read.xlsx(xlsxFile = \"~/Desktop/Teach_R/class_datasets/mixed_datasets.xlsx\",\n                                   sheet = 2,\n                                startRow = 1,\n                                colNames = TRUE)\nhead(my_airway_xlsx_df)\n#          ensgene SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 SRR1039517 SRR1039520 SRR1039521\n#1 ENSG00000000003        723        486        904        445       1170       1097        806        604\n#2 ENSG00000000005          0          0          0          0          0          0          0          0\n#3 ENSG00000000419        467        523        616        371        582        781        417        509\n#4 ENSG00000000457        347        258        364        237        318        447        330        324\n#5 ENSG00000000460         96         81         73         66        118         94        102         74\n#6 ENSG00000000938          0          0          1          0          2          0          0          0"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.8 Save data as Excel formated file",
        "code": "#define the the output folder\nsetwd(\"~/Desktop/Teach_R/class_datasets\")\n#confirm that the output directory is correct\ngetwd()\n#[1] \"/Users/juansantos/Desktop/Teach_R/class_datasets\"\"\nmy_airway_xlsx_df <- write.xlsx(my_mtcars2_file_df,\n                                         sheetName = \"my_mtcars_xlsx_sheet\",\n                                              file = \"mtcars_xlsx.xlsx\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.9 Fixing problems while importing datasets",
        "code": "## We try to import this file and it has error\nmy_mtcars2_file_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/mtcars2_file_tab_with_errors.txt\", \n                                   header = TRUE, \n                                      sep = \"\\t\",\n                          stringsAsFactors = FALSE)\n\n\n## some examples of errors will be\n\n#Error in read.table(file = \"~/Desktop/Teach_R/class_datasets/mtcars2_file_tab_with_errors.txt\",  : \n#  more columns than column names\n\n#Error in scan(file = file, what = what, sep = sep, quote = quote, dec = dec,  : \n# line 3 did not have 15 elements\n\n## if you try to see if you have loaded that dataset, you get an error\nmy_mtcars2_file_df\n#Error: object 'my_mtcars2_file_df' not found"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.9 Fixing problems while importing datasets",
        "code": "## We try to import this file again\nmy_mtcars2_file_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/mtcars2_file_tab_with_errors2.txt\", \n                                   header = TRUE, \n                                      sep = \"\\t\",\n                          stringsAsFactors = FALSE)\nhead(my_mtcars2_file_df)\n#  cars.XX.            mpg.XX cyl.XX This.9s.a...very.complex.......Name  hp drat   wt  qsec    vs am gear carb X\n#1        1         Mazda_RX4   21.0                                   6 160  110 3.90 2.620 16.46  0    1    4 4\n#2        2     Mazda_RX4_Wag   21.0                                   6 160  110 3.90 2.875 17.02  0    1    4 4\n#3        3        Datsun_710   22.8                                   4 108   93 3.85 2.320 18.61  1    1    4 1\n#4        4    Hornet_4_Drive   21.4                                   6 258  110 3.08 3.215 19.44  1    0    3 1\n#5        5 Hornet_Sportabout   18.7                                   8 360  175 3.15 3.440 17.02  0    0    3 2\n#6        6           Valiant   18.1                                   6 225  105 2.76 3.460 20.22  1    0    3 1\nnames(my_mtcars2_file_df)\n#[1] \"cars.XX.\"                            \"mpg.XX\"                              \"cyl.XX\"                              \"This.9s.a...very.complex.......Name\" \"hp\"                                 \n#[6] \"drat\"                                \"wt\"                                  \"qsec\"                                \"vs\"                                  \"am\"                                 \n#[11] \"gear\"                                \"carb\"                                \"X\" "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.9 Fixing problems while importing datasets",
        "code": "## We try to import this file again\nmy_mtcars2_file_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/mtcars2_file_tab_with_errors3.txt\", \n                                   header = TRUE, \n                                      sep = \"\\t\",\n                          stringsAsFactors = FALSE)\nhead(my_mtcars2_file_df)\n#             cars.XX. mpg.XX cyl.XX This.9s.a...very.complex.......Name  hp drat    wt  qsec vs am gear carb\n#1         Mazda_RX4   21.0      6                                 160 110 3.90 2.620 16.46  0  1    4    4\n#2     Mazda_RX4_Wag   21.0      6                                 160 110 3.90 2.875 17.02  0  1    4    4\n#3        Datsun_710   22.8      4                                 108  93 3.85 2.320 18.61  1  1    4    1\n#4    Hornet_4_Drive   21.4      6                                 258 110 3.08 3.215 19.44  1  0    3    1\n#5 Hornet_Sportabout   18.7      8                                 360 175 3.15 3.440 17.02  0  0    3    2\n#6           Valiant   18.1      6                                 225 105 2.76 3.460 20.22  1  0    3    1names(my_mtcars2_file_df)\nnames(my_mtcars2_file_df)\n# [1] \"cars.XX.\"                            \"mpg.XX\"                              \"cyl.XX\"                              \"This.9s.a...very.complex.......Name\" \"hp\"                                 \n# [6] \"drat\"                                \"wt\"                                  \"qsec\"                                \"vs\"                                  \"am\"                                 \n#[11] \"gear\"                                \"carb\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.9 Fixing problems while importing datasets",
        "code": "## We try to import this file again\nmy_mtcars2_file_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/mtcars2_file_tab.txt\", \n                                   header = TRUE, \n                                      sep = \"\\t\",\n                          stringsAsFactors = FALSE)\nhead(my_mtcars2_file_df)\n#               cars  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#1         Mazda_RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#2     Mazda_RX4_Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#3        Datsun_710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#4    Hornet_4_Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#5 Hornet_Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\nnames(my_mtcars2_file_df)\n# [1] \"cars\" \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" \"carb\"  "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.10 Simplifying embellished excel datasets",
        "code": "library(openxlsx)\n\nincorrect_mtcars_xlsx_df <- read.xlsx(xlsxFile = \"~/Desktop/Teach_R/my_working_directory/mtcars_xlsx_to_clean.xlsx\",\n                                   sheet = 1,\n                                startRow = 1,\n                                colNames = TRUE)\nhead(incorrect_mtcars_xlsx_df)\n#                X1 Group.1  X3   X4  X5   X6            Group.2                 X8                 X9 X10 X11  X12  X13\n#1              cars     mpg cyl disp  hp drat                mpg                 wt               qsec  vs  am gear carb\n#2         Mazda_RX4      21   6  160 110  3.9                 20               2.62              16.46   0   1    4    4\n#3     Mazda_RX4_Wag      21   6  160 110  3.9                 20              2.875              17.02   0   1    4    4\n#4        Datsun_710    22.8   4  108  93 3.85               21.8 2.3199999999999998              18.61   1   1    4    1\n#5    Hornet_4_Drive    21.4   6  258 110 3.08 20.399999999999999 3.2149999999999999 19.440000000000001   1   0    3    1\n#6 Hornet_Sportabout    18.7   8  360 175 3.15               17.7               3.44              17.02   0   0    3    2\n\nnames(incorrect_mtcars_xlsx_df)\n# [1] \"X1\"      \"Group.1\" \"X3\"      \"X4\"      \"X5\"      \"X6\"      \"Group.2\" \"X8\"      \"X9\"      \"X10\"     \"X11\"     \"X12\"     \"X13\" "
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.10 Simplifying embellished excel datasets",
        "code": "library(openxlsx)\n\ncorrect_mtcars_xlsx_df <- read.xlsx(xlsxFile = \"~/Desktop/Teach_R/my_working_directory/mtcars_xlsx_cleaned.xlsx\",\n                                   sheet = 1,\n                                startRow = 1,\n                                colNames = TRUE)\nhead(correct_mtcars_xlsx_df)\n#               cars Group_1_mpg Group_1_cyl Group_1_disp Group_1_hp Group_1_drat Group_2_mpg Group_2_wt Group_2_qsec Group_2_vs Group_2_am Group_2_gear Group_2_carb\n#1         Mazda_RX4        21.0           6          160        110         3.90        20.0      2.620        16.46          0          1            4            4\n#2     Mazda_RX4_Wag        21.0           6          160        110         3.90        20.0      2.875        17.02          0          1            4            4\n#3        Datsun_710        22.8           4          108         93         3.85        21.8      2.320        18.61          1          1            4            1\n#4    Hornet_4_Drive        21.4           6          258        110         3.08        20.4      3.215        19.44          1          0            3            1\n#5 Hornet_Sportabout        18.7           8          360        175         3.15        17.7      3.440        17.02          0          0            3            2\n#6           Valiant        18.1           6          225        105         2.76        17.1      3.460        20.22          1          0            3            1\n\nnames(correct_mtcars_xlsx_df)\n#[1] \"cars\"         \"Group_1_mpg\"  \"Group_1_cyl\"  \"Group_1_disp\" \"Group_1_hp\"   \"Group_1_drat\" \"Group_2_mpg\"  \"Group_2_wt\"   \"Group_2_qsec\" \"Group_2_vs\"   \"Group_2_am\"   \"Group_2_gear\"\n#[13] \"Group_2_carb\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.11 Accessing online data: DRYAD",
        "code": "## We start by readinf the metadata about such file in the text of README_for_Data_Files.txt. \n## We found the following:\n\nARG_Raw.csv\n\nThis is a data table of the output of running BLASTn with the contigs of the draft \ngenome assemblies of the isolates against the ResFinder database (nucleotide). The \ncolumn headings mostly correspond to standard blast outputs but are outlined below:\n\n   Strain-Which strain genome the hit was.\n\n   Contig-Most genomes are draft assemblies so there are multiple segments (here \n   called nodes), this shows which node the hit occurred in.\n\n   ARG- which antibiotic resistance gene in the query matched the sequence.\n\n   Per.ID- Percentage identity.\n\n   Length- Length of the matching region\n\n   MiMa- Number of mismatches \n\n   Gap- Total length of gaps\n\n   C.Start & C.End- Start and end of the matching region on the contig\n\n   A.Start & A.End- Start and end of the matching region on the query\n\n   E. value- Significance value for the hit, calculated within strain.\n\n   Bit.Score- overall score for the strength of the Hit. For overlapping\n   hits, only the highest bit score was retained.\n\n\n## We need to find the path to the corresponding file by \"drag-and-drop\" in \n## MACs or finding file properties in PCs. \n## In my computer (MAC), they look like this:\n\n~/Desktop/Teach_R/class_datasets/Dryad_example_for_Data_Files/ARG_Raw.csv\n\n## Both files are *.csv (i.e., comma delimited files), so they can be easily \n## imported with the read.table function. \n## These files have data as comma delimited and we want to preserve headers\n\nARG_Raw_Allen_etal_2019_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/Dryad_example_for_Data_Files/ARG_Raw.csv\", \n                                    header = TRUE, \n                                       sep = \",\",\n                          stringsAsFactors = FALSE)\n\n\nhead(ARG_Raw_Allen_etal_2019_df)\n#    X Strain  Contig                  ARG  Per.ID Length MiMa Gap C.Start  C.End A.Start A.End E.val Bit.Score\n#1  2 705963  NODE_6      mdf(A)_1_Y08743  97.891   1233   26   0   40970  42202       1  1233     0      2134\n#2  1 706090  NODE_4      mdf(A)_1_Y08743  97.891   1233   26   0   19449  20681       1  1233     0      2134\n#3 50 707404 NODE_12      mdf(A)_1_Y08743  97.567   1233   30   0  113267 114499    1233     1     0      2111\n#4  6 707404 NODE_23      sul2_2_AY034138 100.000    816    0   0    8928   9743       1   816     0      1507\n#5 28 707404 NODE_23 aph(3)-Ib_5_AF321551 100.000    529    0   0    9804  10332       1   529     0       977\n#6 38 707404 NODE_23    dfrA14_5_DQ388123  99.793    483    1   0   10343  10825       1   483     0       887\n\nstr(ARG_Raw_Allen_etal_2019_df)\n#'data.frame':  36 obs. of  14 variables:\n# $ X        : int  2 1 50 6 28 38 11 5 21 61 ...\n# $ Strain   : chr  \"705963\" \"706090\" \"707404\" \"707404\" ...\n# $ Contig   : chr  \"NODE_6\" \"NODE_4\" \"NODE_12\" \"NODE_23\" ...\n# $ ARG      : chr  \"mdf(A)_1_Y08743\" \"mdf(A)_1_Y08743\" \"mdf(A)_1_Y08743\" \"sul2_2_AY034138\" ...\n# $ Per.ID   : num  97.9 97.9 97.6 100 100 ...\n# $ Length   : int  1233 1233 1233 816 529 483 837 1233 1206 861 ...\n# $ MiMa     : int  26 26 30 0 0 1 0 26 0 0 ...\n# $ Gap      : int  0 0 0 0 0 0 0 0 0 0 ...\n# $ C.Start  : int  40970 19449 113267 8928 9804 10343 11175 28147 2128 4849 ...\n# $ C.End    : int  42202 20681 114499 9743 10332 10825 12011 29379 3333 5709 ...\n# $ A.Start  : int  1 1 1233 1 1 1 1 1233 1 1 ...\n# $ A.End    : int  1233 1233 1 816 529 483 837 1 1206 861 ...\n# $ E.val    : num  0 0 0 0 0 0 0 0 0 0 ...\n# $ Bit.Score: int  2134 2134 2111 1507 977 887 1546 2134 2228 1591 ...\n\n## We notice this data frame has LESS rows (only 36) than the original dataset \n## that has 230 rows (you can check this by opening the ARG_Raw.csv file in a text editor). \ndim(ARG_Raw_Allen_etal_2019_df)\n#[1] 36 14\n\n## If we explore the original file: ARG_Raw.csv, this has special characters ('). \n## This character can be problematic, so we find a replace it  with \"_\" or removing \n## them completely using a text editor. After removing this special character, we \n## save the new modified file as ARG_Raw_modified.csv and we can import it to R.\n\nARG_Raw_modified_Allen_etal_2019_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/Dryad_example_for_Data_Files/ARG_Raw_modified.csv\", \n                                    header = TRUE, \n                                       sep = \",\",\n                          stringsAsFactors = FALSE)\nhead(ARG_Raw_modified_Allen_etal_2019_df)\n#    X Strain  Contig                    ARG  Per.ID Length MiMa Gap C.Start  C.End A.Start A.End E.val Bit.Score\n#1  2 705963  NODE_6        mdf(A)_1_Y08743  97.891   1233   26   0   40970  42202       1  1233     0      2134\n#2  1 706090  NODE_4        mdf(A)_1_Y08743  97.891   1233   26   0   19449  20681       1  1233     0      2134\n#3 50 707404 NODE_12        mdf(A)_1_Y08743  97.567   1233   30   0  113267 114499    1233     1     0      2111\n#4  6 707404 NODE_23        sul2_2_AY034138 100.000    816    0   0    8928   9743       1   816     0      1507\n#5 28 707404 NODE_23 aph(3__)-Ib_5_AF321551 100.000    529    0   0    9804  10332       1   529     0       977\n#6 38 707404 NODE_23      dfrA14_5_DQ388123  99.793    483    1   0   10343  10825       1   483     0       887\n\nstr(ARG_Raw_modified_Allen_etal_2019_df)\n#''data.frame': 230 obs. of  14 variables:\n# $ X        : int  2 1 50 6 28 38 11 5 21 61 ...\n# $ Strain   : chr  \"705963\" \"706090\" \"707404\" \"707404\" ...\n# $ Contig   : chr  \"NODE_6\" \"NODE_4\" \"NODE_12\" \"NODE_23\" ...\n# $ ARG      : chr  \"mdf(A)_1_Y08743\" \"mdf(A)_1_Y08743\" \"mdf(A)_1_Y08743\" \"sul2_2_AY034138\" ...\n# $ Per.ID   : num  97.9 97.9 97.6 100 100 ...\n# $ Length   : int  1233 1233 1233 816 529 483 837 1233 1206 861 ...\n# $ MiMa     : int  26 26 30 0 0 1 0 26 0 0 ...\n# $ Gap      : int  0 0 0 0 0 0 0 0 0 0 ...\n# $ C.Start  : int  40970 19449 113267 8928 9804 10343 11175 28147 2128 4849 ...\n# $ C.End    : int  42202 20681 114499 9743 10332 10825 12011 29379 3333 5709 ...\n# $ A.Start  : int  1 1 1233 1 1 1 1 1233 1 1 ...\n# $ A.End    : int  1233 1233 1 816 529 483 837 1 1206 861 ...\n# $ E.val    : num  0 0 0 0 0 0 0 0 0 0 ...\n# $ Bit.Score: int  2134 2134 2111 1507 977 887 1546 2134 2228 1591 ...\n\n\n## We notice that have imported dataset has the corrected number of rows (230) \n## and it is ready for our use in your analyses\ndim(ARG_Raw_modified_Allen_etal_2019_df)\n#[1] 230  14"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.11 Accessing online data: DRYAD",
        "code": "## We start by readinf the metadata about such file in the text of README_for_Data_Files.txt. \n## We found the following:\n\nGrowth_Curves.csv\n\nThis file contains the raw growth data which was used to fit the Gompertz growth curves. \nThe column headings are:\n   \n   Master-Which of the two frozen master plates was used to inoculate the \n   overnight culture which inoculated this assay plate.\n\n   Sub.plate-Which of the 2 plates inoculated by the master plate this is. Thus \n   there are 4 replicates.\n\n   Treatment-Which of the 3 environmental conditions this growth was for.\n\n   Strain-Which strain the measurement came from. Those marked as blank had \n   no strain inoculated. Blanks have not been subtracted,there was a single \n   blank on each plate.\n\n   OD-Optical density measured at 595nm.\n\n   Read-An integer value for which read this is, takes values of 1-41.\n\n   Time-The exact time (relative to the start of the growth experiment) \n   that the read was taken in hours, shown as a fraction (e.g. 4.5 is 4Hrs30Mins).\n\n\n## We need to find the path to the corresponding file by \"drag-and_drop\" in MACs \n## or finding file properties in PCs. \n## In my computer (MAC), they look like this:\n\n~/Desktop/Teach_R/class_datasets/Dryad_example_for_Data_Files/Growth_Curves.csv\n\n## Both files are *.csv (i.e., comma delimited files), so they can be easily \n## imported with the read.table function. These files have data as comma \n## delimited and we want to preserve headers\n\nGrowth_Curves_Allen_etal_2019_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/Dryad_example_for_Data_Files/Growth_Curves.csv\", \n                                    header = TRUE, \n                                       sep = \",\",\n                          stringsAsFactors = FALSE)\n\n\nhead(Growth_Curves_Allen_etal_2019_df)\n#      X Master Sub.plate Treatment Strain     OD Read      Time\n#1 1      2         1     Basal ECOR31 0.3877   38 44.488156\n#2 2      2         1     Basal ECOR31 0.5019   12 13.760846\n#3 3      2         1     Basal ECOR31 0.4839   11 12.588198\n#4 4      2         1     Basal ECOR31 0.5245   20 23.211779\n#5 5      2         1     Basal ECOR31 0.4581   29 33.816143\n#6 6      2         1     Basal ECOR31 0.0590    2  1.977896\n\nstr(Growth_Curves_Allen_etal_2019_df)\n#''data.frame': 45756 obs. of  8 variables:\n# $ X        : int  1 2 3 4 5 6 7 8 9 10 ...\n# $ Master   : int  2 2 2 2 2 2 2 2 2 2 ...\n# $ Sub.plate: int  1 1 1 1 1 1 1 1 1 1 ...\n# $ Treatment: chr  \"Basal\" \"Basal\" \"Basal\" \"Basal\" ...\n# $ Strain   : chr  \"ECOR31\" \"ECOR31\" \"ECOR31\" \"ECOR31\" ...\n# $ OD       : num  0.388 0.502 0.484 0.524 0.458 ...\n# $ Read     : int  38 12 11 20 29 2 21 39 18 4 ...\n# $ Time     : num  44.5 13.8 12.6 23.2 33.8 ...\n\n## We notice this data frame, this has EXACT number of rows than the original \n## that the original files with 45756 rows. \ndim(Growth_Curves_Allen_etal_2019_df)\n#[1] 45756     8"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.12 Accessing online data: Gene Expression Omnibus (NCBI GEO)",
        "code": "Salamander_Moral_Morales_etal_2024_df <- read.table (file = \"~/Desktop/Teach_R/class_datasets/GSE237864_count_matrix.txt\", \n                                    header = TRUE, \n                                       sep = \"\\t\",\n                          stringsAsFactors = FALSE)\n\n\nhead(Salamander_Moral_Morales_etal_2024_df)\n#   ensembl_gene_id_version X18134R.126.01 X18134R.126.02 X18134R.126.03 X18134R.126.04 X18134R.126.05 X18134R.126.06 X18134R.126.07\n#1          AMEX60DD000001              2              0              8              1              0              3              0\n#2          AMEX60DD000002              8             14              2              4              2              3              5\n#3          AMEX60DD000003             88            123             99             53             59            176            121\n#4          AMEX60DD000004             22             80             27             34             28             45             65\n#5          AMEX60DD000005             11              2              0             11              1              4             10\n#6          AMEX60DD000006              2              8              2              3              3              8              2\n\nstr(Salamander_Moral_Morales_etal_2024_df)\n#''data.frame': 99088 obs. of  13 variables:\n# $ ensembl_gene_id_version: chr  \"AMEX60DD000001\" \"AMEX60DD000002\" \"AMEX60DD000003\" \"AMEX60DD000004\" ...\n# $ X18134R.126.01         : int  2 8 88 22 11 2 0 213 0 0 ...\n# $ X18134R.126.02         : int  0 14 123 80 2 8 0 156 0 0 ...\n# $ X18134R.126.03         : int  8 2 99 27 0 2 0 276 0 0 ...\n# $ X18134R.126.04         : int  1 4 53 34 11 3 0 63 1 0 ...\n# $ X18134R.126.05         : int  0 2 59 28 1 3 0 63 0 0 ...\n# $ X18134R.126.06         : int  3 3 176 45 4 8 0 116 0 0 ...\n# $ X18134R.126.07         : int  0 5 121 65 10 2 0 75 0 0 ...\n# $ X18134R.126.08         : int  1 4 85 54 7 0 0 122 0 0 ...\n# $ X18134R.126.09         : int  4 26 164 65 12 6 0 165 0 0 ...\n# $ X18134R.126.10         : int  6 5 127 41 0 0 0 133 0 0 ...\n# $ X18134R.126.11         : int  2 20 176 63 9 7 0 195 0 0 ...\n# $ X18134R.126.12         : int  3 3 73 46 5 4 0 164 0 0 ...\n\ndim(Salamander_Moral_Morales_etal_2024_df)\n#[1] 99088    13"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.14 Accessing online data: Data scrapping from a website",
        "code": "# Install and load rvest\ninstall.packages(\"rvest\")\nlibrary (rvest)\n\n# Change to working directory\n\nsetwd(\"~/Desktop/Teach_R/Some_directoty\")\n\n# create an vector with web address \n\nhtml <- read_html(\"https://www.stjohns.edu/academics/office-registrar/academic-calendar/final-exam-schedule\")\nhtml\n#{{html_document}\n#<html lang=\"en\" dir=\"ltr\" prefix=\"content: http://purl.org/rss/1.0/modules/content/  dc: http://purl.org/dc/terms/  foaf: http://xmlns.com/foaf/0.1/  og: http://ogp.me/ns#  rdfs: http://www.w3.org/2000/01/rdf-schema#  schema: http://schema.org/  sioc: http://rdfs.org/sioc/ns#  sioct: http://rdfs.org/sioc/types#  skos: http://www.w3.org/2004/02/skos/core#  xsd: http://www.w3.org/2001/XMLSchema# \">\n#[1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\\n<meta charset=\"utf-8\">\\n<script type=\"text/javascript\">(window.NREUM|| ...\n#[2] <body>\\n    <!-- Google Tag Manager -->\\n    <noscript><iframe src=\"//www.googletagmanager.com/ns.html?id=GTM-5STJNB\" height=\"0\" width=\"0\" style=\"d ...\n\n# Get dates as table\n\nexams_table <- html_node(html , \"table\")\nexams_table_tibble <- html_table(exams_table)\nexams_table_tibble\n\n# A tibble: 31 \u00d7 4\n#   `Class Meeting` Time                   `Final Exam/Final Class` Time                  \n#   <chr>           <chr>                  <chr>                    <chr>                 \n# 1 \"Days\"          \"Time\"                 \"Date\"                   \"Time\"                \n# 2 \"M-R\"           \"9:05 a.m.-10:30 a.m.\" \"May 4 (R)\"              \"9:05 a.m.-11:05 a.m.\"\n# 3 \"M-R\"           \"12:15 p.m.-1:40 p.m.\" \"May 4 (R)\"              \"12:15 p.m.-2:15 p.m.\"\n# 4 \"M-R\"           \"5:00 p.m.-6:25 p.m.\"  \"May 4 (R)\"              \"5:00 p.m.-7:00 p.m.\" \n# 5 \"M-R\"           \"8:45 p.m.-10:10 p.m.\" \"May 4 (R)\"              \"8:45 p.m.-10:45 p.m.\"\n# 6 \"\"              \"\"                     \"\"                       \"\"                    \n# 7 \"T-F\"           \"9:05 a.m.-10:30 a.m.\" \"May 5 (F)\"              \"9:05 a.m.-11:05 a.m.\"\n# 8 \"T-F\"           \"12:15 p.m.-1:40 p.m.\" \"May 5 (F)\"              \"12:15 p.m.-2:15 p.m.\"\n# 9 \"T-F\"           \"3:25 p.m.-4:50 p.m.\"  \"May 5 (F)\"              \"3:25 p.m.-5:25 p.m.\" \n#10 \"T-F\"           \"7:10 p.m.-8:35 p.m.\"  \"May 5 (F)\"              \"7:10 p.m.-9:10 p.m.\" \n# \u2026 with 21 more rows\n# \u2139 Use `print(n = ...)` to see more rows\n\n\n# Write such table in a text file in your working directory\n\nwrite.csv(exams_table_tibble, \"sju_academic_calendar_scrap.csv\")\nwrite.table(exams_table_tibble, \"sju_academic_calendar_scrap.txt\", sep = \"\\t\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/importingexporting-data-into-r.html",
        "section": "Session 30 \u2013 Importing/Exporting Data into R",
        "subsection": "30.14 Accessing online data: Data scrapping from a website",
        "code": "# Change to working directory\n\nsetwd(\"~/Desktop/Teach_R/Some_directoty\")\n\n# Create an vector with web address (for example a clinical trial results)\n\nhtml <- read_html(\"https://clinicaltrials.gov/ct2/show/results/NCT02414854?cond=Asthma&cntry=US&state=US%3ANY&city=Jamaica&draw=2&rank=1\")\nhtml\n#{html_document}\n#<html xmlns=\"https://www.w3.org/1999/xhtml\" lang=\"en\">\n#[1] <head>\\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n<meta http-equ ...\n#[2] <body> \\n<script type=\"text/javascript\">\\n    jQuery.getScript(\"https://www.ncbi.nlm.nih.gov/core/alerts/alerts.js\", function () {\\n      galert([' ...\n\n# Get all the text in a vector\n\ntext_on_webpage <- html_text(html)\nhead(text_on_webpage)\n\n# Write such vector in a text file in your working directory\n\nwrite(text_on_webpage, \"text_on_webapge.txt\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.2 Fetching AA sequences from NCBI",
        "code": "library(rentrez)\n# if you need to install R-package 'rentrez', use install.packages(\"rentrez\")\n\n# Download some amino sequences from NCBI for Epipedobates anthonyi[Organism] that correspond to the gene COI\nfroggy_name_COX1_prot <- \"Epipedobates anthonyi[Organism] AND COI[Gene]\"\nfroggy_seq_IDs_prot <- entrez_search(db=\"protein\", term= froggy_name_COX1_prot)\nfroggy_seq_IDs_prot\n#Entrez search result with 2 hits (object contains 2 IDs and no web_history object)\n# Search term (as translated):  \"Epipedobates anthonyi\"[Organism] AND COI[Gene] \n \n\n# revising the structure of 'froggy_seq_IDs_prot' that there are 2 sequence in NCBI protein database\nstr(froggy_seq_IDs_prot)\n#List of 5\n# $ ids             : chr [1:2] \"1952638368\" \"110332819\"\n# $ count           : int 2\n# $ retmax          : int 2\n# $ QueryTranslation: chr \"\\\"Epipedobates anthonyi\\\"[Organism] AND COI[Gene]\"\n# $ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n# - attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\n\nfroggy_seqs_prot_fasta <- entrez_fetch(db=\"protein\", id=froggy_seq_IDs_prot$ids, rettype=\"fasta\")\ncat(froggy_seqs_prot_fasta)\n#>QQL01627.1 cytochrome oxidase subunit I, partial (mitochondrion) [Epipedobates anthonyi]\n#VMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMV\n#MPILIGGFGNWLVPLMIGAPDMAFPRMNNMSFWLLPPSFLLLLASAGVEAGAGTGWTVYPPLAGNLAHAG\n#PSVDLTIFSLHLAGVSSILGAINFITTTLNMKPPSLTQYQTPLFVWSVLITAVLLLLSLPVLAAGITMLL\n#TDRNLNTTFFDPAGGGDPILYQHLFWFFGHPEVYILILPGFGIISHVVTFYSSKKEPFGYMGMVWAMMSI\n#GLLGFIVWAHHMFTTDLNVDTRAYFTSATMIIAIPTGVKVFSWLATMHGGIIKWDAAMLWALGFIFLFTV\n#GGLTGIVLANSSLDIVLHDTYYVVAHFHYVLSMGAVFAIMAGFVHWFPLFTGFTLHEAWTKIHFGVMFAG\n#VNLTFFPQHFLGLAGMPRRYSDYPDAYTLWNTVSSVGSLISLVAVIIMMFIIWEAFSSKRLFLNAEMTPT\n#NVEWLYGSPPPYHTFEEAVYSKV\n#\n#>ABG67395.1 cytochrome oxidase subunit I, partial (mitochondrion) [Epipedobates anthonyi]\n#TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNWLVPLM\n#IGAPDMAFPRMNNMSFWLLPPSFLLLLASTGVEAGAGTGWTVYPPLAGNLAHAGPSVDLTIFSLHLAGVS\n#SILGAINFITTTLNMKPPSLTQYQTPLFVWSVLITAVLLLLSLPVLAAGITMLLTDRNLNTTFFDPAGGG\n#DPILYQHLF"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.2 Fetching AA sequences from NCBI",
        "code": "# this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/working_with_proteins\")\nwrite(froggy_seqs_prot_fasta, \"Eanthonyi_COI_prot_seqs.fasta\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.2 Fetching AA sequences from NCBI",
        "code": "library(rentrez)\n# if you need to install R-package 'rentrez', use install.packages(\"rentrez\")\n\n# Download some amino sequences from NCBI for Epipedobates anthonyi[Organism] that correspond to the gene ND2\nfroggy_name_ND2_nuc <- \"Epipedobates anthonyi[Organism] AND ND2[Gene]\"\nfroggy_seq_IDs_nuc <- entrez_search(db=\"nuccore\", term= froggy_name_ND2_nuc)\nfroggy_seq_IDs_nuc\n#Entrez search result with 1 hits (object contains 1 IDs and no web_history object)\n# Search term (as translated):  \"Epipedobates anthonyi\"[Organism] AND ND2[Gene] \n \n\n# revising the structure of 'froggy_seq_IDs_nuc' that there are 1 sequence in NCBI protein database\nstr(froggy_seq_IDs_nuc)\n#List of 5\n# $ ids             : chr \"328728262\"\n# $ count           : int 1\n# $ retmax          : int 1\n# $ QueryTranslation: chr \"\\\"Epipedobates anthonyi\\\"[Organism] AND ND2[Gene]\"\n# $ file            :Classes 'XMLInternalDocument', 'XMLAbstractDocument' <externalptr> \n# - attr(*, \"class\")= chr [1:2] \"esearch\" \"list\"\n\nfroggy_seqs_nuc_fasta <- entrez_fetch(db=\"nuccore\", id=froggy_seq_IDs_nuc$ids, rettype=\"fasta\")\ncat(froggy_seqs_nuc_fasta)\n#>HQ290995.1 Epipedobates anthonyi 12S ribosomal RNA gene, partial sequence; tRNA-Val, 16S ribosomal RNA, and tRNA-Leu genes, complete sequence; NADH dehydrogenase subunit 1 (ND1) gene, partial cds; tRNA-Ile, tRNA-Gln, and tRNA-Met genes, complete sequence; and NADH dehydrogenase subunit 2 (ND2) gene, complete cds; mitochondrial\n#AAGGTTTGGTCCTAGCCTTGAAATCAGTTATTATTTAATATACACATGCAAGTCTCCGCACCCCTGTGAA\n#AACGCCCTTATTCTCCCCTACAGGGAGCAGGAGCCGGTATCAGGCACAAATTTTTGCCCATAACACCTAG\n#CATCGCCACACCCACAAGGGACTTCAGCAGTGATTAACATTGAGCATAAGCGATAGCTTGACTCAGTTAA\n#ACTAAACAGAGCCGGCCAATCTGGTGCCAGCCGCCGCGGTTACACCACTGTGGCTCAAATTGATTTCTAT\n#CGGCGTAAAGCGTGATTAAAGATTAATCTTTTGGAGTTAAACTAAAATTAAGCTGTGACACGCTTATTAC\n#CTAAGAAAATCATAAACGAAAGCTACTCCAATATTACCAACTTGAATTCACGACAACTGAGGAACAAACT\n#GGGATTAGATACCCCACTATGCTCAGTCGTAAACTTTAACTTACATCTTTCTACTCGCCAGGGAACTACG\n#AGCTAAGCTTAAAACCCAAAGGACTTGACGGTACCCCATATCCCCCTAGAGGAGCCTGTCCTATAATCGA\n#TAACCCCCGTTTTACCTCACCATTTTTTGTTAATCAGCCTGTATACCTCCGTCGTCAGCTTACCACGTGA\n#GCGTGTGAGCTAAATGTTTTTTTCAACCACACGTCAGGTCAAGGTGCAGCAAATAAAATGGAAAGAGATG\n#GGCTACACTCTCTATTCTAGAATAAACAAAAGACTAAATGAAACCCGGTCAGAAGGCGGATTTAGCAGTA\n#AAATGAAACTAGAGCGTTCATTTAAACATGGCACTGGGGTGTGTACACACCGCCCGTCACCCTCCTCAAT\n#GCTTCAAAACAGTATTTCACACTTTTTAGCTCCACAGAAGAGGCAAGTCGTAACATGGTAAGTATACCGG\n#AAGGTATGCTTGGAATCAAAATGTAACTTAAAATAAAGTATTTCGCTTACACCGAAAAAACATCAGTGTA\n#ACCCTGATCATTTTGAGCTAAAAATTTAGCCCCACCCATCCGCATATTCTTTCCGTATTTATTCCTATAA\n#ACTAAAACATTTTTTATATTTAGTAAAGGCGATTAAAAAATTTTTATGGAGCAATAACCACAGTACCGCA\n#AGGGAAAAATGAAATAAAAATGAAACATTCTCAAGCATAAAAAAGTAGAGCTAAATCCTCGTACCTTTTG\n#CATCATGATTTAACTAGTCTAATAAAGCAAAAAGATTTTTAGTTTTAATTCCCGAACCTAGACGAGCTAT\n#..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.2 Fetching AA sequences from NCBI",
        "code": "library(rentrez)\n\n# Download some COI sequences from NCBI for Epipedobates anthonyi[Organism] that correspond to the gene COI\nCOX1_nuc <- \"Epipedobates anthonyi[Organism] AND COI[Gene]\"\nCOX1_IDs <- entrez_search(db=\"nuccore\", term= COX1_nuc)\nCOX1_nuc_fasta <- entrez_fetch(db=\"nuccore\", id=COX1_IDs$ids, rettype=\"fasta\")\n\n## append to ND2 vector\n\nmore_nuc_fasta <- c(froggy_seqs_nuc_fasta,COX1_nuc_fasta)\ncat(more_nuc_fasta)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.2 Fetching AA sequences from NCBI",
        "code": "# this is exclusive to your OWN COMPUTER change it accordingly\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/working_with_proteins\")\nwrite(more_nuc_fasta, \"Eanthonyi_ND2_nuc_seqs.fasta\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.3 Importing AA sequences in R",
        "code": "## load biostring\nlibrary(Biostrings)\n\n## we can import if we have sequences in FASTA\n\nmy_AA_Biostrings_set <- readAAStringSet(filepath = \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/working_with_proteins/Eanthonyi_COI_prot_seqs.fasta\", \n                                         format = \"fasta\")\nmy_AA_Biostrings_set\n#AAStringSet object of length 2:\n#    width seq                                                                                                                 names               \n#[1]   513 VMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNV...SLISLVAVIIMMFIIWEAFSSKRLFLNAEMTPTNVEWLYGSPPPYHTFEEAVYSKV QQL01627.1 cytoch...\n#[2]   219 TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMP...QTPLFVWSVLITAVLLLLSLPVLAAGITMLLTDRNLNTTFFDPAGGGDPILYQHLF ABG67395.1 cytoch..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.4 Importing nucleotide sequences in R",
        "code": "my_nuc_Biostrings_set <- readDNAStringSet(filepath = \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/working_with_proteins/Eanthonyi_ND2_nuc_seqs.fasta\", \n                                         format = \"fasta\")\nmy_nuc_Biostrings_set\n#DNAStringSet object of length 3:\n#    width seq                                                                                                                 names               \n#[1]  4886 AAGGTTTGGTCCTAGCCTTGAAATCAGTTATTATTTAATATACACATGCAAGTCTC...TCACTCTCTGCCTTCTTCCTATTTCCCCATTTTTTTTACTATTTATTAGAAACTTA HQ290995.1 Epiped...\n#[2]  1539 GTGATAATTACCCGATGATTATTCTCCACAAACCATAAAGATATCGGAACCCTATA...TATATGGCTCCCCTCCTCCTTATCACACATTTGAGGAAGCTGTTTATTCTAAAGTA MW042033.1 Epiped...\n#[3]   658 AACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCC...CCACTTTCTTTGACCCAGCAGGTGGAGGTGACCCCATTCTTTATCAACATCTCTTC DQ502853.1 Epiped..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.5 Translating a nucleotides to AA",
        "code": "## Vertebrate Mitochondrial code\nSGC1 <- getGeneticCode(\"SGC1\")\nSGC1\n#TTT TTC TTA TTG TCT TCC TCA TCG TAT TAC TAA TAG TGT TGC TGA TGG CTT CTC CTA CTG CCT CCC CCA CCG CAT CAC CAA CAG CGT CGC CGA CGG ATT ATC ATA ATG \n#\"F\" \"F\" \"L\" \"L\" \"S\" \"S\" \"S\" \"S\" \"Y\" \"Y\" \"*\" \"*\" \"C\" \"C\" \"W\" \"W\" \"L\" \"L\" \"L\" \"L\" \"P\" \"P\" \"P\" \"P\" \"H\" \"H\" \"Q\" \"Q\" \"R\" \"R\" \"R\" \"R\" \"I\" \"I\" \"M\" \"M\" \n#ACT ACC ACA ACG AAT AAC AAA AAG AGT AGC AGA AGG GTT GTC GTA GTG GCT GCC GCA GCG GAT GAC GAA GAG GGT GGC GGA GGG \n#\"T\" \"T\" \"T\" \"T\" \"N\" \"N\" \"K\" \"K\" \"S\" \"S\" \"*\" \"*\" \"V\" \"V\" \"V\" \"V\" \"A\" \"A\" \"A\" \"A\" \"D\" \"D\" \"E\" \"E\" \"G\" \"G\" \"G\" \"G\" \n#attr(,\"alt_init_codons\")\n#[1] \"ATT\" \"ATC\" \"GTG\"\n\n## Translating DNA/RNA:\nmy_aa_translated_Biostrings_set <- Biostrings::translate(my_nuc_Biostrings_set, genetic.code= SGC1, no.init.codon=FALSE)\nmy_aa_translated_Biostrings_set\n#AAStringSet object of length 3:\n#    width seq                                                                                                                 names               \n#[1]  1628 KVWS*PWNQLLFNMHMQVSAPLWKRPYSPLQGAGAGI*HKFLPMTPSIATPT*DFS...FFIFA*HMLYP*H*HLTHPSPHHPEILTKKMIYLFLPSSLSAFFLFPHFFYYLLET HQ290995.1 Epiped...\n#[2]   513 MMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNV...SLISLVAVIIMMFIIWEAFSSKRLFLNAEMTPTNVEWLYGSPPPYHTFEEAVYSKV MW042033.1 Epiped...\n#[3]   219 NPMFSIWGMSRNS*NSPKPLNSS*IKSTWVLTGRWPDL*CNRNCPCFRHNLLHGYA...PNSFICLISSNHRSTSSSFSSCPSC*NYNAFNWSKP*HHFLWPS*W*WPHSLSTSL DQ502853.1 Epiped..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.5 Translating a nucleotides to AA",
        "code": "seqs_as_vector_1 <- as.character(unlist(my_aa_translated_Biostrings_set[1]))\nseqs_as_vector_1\n#[1] \"KVWS*PWNQLLFNMHMQVSAPLWKRPYSPLQGAGAGI*HKFLPMTPSIATPT*DFSSD*HWA*AMAWLS*...\n\nseqs_as_vector_2 <- as.character(unlist(my_aa_translated_Biostrings_set[2]))\nseqs_as_vector_2\n#[1] \"MMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVM...\n\nseqs_as_vector_3 <- as.character(unlist(my_aa_translated_Biostrings_set[3]))\nseqs_as_vector_3\n#[1] \"NPMFSIWGMSRNS*NSPKPLNSS*IKSTWVLTGRWPDL*CNRNCPCFRHNLLHGYAYSNWWIWKLTGTFNN..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.5 Translating a nucleotides to AA",
        "code": "## third sequence\nnuc_seq_3 <- as.character(unlist(my_nuc_Biostrings_set[3]))\n\n## remove first character\nnuc_seq_3_red <- sub('.', '', nuc_seq_3)\n\n## original versus removed\nnuc_seq_3\n#[1] \"AACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGA...\nnuc_seq_3_red \n#[1] \"ACCCTATATTTAGTATTTGGGGCATGAGCCGGAATAGTAGGAACAGCCCTAAGCCTCTTAATTCGAGCAGA...\n\n## create a new string set and translate\n\nSGC1 <- getGeneticCode(\"SGC1\")\nnuc_seq_3_red <- DNAStringSet(nuc_seq_3_red)\nnuc_seq_3_red_translated <- Biostrings::translate(nuc_seq_3_red, genetic.code= SGC1, no.init.codon=FALSE)\nnuc_seq_3_red_translated\n#AAStringSet object of length 1:\n#    width seq\n#[1]   219 TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNWLV...NMKPPSLTQYQTPLFVWSVLITAVLLLLSLPVLAAGITMLLTDRNLNTTFFDPAGGGDPILYQHLF\n\n# save as vector and replace in original AAStringSet\nAA_seq_3 <- as.character(unlist(nuc_seq_3_red_translated))\nAA_seq_3 \n#[1] \"TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMP....\n\nmy_aa_translated_Biostrings_set[3] <- AA_seq_3\nmy_aa_translated_Biostrings_set\n#AAStringSet object of length 3:\n#    width seq                                                                                                                 names               \n#[1]  1628 KVWS*PWNQLLFNMHMQVSAPLWKRPYSPLQGAGAGI*HKFLPMTPSIATPT*DFS...FFIFA*HMLYP*H*HLTHPSPHHPEILTKKMIYLFLPSSLSAFFLFPHFFYYLLET HQ290995.1 Epiped...\n#[2]   513 MMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNV...SLISLVAVIIMMFIIWEAFSSKRLFLNAEMTPTNVEWLYGSPPPYHTFEEAVYSKV MW042033.1 Epiped...\n#[3]   219 TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMP...QTPLFVWSVLITAVLLLLSLPVLAAGITMLLTDRNLNTTFFDPAGGGDPILYQHLF DQ502853.1 Epiped..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.5 Translating a nucleotides to AA",
        "code": "## first sequence\nnuc_seq_1 <- as.character(unlist(my_nuc_Biostrings_set[1]))\n\n## remove first character\nnuc_seq_1_red <- sub('.', '', nuc_seq_1)\n\n## original\nnuc_seq_1\n#[1] \"AAGGTTTGGTCCTAGCCTTGAAATCAGTTATTATTTAATATACACATGCAAGTCTCCGCACCCCTGTGAAA...\n\n## removed\nnuc_seq_1_red\n#[1] \"AGGTTTGGTCCTAGCCTTGAAATCAGTTATTATTTAATATACACATGCAAGTCTCCGCACCCCTGTGAAAA...\n\n## create a new string set and translate\nnuc_seq_1_red <- DNAStringSet(nuc_seq_1_red)\nnuc_seq_1_red_translated <- Biostrings::translate(nuc_seq_1_red, genetic.code= SGC1, no.init.codon=FALSE)\nnuc_seq_1_red_translated\n#AAStringSet object of length 1:\n#    width seq\n#[1]  1628 *FGPSLEISYYLMYTCKSPHPCENALILPY*EQEPVSGTNFCP*HLASPHPQGTSAVINIEHKR*LDSVKLN*AGQSGASRRGYTTVAQIDF...INWLFTQMTYCS*NN*AKSHYIYFFYPYFLPSKPIFLSSPNMYYIPNTST*LILLPIILKF*QKK*FIYSCPPHSLPSSYFPIFFTIY*KL\n\n## how many stop codons\nnuc_seq_AA_1 <- as.character(unlist(nuc_seq_1_red_translated[1]))\n\n## require stringr package\nrequire(stringr)\ntotal_stop_codons <-str_count(nuc_seq_AA_1, fixed(\"*\"))\ntotal_stop_codons_report <- paste0(\"Count for character stop codons -- * -- in nuc_seq_AA_1 is this number: \", total_stop_codons)\ntotal_stop_codons_report\n#[1] \"Count for character stop codons -- * -- in nuc_seq_AA_1 is this number: 115\"\n\n\n## still bad and lots stops codons, remove another one base\nnuc_seq_1_red2 <- sub('.', '', nuc_seq_1_red)\n\n## original\nnuc_seq_1\n#[1] \"AAGGTTTGGTCCTAGCCTTGAAATCAGTTATTATTTAATATACACATGCAAGTCTCCGCACCCCTGTGAAA...\n\n## removed\nnuc_seq_1_red2\n#[1] \"GGTTTGGTCCTAGCCTTGAAATCAGTTATTATTTAATATACACATGCAAGTCTCCGCACCCCTGTGAAAAC...\n     \n## create a new string set and translate\nnuc_seq_1_red2 <- DNAStringSet(nuc_seq_1_red2)\nnuc_seq_1_red2_translated <- Biostrings::translate(nuc_seq_1_red2, genetic.code= SGC1, no.init.codon=FALSE)\nnuc_seq_1_red2_translated\n#AAStringSet object of length 1:\n#    width seq\n#[1]  1628 GLVLALKSVII*YTHASLRTPVKTPLFSPTGS*SRYQAQIFAHNT*HRHTHKGLQQWLTLSMSDSLTQLN*TEPANLVPAAAVTPLWLKLIS...LTGFLPKWLIAQEMIKQNLTMFTFFILISSLLSLFFYLRLTYTMSLTLAPNSSFSPSSWNFNKKNNLSIPALLTLCLLPISPFFLLFI*NL\n\n## how many stop codons\nnuc_seq_AA_2 <- as.character(unlist(nuc_seq_1_red2_translated[1]))\n\n## require stringr package\ntotal_stop_codons2 <-str_count(nuc_seq_AA_2, fixed(\"*\"))\ntotal_stop_codons_report2 <- paste0(\"Count for character stop codons -- * -- in nuc_seq_AA_2 is this number: \", total_stop_codons2)\ntotal_stop_codons_report2\n#[1] \"Count for character stop codons -- * -- in nuc_seq_AA_2 is this number: 94\"\n\n\n## still bad and lots stops codons, remove another one base\nnuc_seq_1_red3 <- sub('.', '', nuc_seq_1_red2)\n\n## original\nnuc_seq_1\n#[1] \"AAGGTTTGGTCCTAGCCTTGAAATCAGTTATTATTTAATATACACATGCAAGTCTCCGCACCCCTGTGAAA...\n\n## removed\nnuc_seq_1_red3\n#[1] \"GTTTGGTCCTAGCCTTGAAATCAGTTATTATTTAATATACACATGCAAGTCTCCGCACCCCTGTGAAAACG...\n         \n## create a new string set and translate\nnuc_seq_1_red3 <- DNAStringSet(nuc_seq_1_red3)\nnuc_seq_1_red3_translated <- Biostrings::translate(nuc_seq_1_red3, genetic.code= SGC1, no.init.codon=FALSE)\nnuc_seq_1_red3_translated\n#AAStringSet object of length 1:\n#    width seq\n#[1]  1627 VWS*PWNQLLFNMHMQVSAPLWKRPYSPLQGAGAGI*HKFLPMTPSIATPT*DFSSD*HWA*AMAWLS*TKQSRPIWCQPPRLHHCGSNWFL...H*LAFYPNDLLLKK*LSKISLYLLFLSLFPPF*AYFFIFA*HMLYP*H*HLTHPSPHHPEILTKKMIYLFLPSSLSAFFLFPHFFYYLLET\n\n## how many stop codons\nnuc_seq_AA_3 <- as.character(unlist(nuc_seq_1_red3_translated[1]))\n\n## require stringr package\ntotal_stop_codons3 <-str_count(nuc_seq_AA_3, fixed(\"*\"))\ntotal_stop_codons_report3 <- paste0(\"Count for character stop codons -- * -- in nuc_seq_AA_3 is this number: \", total_stop_codons3)\ntotal_stop_codons_report3\n#[1] \"Count for character stop codons -- * -- in nuc_seq_AA_3 is this number: 131\"\n\n## the best option seems to be nuc_seq_1_red2 with the translated nuc_seq_1_red2_translated\n\nAA_seq_1 <- as.character(unlist(nuc_seq_1_red2_translated))\nAA_seq_1 \n#[1] \"GLVLALKSVII*YTHASLRTPVKTPLFSPTGS*SRYQAQIFAHNT*HRHTHKGLQQW....\n\nmy_aa_translated_Biostrings_set[1] <- AA_seq_1\nmy_aa_translated_Biostrings_set\n#AAStringSet object of length 3:\n#    width seq                                                                                                                                                                   names               \n#[1]  1628 GLVLALKSVII*YTHASLRTPVKTPLFSPTGS*SRYQAQIFAHNT*HRHTHKGLQQWLTLSMSDSLTQLN*TEPANLVPAA...AQEMIKQNLTMFTFFILISSLLSLFFYLRLTYTMSLTLAPNSSFSPSSWNFNKKNNLSIPALLTLCLLPISPFFLLFI*NL HQ290995.1 Epiped...\n#[2]   513 MMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNW...LAGMPRRYSDYPDAYTLWNTVSSVGSLISLVAVIIMMFIIWEAFSSKRLFLNAEMTPTNVEWLYGSPPPYHTFEEAVYSKV MW042033.1 Epiped...\n#[3]   219 TLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNWLVPLMIGAPDMAFPRM...VSSILGAINFITTTLNMKPPSLTQYQTPLFVWSVLITAVLLLLSLPVLAAGITMLLTDRNLNTTFFDPAGGGDPILYQHLF DQ502853.1 Epiped..."
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.6 Finding ORFs in a nucleotide sequence",
        "code": "# install and load systemPipeR\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"systemPipeR\")\n\n# load library\nlibrary(systemPipeR)\nlibrary(rentrez)\nsetwd(\"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/working_with_proteins\")\n\n# we will work with nuclear coding segment for gene like a hemoglobin of a frog\nhb_nuc <- \"BT081428\"\nhb_IDs <- entrez_search(db=\"nuccore\", term= hb_nuc)\nhb_nuc_fasta <- entrez_fetch(db=\"nuccore\", id=hb_IDs$ids, rettype=\"fasta\")\nhb_nuc_fasta\n#[1] \">BT081428.1 Rana catesbeiana clone rcat-evr-539-243 Hemoglobin subunit alpha-3 putative mRNA, \n# complete cds\\nGGGGGGGACTTTACTTGAGTTGCCAAGCTAATCTAACGTGTACTACACCAACTCCCGATCATCACAATGA\\nGTCTATCTGCA...\nwrite(hb_nuc_fasta, \"Rana_hb_nuc_seqs.fasta\")\n\n\n# define path to file with sequences in fasta\n\nmy_nuc_fasta_file_path <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/working_with_proteins/Rana_hb_nuc_seqs.fasta\"\n\n# To store ORF sequences (you need indexed genome .fai file):\nmy_base_nuc_Biostrings_set <- readDNAStringSet(filepath = my_nuc_fasta_file_path, \n                                         format = \"fasta\")\nmy_base_nuc_Biostrings_set\n#DNAStringSet object of length 1:\n#    width seq                                                                                                                 names               \n#[1]   677 GGGGGGGACTTTACTTGAGTTGCCAAGCTAATCTAACGTGTACTACACCAACTCCC...AAATTGTCCATCAAATATAAATCTGATGTACTCTTAAATAAAACTGAAAATAATTT BT081428.1 Rana c...\n\n\n# get longest CDS with option mode = \"CDS\"\nmy_CDSs <- predORF(my_base_nuc_Biostrings_set, \n                      n = 1, \n                   type = \"grl\", \n                   mode = \"CDS\", \n                 strand = \"sense\", \n       longest_disjoint = FALSE,\n             startcodon = \"ATG\",\n              stopcodon = c(\"TAA\", \"TAG\", \"TGA\")) \nmy_CDSs\n#GRangesList object of length 1:\n#$`BT081428.1 Rana catesbeiana clone rcat-evr-539-243 Hemoglobin subunit alpha-3 putative mRNA, complete cds`\n#GRanges object with 1 range and 2 metadata columns:\n#                    seqnames    ranges strand | subject_id inframe2end\n#                       <Rle> <IRanges>  <Rle> |  <integer>   <numeric>\n#  [1] BT081428.1 Rana cate..    67-495      + |          1           3\n#  -------\n#  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n\n# get CDS sequences \ncds_seqs <- getSeq(my_base_nuc_Biostrings_set, my_CDSs)\nmy_CDS_long <- cds_seqs[[1]]\nmy_CDS_long\n#DNAStringSet object of length 1:\n#    width seq\n#[1]   429 ATGAGTCTATCTGCAAGTGAGAAGGCTGCTGTGCTTTCCATAGTGGGAAAGATTGGATCTCAGGCCA...GTTCAGGCTGCCTGGGACAAATTCCTTGCTCTAGTTTCTGCAGTCCTCACCTCCAAGTACAGATAA\n\n# name of fasta seq\n\nname_seq <- names(cds_seqs)[1]\nname_seq <- paste0(\">Long_CDS_\",name_seq,\"\\n\")\n\n# build vector to write\n\nmy_CDS_long_vec <- as.character(unlist(my_CDS_long))\nfinal_my_CDS_long_vec <- paste0(name_seq,my_CDS_long_vec)\ncat(final_my_CDS_long_vec)\n#>Long_CDS_BT081428.1 Rana catesbeiana clone rcat-evr-539-243 Hemoglobin subunit alpha-3 putative mRNA, complete cds\n#ATGAGTCTATCTGCAAGTGAGAAGGCTGCTGTGCTTTCCATAGTGGGAAAGATTGGATCTCAGGCCAGTGCTCTGGGCTCTGAGGCTTTGACCAGGCTTTTCCTTAGCTTCCCCCA...\n\n# write fasta file\n\nwrite(final_my_CDS_long_vec, \"Rana_hb_CDS_seqs.fasta\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.6 Finding ORFs in a nucleotide sequence",
        "code": "# install and load ORFik\nif (!require(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"ORFik\")\n\n# load library ORFik\n\nlibrary(ORFik)\n\n# define path to file with sequences in fasta\n\nmy_nuc_fasta_file_path <- \"~/Desktop/Teach_R/my_working_directory/Rana_hb_nuc_seqs.fasta\"\n\n# identify ORFs in fasta file\norfs <- findORFsFasta(my_nuc_fasta_file_path)\norfs\n#GRanges object with 31 ranges and 0 metadata columns:\n#         seqnames    ranges strand\n#            <Rle> <IRanges>  <Rle>\n#   [1] BT081428.1    67-495      +\n#   [2] BT081428.1     20-31      +\n#   [3] BT081428.1    77-109      +\n#   [4] BT081428.1   119-157      +\n#   [5] BT081428.1   206-214      +\n#   ...        ...       ...    ...\n#  [27] BT081428.1   192-281      -\n#  [28] BT081428.1   282-320      -\n#  [29] BT081428.1   333-380      -\n#  [30] BT081428.1   432-587      -\n#  [31] BT081428.1   612-635      -\n#  -------\n#  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n\n# To store ORF sequences (you need indexed genome .fai file):\nmy_nuc_fasta <- FaFile(my_nuc_fasta_file_path)\norf_seqs <- getSeq(my_nuc_fasta, orfs)\norf_seqs\n#DNAStringSet object of length 31:\n#     width seq                                                                                                                names               \n# [1]   429 ATGAGTCTATCTGCAAGTGAGAAGGCTGCTGTGCTTTCCATAGTGGGAAAGATTGG...CTGGGACAAATTCCTTGCTCTAGTTTCTGCAGTCCTCACCTCCAAGTACAGATAA BT081428.1\n# [2]    12 TTGCCAAGCTAA                                                                                                       BT081428.1\n# [3]    33 CTGCAAGTGAGAAGGCTGCTGTGCTTTCCATAG                                                                                  BT081428.1\n# [4]    39 TTGGATCTCAGGCCAGTGCTCTGGGCTCTGAGGCTTTGA                                                                            BT081428.1\n# [5]     9 TTGACCTGA                                                                                                          BT081428.1\n# ...   ... ...\n#[27]    90 TTGGCTGCACCTGCAAGAGCATTAATAATCTTTCCACCATGTTTGTTGAGGTCAGCAGAGCCAGGGGTCAGGTCAAAGTGGGGGAAATAA                         BT081428.1\n#[28]    39 CTGAGGGAGGACAGGCTGCCAGCAAGGTCATCCAGATGA                                                                            BT081428.1\n#[29]    48 ATGCGAGCCAGCAGAGGAAAGTTTCCTGGATCCACTCTTAGGTTGTAG                                                                   BT081428.1\n#[30]   156 TTGGTTGTAACTGAAATGGGCCCAAAGAACACTTCATTGCACGTTGTATTACTTGC...CTTGGAGGTGAGGACTGCAGAAACTAGAGCAAGGAATTTGTCCCAGGCAGCCTGA BT081428.1\n#[31]    24 TTGATGGACAATTTACACAAGTAA                                                                                           BT081428.1\n\n# order by the longest to shortest ORF\n\norf_seqs_ordered <- orf_seqs[order(width(orf_seqs), decreasing = T),]\norf_seqs_ordered \n#DNAStringSet object of length 31:\n#     width seq                                                                                                                names               \n# [1]   429 ATGAGTCTATCTGCAAGTGAGAAGGCTGCTGTGCTTTCCATAGTGGGAAAGATTGG...CTGGGACAAATTCCTTGCTCTAGTTTCTGCAGTCCTCACCTCCAAGTACAGATAA BT081428.1\n# [2]   258 ATGCAGGCCACTGAGGGAGGACAGGCTGCCAGCAAGGTCATCCAGATGATTGGCTG...GAGATCCAATCTTTCCCACTATGGAAAGCACAGCAGCCTTCTCACTTGCAGATAG BT081428.1\n# [3]   156 TTGGTTGTAACTGAAATGGGCCCAAAGAACACTTCATTGCACGTTGTATTACTTGC...CTTGGAGGTGAGGACTGCAGAAACTAGAGCAAGGAATTTGTCCCAGGCAGCCTGA BT081428.1\n# [4]   138 CTGCAGTCCTCACCTCCAAGTACAGATAAATCCACCCTGTATAACAGGCTACATCA...AATGAAGTGTTCTTTGGGCCCATTTCAGTTACAACCAAGTTGCAATGTTTTTTGA BT081428.1\n# [5]   126 CTGGCTCTGCTGACCTCAACAAACATGGTGGAAAGATTATTAATGCTCTTGCAGGT...GATGACCTTGCTGGCAGCCTGTCCTCCCTCAGTGGCCTGCATGCCTACAACCTAA BT081428.1\n# ...   ... ...\n#[27]    12 TTGCCAAGCTAA                                                                                                       BT081428.1\n#[28]     9 TTGACCTGA                                                                                                          BT081428.1\n#[29]     9 TTGGTGTAG                                                                                                          BT081428.1\n#[30]     9 CTGATGTAG                                                                                                          BT081428.1\n#[31]     6 TTGTAA                                                                                                             BT081428.1\n\n# name of fasta seq\n\nname_seq_orfik <- names(orf_seqs_ordered)[1]\nname_seq_orfik <- paste0(\">Long_ORF_orfik_\",name_seq_orfik,\"\\n\")\n\n# build vector to write\n\nmy_CDS_long_orfik_vec <- as.character(unlist(orf_seqs_ordered[1]))\nfinal_my_CDS_long_orfik_vec <- paste0(name_seq_orfik,my_CDS_long_orfik_vec)\ncat(final_my_CDS_long_orfik_vec)\n#>Long_ORF_orfik_BT081428.1\n#ATGAGTCTATCTGCAAGTGAGAAGGCTGCTGTGCTTTCCATAGTGGGAAAGATTGGATCTCAGGCCAGTGCTCTGGGCTCTGAGGCTTTGACCAGGCTTTTCCTTAGCTTCCCCCAGACCAAGACTTA...\n\n# write fasta file\n\nwrite(final_my_CDS_long_orfik_vec, \"Rana_hb_ORF_orfik_seqs.fasta\")\n\n#tools:\n#http://csbg.cnb.csic.es/PB/"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.7 Physochemical properties of an amino acid sequence",
        "code": "# load or install relevant packages\n\ninstall.packages(\"seqinr\")\ninstall.packages(\"Peptides\")\n\nrequire(seqinr)\nrequire(Peptides)\n\n## path to fasta files\n\nhb_rana_path <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/working_with_proteins/Rana_hb_CDS_seqs.fasta\"\n\n## read fasta and translate\n\nnucleotide_hb_rana_fasta <- seqinr::read.fasta(file = hb_rana_path, seqtype = \"AA\")\nnucleotide_hb_rana_fasta\n#$Long_CDS_BT081428.1\n#  [1] \"A\" \"T\" \"G\" \"A\" \"G\" \"T\" \"C\" \"T\" \"A\" \"T\" \"C\" \"T\" \"G\" \"C\" \"A\" \"A\" \"G\" \"T\" \"G\" \"A\" \"G\" \"A\" \"A\" \"G\" \"G\" \"C\" \"T\" \"G\" \"C\" \"T\" \"G\" \"T\" \"G\" \"C\" \"T\" \"T\" \"T\" \"C\" \"C\" \"A\" \"T\" \"A\" \"G\" \"T\" \"G\" \"G\" \"G\"\n# [48] \"A\" \"A\" \"A\" \"G\" \"A\" \"T\" \"T\" \"G\" \"G\" \"A\" \"T\" \"C\" \"T\" \"C\" \"A\" \"G\" \"G\" \"C\" \"C\" \"A\" \"G\" \"T\" \"G\" \"C\" \"T\" \"C\" \"T\" \"G\" \"G\" \"G\" \"C\" \"T\" \"C\" \"T\" \"G\" \"A\" \"G\" \"G\" \"C\" \"T\" \"T\" \"T\" \"G\" \"A\" \"C\" \"C\" \"A\"\n# [95] \"G\" \"G\" \"C\" \"T\" \"T\" \"T\" \"T\" \"C\" \"C\" \"T\" \"T\" \"A\" \"G\" \"C\" \"T\" \"T\" \"C\" \"C\" \"C\" \"C\" \"C\" \"A\" \"G\" \"A\" \"C\" \"C\" \"A\" \"A\" \"G\" \"A\" \"C\" \"T\" \"T\" \"A\" \"T\" \"T\" \"T\" \"C\" \"C\" \"C\" \"C\" \"C\" \"A\" \"C\" \"T\" \"T\" \"T\"\n#[142] \"G\" \"A\" \"C\" \"C\" \"T\" \"G\" \"A\" \"C\" \"C\" \"C\" \"C\" \"T\" \"G\" \"G\" \"C\" \"T\" \"C\" \"T\" \"G\" \"C\" \"T\" \"G\" \"A\" \"C\" \"C\" \"T\" \"C\" \"A\" \"A\" \"C\" \"A\" \"A\" \"A\" \"C\" \"A\" \"T\" \"G\" \"G\" \"T\" \"G\" \"G\" \"A\" \"A\" \"A\" \"G\" \"A\" \"T\"\n#[189] \"T\" \"A\" \"T\" \"T\" \"A\" \"A\" \"T\" \"G\" \"C\" \"T\" \"C\" \"T\" \"T\" \"G\" \"C\" \"A\" \"G\" \"G\" \"T\" \"G\" \"C\" \"A\" \"G\" \"C\" \"C\" \"A\" \"A\" \"T\" \"C\" \"A\" \"T\" \"C\" \"T\" \"G\" \"G\" \"A\" \"T\" \"G\" \"A\" \"C\" \"C\" \"T\" \"T\" \"G\" \"C\" \"T\" \"G\"\n#[236] \"G\" \"C\" \"A\" \"G\" \"C\" \"C\" \"T\" \"G\" \"T\" \"C\" \"C\" \"T\" \"C\" \"C\" \"C\" \"T\" \"C\" \"A\" \"G\" \"T\" \"G\" \"G\" \"C\" \"C\" \"T\" \"G\" \"C\" \"A\" \"T\" \"G\" \"C\" \"C\" \"T\" \"A\" \"C\" \"A\" \"A\" \"C\" \"C\" \"T\" \"A\" \"A\" \"G\" \"A\" \"G\" \"T\" \"G\"\n#[283] \"G\" \"A\" \"T\" \"C\" \"C\" \"A\" \"G\" \"G\" \"A\" \"A\" \"A\" \"C\" \"T\" \"T\" \"T\" \"C\" \"C\" \"T\" \"C\" \"T\" \"G\" \"C\" \"T\" \"G\" \"G\" \"C\" \"T\" \"C\" \"G\" \"C\" \"A\" \"T\" \"T\" \"A\" \"T\" \"C\" \"C\" \"A\" \"G\" \"G\" \"T\" \"G\" \"G\" \"T\" \"C\" \"T\" \"T\"\n#[330] \"G\" \"G\" \"C\" \"T\" \"A\" \"C\" \"T\" \"C\" \"A\" \"C\" \"T\" \"T\" \"C\" \"C\" \"C\" \"T\" \"G\" \"G\" \"T\" \"G\" \"A\" \"T\" \"T\" \"T\" \"C\" \"A\" \"C\" \"T\" \"G\" \"C\" \"T\" \"G\" \"A\" \"G\" \"G\" \"T\" \"T\" \"C\" \"A\" \"G\" \"G\" \"C\" \"T\" \"G\" \"C\" \"C\" \"T\"\n#[377] \"G\" \"G\" \"G\" \"A\" \"C\" \"A\" \"A\" \"A\" \"T\" \"T\" \"C\" \"C\" \"T\" \"T\" \"G\" \"C\" \"T\" \"C\" \"T\" \"A\" \"G\" \"T\" \"T\" \"T\" \"C\" \"T\" \"G\" \"C\" \"A\" \"G\" \"T\" \"C\" \"C\" \"T\" \"C\" \"A\" \"C\" \"C\" \"T\" \"C\" \"C\" \"A\" \"A\" \"G\" \"T\" \"A\" \"C\"\n#[424] \"A\" \"G\" \"A\" \"T\" \"A\" \"A\"\n#attr(,\"name\")\n#[1] \"Long_CDS_BT081428.1\"\n#attr(,\"Annot\")\n#[1] \">Long_CDS_BT081428.1 Rana catesbeiana clone rcat-evr-539-243 Hemoglobin subunit alpha-3 putative mRNA, complete cds\"\n#attr(,\"class\")\n#[1] \"SeqFastaAA\"\n\n## some squence manipulation\n\nnucleotide_hb_rana_fasta_vec <- paste0(unlist(nucleotide_hb_rana_fasta), collapse =\"\")\nnucleotide_hb_rana_fasta_vec <- tolower(nucleotide_hb_rana_fasta_vec)\nnucleotide_hb_rana_fasta_vec <- seqinr::s2c(nucleotide_hb_rana_fasta_vec)\nnucleotide_hb_rana_fasta_vec\n#  [1] \"a\" \"t\" \"g\" \"a\" \"g\" \"t\" \"c\" \"t\" \"a\" \"t\" \"c\" \"t\" \"g\" \"c\" \"a\" \"a\" \"g\" \"t\" \"g\" \"a\" \"g\" \"a\" \"a\" \"g\" \"g\" \"c\" \"t\" \"g\" \"c\" \"t\" \"g\" \"t\" \"g\" \"c\" \"t\" \"t\" \"t\" \"c\" \"c\" \"a\" \"t\" \"a\" \"g\" \"t\" \"g\" \"g\" \"g\"\n# [48] \"a\" \"a\" \"a\" \"g\" \"a\" \"t\" \"t\" \"g\" \"g\" \"a\" \"t\" \"c\" \"t\" \"c\" \"a\" \"g\" \"g\" \"c\" \"c\" \"a\" \"g\" \"t\" \"g\" \"c\" \"t\" \"c\" \"t\" \"g\" \"g\" \"g\" \"c\" \"t\" \"c\" \"t\" \"g\" \"a\" \"g\" \"g\" \"c\" \"t\" \"t\" \"t\" \"g\" \"a\" \"c\" \"c\" \"a\"\n# [95] \"g\" \"g\" \"c\" \"t\" \"t\" \"t\" \"t\" \"c\" \"c\" \"t\" \"t\" \"a\" \"g\" \"c\" \"t\" \"t\" \"c\" \"c\" \"c\" \"c\" \"c\" \"a\" \"g\" \"a\" \"c\" \"c\" \"a\" \"a\" \"g\" \"a\" \"c\" \"t\" \"t\" \"a\" \"t\" \"t\" \"t\" \"c\" \"c\" \"c\" \"c\" \"c\" \"a\" \"c\" \"t\" \"t\" \"t\"\n#[142] \"g\" \"a\" \"c\" \"c\" \"t\" \"g\" \"a\" \"c\" \"c\" \"c\" \"c\" \"t\" \"g\" \"g\" \"c\" \"t\" \"c\" \"t\" \"g\" \"c\" \"t\" \"g\" \"a\" \"c\" \"c\" \"t\" \"c\" \"a\" \"a\" \"c\" \"a\" \"a\" \"a\" \"c\" \"a\" \"t\" \"g\" \"g\" \"t\" \"g\" \"g\" \"a\" \"a\" \"a\" \"g\" \"a\" \"t\"\n#[189] \"t\" \"a\" \"t\" \"t\" \"a\" \"a\" \"t\" \"g\" \"c\" \"t\" \"c\" \"t\" \"t\" \"g\" \"c\" \"a\" \"g\" \"g\" \"t\" \"g\" \"c\" \"a\" \"g\" \"c\" \"c\" \"a\" \"a\" \"t\" \"c\" \"a\" \"t\" \"c\" \"t\" \"g\" \"g\" \"a\" \"t\" \"g\" \"a\" \"c\" \"c\" \"t\" \"t\" \"g\" \"c\" \"t\" \"g\"\n#[236] \"g\" \"c\" \"a\" \"g\" \"c\" \"c\" \"t\" \"g\" \"t\" \"c\" \"c\" \"t\" \"c\" \"c\" \"c\" \"t\" \"c\" \"a\" \"g\" \"t\" \"g\" \"g\" \"c\" \"c\" \"t\" \"g\" \"c\" \"a\" \"t\" \"g\" \"c\" \"c\" \"t\" \"a\" \"c\" \"a\" \"a\" \"c\" \"c\" \"t\" \"a\" \"a\" \"g\" \"a\" \"g\" \"t\" \"g\"\n#[283] \"g\" \"a\" \"t\" \"c\" \"c\" \"a\" \"g\" \"g\" \"a\" \"a\" \"a\" \"c\" \"t\" \"t\" \"t\" \"c\" \"c\" \"t\" \"c\" \"t\" \"g\" \"c\" \"t\" \"g\" \"g\" \"c\" \"t\" \"c\" \"g\" \"c\" \"a\" \"t\" \"t\" \"a\" \"t\" \"c\" \"c\" \"a\" \"g\" \"g\" \"t\" \"g\" \"g\" \"t\" \"c\" \"t\" \"t\"\n#[330] \"g\" \"g\" \"c\" \"t\" \"a\" \"c\" \"t\" \"c\" \"a\" \"c\" \"t\" \"t\" \"c\" \"c\" \"c\" \"t\" \"g\" \"g\" \"t\" \"g\" \"a\" \"t\" \"t\" \"t\" \"c\" \"a\" \"c\" \"t\" \"g\" \"c\" \"t\" \"g\" \"a\" \"g\" \"g\" \"t\" \"t\" \"c\" \"a\" \"g\" \"g\" \"c\" \"t\" \"g\" \"c\" \"c\" \"t\"\n#[377] \"g\" \"g\" \"g\" \"a\" \"c\" \"a\" \"a\" \"a\" \"t\" \"t\" \"c\" \"c\" \"t\" \"t\" \"g\" \"c\" \"t\" \"c\" \"t\" \"a\" \"g\" \"t\" \"t\" \"t\" \"c\" \"t\" \"g\" \"c\" \"a\" \"g\" \"t\" \"c\" \"c\" \"t\" \"c\" \"a\" \"c\" \"c\" \"t\" \"c\" \"c\" \"a\" \"a\" \"g\" \"t\" \"a\" \"c\"\n#[424] \"a\" \"g\" \"a\" \"t\" \"a\" \"a\"\n\n## tranlation is in the defaul nucleotide codon code: numcode = 1\n\nAA_hb_rana_fasta <- seqinr::translate(seq = nucleotide_hb_rana_fasta_vec, frame = 0, sens = \"F\", numcode = 1, NAstring = \"X\", ambiguous = FALSE)\nAA_hb_rana_fasta\n#  [1] \"M\" \"S\" \"L\" \"S\" \"A\" \"S\" \"E\" \"K\" \"A\" \"A\" \"V\" \"L\" \"S\" \"I\" \"V\" \"G\" \"K\" \"I\" \"G\" \"S\" \"Q\" \"A\" \"S\" \"A\" \"L\" \"G\" \"S\" \"E\" \"A\" \"L\" \"T\" \"R\" \"L\" \"F\" \"L\" \"S\" \"F\" \"P\" \"Q\" \"T\" \"K\" \"T\" \"Y\" \"F\" \"P\" \"H\" \"F\"\n# [48] \"D\" \"L\" \"T\" \"P\" \"G\" \"S\" \"A\" \"D\" \"L\" \"N\" \"K\" \"H\" \"G\" \"G\" \"K\" \"I\" \"I\" \"N\" \"A\" \"L\" \"A\" \"G\" \"A\" \"A\" \"N\" \"H\" \"L\" \"D\" \"D\" \"L\" \"A\" \"G\" \"S\" \"L\" \"S\" \"S\" \"L\" \"S\" \"G\" \"L\" \"H\" \"A\" \"Y\" \"N\" \"L\" \"R\" \"V\"\n# [95] \"D\" \"P\" \"G\" \"N\" \"F\" \"P\" \"L\" \"L\" \"A\" \"R\" \"I\" \"I\" \"Q\" \"V\" \"V\" \"L\" \"A\" \"T\" \"H\" \"F\" \"P\" \"G\" \"D\" \"F\" \"T\" \"A\" \"E\" \"V\" \"Q\" \"A\" \"A\" \"W\" \"D\" \"K\" \"F\" \"L\" \"A\" \"L\" \"V\" \"S\" \"A\" \"V\" \"L\" \"T\" \"S\" \"K\" \"Y\"\n#[142] \"R\" \"*\"\n\nAA_hb_rana_fasta_string <- seqinr::c2s(AA_hb_rana_fasta)\nAA_hb_rana_fasta_string\n#[1] \"MSLSASEKAAVLSIVGKIGSQASALGSEALTRLFLSFPQTKTYFPHFDLTPGSADLNKHGGKIINALAGAANHLDDLAGSLSSLSGLHAYNLRVDPGNFPLLARIIQVVLATHFPGDFTAEVQAAWDKFLALVSAVLTSKYR*\"\n\n## remove stop codons\nAA_hb_rana_fasta_string_not_stop <- gsub(\"*\",\"\",AA_hb_rana_fasta_string, fixed = TRUE)\nAA_hb_rana_fasta_string_not_stop\n#[1] \"MSLSASEKAAVLSIVGKIGSQASALGSEALTRLFLSFPQTKTYFPHFDLTPGSADLNKHGGKIINALAGAANHLDDLAGSLSSLSGLHAYNLRVDPGNFPLLARIIQVVLATHFPGDFTAEVQAAWDKFLALVSAVLTSKYR\"\n\n## 'Peptides' properties\n\nPeptides::boman(AA_hb_rana_fasta_string_not_stop)\n#[1] 0.618662\nPeptides::charge(AA_hb_rana_fasta_string_not_stop, pH= 7.8, pKscale = \"EMBOSS\")\n#[1] 1.081336\nPeptides::charge(AA_hb_rana_fasta_string_not_stop, pH= 7, pKscale = \"EMBOSS\")\n#[1] 2.182985\nPeptides::hydrophobicity(AA_hb_rana_fasta_string_not_stop,\"KyteDoolittle\")\n#[1] 0.2619718\nPeptides::pI(AA_hb_rana_fasta_string_not_stop,\"EMBOSS\")\n#[1] 8.974793"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/working-with-proteins.html",
        "section": "Session 31 \u2013 Working with Proteins",
        "subsection": "31.7 Physochemical properties of an amino acid sequence",
        "code": "# load relevant packages\n\nrequire(seqinr)\nrequire(Peptides)\n\n## path to fasta files\n\nCOI_Eanthonyi_path <- \"~/Desktop/Teach_R/A_Class_powerpoints/Spring_2024/session_12/working_with_proteins/Eanthonyi_COI_prot_seqs.fasta\"\n\n## read fasta and translate only the first sequence\n\nAA_COI_Eanthonyi_fasta <- seqinr::read.fasta(file = COI_Eanthonyi_path, seqtype = \"AA\", as.string = TRUE)\nAA_COI_Eanthonyi_fasta_use <- AA_COI_Eanthonyi_fasta[1]\nAA_COI_Eanthonyi_fasta_use\n#$QQL01627.1\n#[1] \"VMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNWLVPLMIGAPDMAFPRMNNMSFWLLPPSFLLLLASAGVEAGAGTGWTVYPPLAGNLAHAGPSVDLTIFSLHLAGVSSILGAINFITTTLNMKPPSLTQYQTPLFVWSVLITAVLLLLSLPVLAAGITMLLTDRNLNTTFFDPAGGGDPILYQHLFWFFGHPEVYILILPGFGIISHVVTFYSSKKEPFGYMGMVWAMMSIGLLGFIVWAHHMFTTDLNVDTRAYFTSATMIIAIPTGVKVFSWLATMHGGIIKWDAAMLWALGFIFLFTVGGLTGIVLANSSLDIVLHDTYYVVAHFHYVLSMGAVFAIMAGFVHWFPLFTGFTLHEAWTKIHFGVMFAGVNLTFFPQHFLGLAGMPRRYSDYPDAYTLWNTVSSVGSLISLVAVIIMMFIIWEAFSSKRLFLNAEMTPTNVEWLYGSPPPYHTFEEAVYSKV\"\n#attr(,\"name\")\n#[1] \"QQL01627.1\"\n#attr(,\"Annot\")\n#[1] \">QQL01627.1 cytochrome oxidase subunit I, partial (mitochondrion) [Epipedobates anthonyi]\"\n#attr(,\"class\")\n#[1] \"SeqFastaAA\"\n\n## some squence manipulation\n\nA_COI_Eanthonyi_fasta_vec <- seqinr::c2s(AA_COI_Eanthonyi_fasta_use)\nA_COI_Eanthonyi_fasta_vec\n# [1] \"VMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNWLVPLMIGA...\n\n## remove stop codons\nA_COI_Eanthonyi_fasta_vec_not_stop <- gsub(\"*\",\"\",A_COI_Eanthonyi_fasta_vec, fixed = TRUE)\nA_COI_Eanthonyi_fasta_vec_not_stop\n# [1] \"VMITRWLFSTNHKDIGTLYLVFGAWAGMVGTALSLLIRAELSQPGSLLGDDQIYNVIVTAHAFVMIFFMVMPILIGGFGNWLVPLMIGA...\n\n## 'Peptides' properties\nPeptides::boman(A_COI_Eanthonyi_fasta_vec_not_stop)\n#[1] -0.4054776\nPeptides::charge(A_COI_Eanthonyi_fasta_vec_not_stop, pH= 7.8, pKscale = \"EMBOSS\")\n#[1] -7.372694\nPeptides::charge(A_COI_Eanthonyi_fasta_vec_not_stop, pH= 7, pKscale = \"EMBOSS\")\n#[1] -3.690809\nPeptides::hydrophobicity(A_COI_Eanthonyi_fasta_vec_not_stop,\"KyteDoolittle\")\n#[1] 0.7395712\nPeptides::pI(A_COI_Eanthonyi_fasta_vec_not_stop,\"EMBOSS\")\n#[1] 6.601388"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.1 Sampling from a vector of names",
        "code": "## We need a list of the 17 students last names for BIO/BIT 209 as their unique identifiers\n\nstudents_BIO209 <- c(\"Ardire\", \"Carlucci\", \"Da_Costa_Morais\", \"Davidov\", \"Deda\", \n                     \"Dimitrijevic\", \"Fasano\",  \"Javed\", \"Mahadeo\", \"Mowla\", \"Njie\", \n                     \"Rahman\", \"Siddique\", \"Sukhram\",\"Tan\", \"Tiumalu\", \"Vu\")\n\nstudents_BIO209 \n#[1] \"Ardire\"          \"Carlucci\"        \"Da_Costa_Morais\" \"Davidov\"         \"Deda\"           \n#[6] \"Dimitrijevic\"    \"Fasano\"          \"Javed\"           \"Mahadeo\"         \"Mowla\"          \n#[11] \"Njie\"            \"Rahman\"          \"Siddique\"        \"Sukhram\"         \"Tan\"            \n#[16] \"Tiumalu\"         \"Vu\" \n\n## we order them alphabetically\n\nstudents_BIO209_order <- sort(students_BIO209)\nstudents_BIO209_order\n#[1] \"Ardire\"          \"Carlucci\"        \"Da_Costa_Morais\" \"Davidov\"         \"Deda\"           \n#[6] \"Dimitrijevic\"    \"Fasano\"          \"Javed\"           \"Mahadeo\"         \"Mowla\"          \n#[11] \"Njie\"            \"Rahman\"          \"Siddique\"        \"Sukhram\"         \"Tan\"            \n#[16] \"Tiumalu\"         \"Vu\" \n\n## numeric code for each student\nstudents_BIO209_order_c <- paste(1:17, students_BIO209_order, sep = \"_\")\nstudents_BIO209_order_c \n#[[1] \"1_Ardire\"          \"2_Carlucci\"        \"3_Da_Costa_Morais\" \"4_Davidov\"         \"5_Deda\"           \n#[6] \"6_Dimitrijevic\"    \"7_Fasano\"          \"8_Javed\"           \"9_Mahadeo\"         \"10_Mowla\"         \n#[11] \"11_Njie\"           \"12_Rahman\"         \"13_Siddique\"       \"14_Sukhram\"        \"15_Tan\"           \n#[16] \"16_Tiumalu\"        \"17_Vu\"\n\n## we sample 2 students to give a review of last class\n\ntodays_2_students_code <- sample(1:17, size = 2, replace = FALSE, prob = NULL)\ntodays_2_students_code\n#[1] 16 13\n\n## we identify such students by name\n\ntoday_students <- students_BIO209_order_c[todays_2_students_code]\ntoday_students\n#[1] \"16_Tiumalu\"  \"13_Siddique\"\n\n## NEXT WEEK: we need 2 students again, but we want to remove those that already gave a lesson\n\nremaining_students_code <- setdiff(1:17, c(16,13))\nremaining_students_code\n#[1]  1  2  3  4  5  6  7  8  9 10 11 12 14 15 17\n\n## NEXT WEEK: we sample 2 students to give a review of last class\n\ntodays_2_students_code <- sample(remaining_students_code, size = 2, replace = FALSE, prob = NULL)\ntodays_2_students_code\n#[1]  7 15\n\n## NEXT WEEK: we identify such students by name\n\ntoday_students <- students_BIO209_order_c[todays_2_students_code]\ntoday_students\n#[1] \"7_Fasano\" \"15_Tan\""
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.2 Read a text from an article pdf",
        "code": "## We need to install and load some R-packages\ninstall.packages(\"pdftools\")\nlibrary(pdftools)\ninstall.packages(\"tm\")\nlibrary(tm)\n\n## file path to my pdf file\nmy_pdf_file_path <- \"~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/Almeida_Paiva_etal_2022.pdf\"\n\n## read pdf text to a vector\npdf_text <- pdf_text(my_pdf_file_path, opw = \"\", upw = \"\")\n\n## remove special characters like \"\u2013\"\n\npdf_text <- gsub(\"\u2013\",\" \", pdf_text)\n\n## create a text vector from pdf text and remove unwanted characters\n\ndocs <- Corpus(VectorSource(pdf_text))\ndocs <- tm_map(docs, removeNumbers)\ndocs <- tm_map(docs, removePunctuation)\ndocs <- tm_map(docs, stemming)\ndocs <- tm_map(docs, stripWhitespace)\ndocs <- tm_map(docs, content_transformer(tolower))\nmy_pdf_corpus <- tm_map(docs, removeWords, stopwords(\"english\"))\n\nmy_pdf_corpus\n#<<SimpleCorpus>>\n#Metadata:  corpus specific: 1, document level (indexed): 0\n#Content:  documents: 28\n\n## we process the my_text_pdf to a term-document matrix (tdm or TDM). This TDM stores counts of terms for the pdf document using the tm function 'TermDocumentMatrix'.\n\nmy_pdf_corpus_tdm <- TermDocumentMatrix(my_pdf_corpus)\n\ninspect(my_pdf_corpus_tdm) \n#<<TermDocumentMatrix (terms: 4796, documents: 28)>>\n#Non-/sparse entries: 9858/124430\n#Sparsity           : 93%\n#Maximal term length: 50\n#Weighting          : term frequency (tf)\n#Sample             :\n#             Docs\n#Terms         16  2 20 21 24 25 26  3  5  8\n#  available    5  5  4  6  0  0  0  4  4  8\n#  can          6  9  8  7  1  0  0  6  8 13\n#  free         2  0  1  2  0  0  0  0  3  2\n#  information  6  1  4  7  0  0  1  0  2  4\n#  molecular    0  4  0  3  3  7  0  6 14 14\n#  protein     50 13 18 15  1  0  5 18  4  3\n#  proteins     8  7  8  3  2  3  2  2  3  2\n#  structure    1  6  6  7  1  0  2  2  1  4\n#  structures   5  7  6  5  0  0  0  6  1  7\n#  tool        13  8  5  8  0  0  1  4  9  9\n\n## we create a matrix of word as a dataframe to be analyzed\n\npdf_matrix <- as.matrix(my_pdf_corpus_tdm) \npdf_words <- sort(rowSums(pdf_matrix),decreasing=TRUE) \npdf_df_for_map <- data.frame(word = names(pdf_words),freq=pdf_words)\nhead(pdf_df_for_map)\n\n#               word freq\n#protein     protein  260\n#can             can  143\n#available available  127\n#tool           tool  124\n#proteins   proteins   98\n#molecular molecular   92"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.3 Read a text from a website",
        "code": "## We need to install and load some R-packages\ninstall.packages(\"htm2txt\")\nlibrary(htm2txt)\n\n## create a vector with our selected url (website link address)\nurl <- 'https://en.wikipedia.org/wiki/Bioinformatics'\n\n## get the text on the website as a vector\nmy_text_url <- gettxt(url)\nmy_text_url\n\n## remove some garbage symbols like \u2022\nmy_text_url <- gsub(\"\u2022\",\"\",my_text_url)\n\n## create a text vector from pdf text and remove unwanted characters\n\ndocs <- Corpus(VectorSource(my_text_url))\ndocs <- tm_map(docs, removeNumbers)\ndocs <- tm_map(docs, removePunctuation)\ndocs <- tm_map(docs, stemming)\ndocs <- tm_map(docs, stripWhitespace)\ndocs <- tm_map(docs, content_transformer(tolower))\nmy_url_corpus <- tm_map(docs, removeWords, stopwords(\"english\"))\n\nmy_url_corpus\n#<<SimpleCorpus>>\n#Metadata:  corpus specific: 1, document level (indexed): 0\n#Content:  documents: 1\n\n## we process the my_url_corpus to a term-document matrix (tdm or TDM). This TDM stores counts of terms for the url document using the tm function 'TermDocumentMatrix'.\n\nmy_url_corpus_tdm <- TermDocumentMatrix(my_url_corpus)\n\ninspect(my_url_corpus_tdm) \n#<<TermDocumentMatrix (terms: 2709, documents: 1)>>\n#Non-/sparse entries: 2709/0\n#Sparsity           : 0%\n#Maximal term length: 52\n#Weighting          : term frequency (tf)\n#Sample             :\n#                Docs\n#Terms              1\n#  analysis        74\n#  bioinformatics 126\n#  biology        112\n#  computational   66\n#  data            70\n#  gene            48\n#  genome          52\n#  information     49\n#  protein         76\n#  sequence        62\n\n## we create a matrix of word as a dataframe to be analyzed\n\nurl_matrix <- as.matrix(my_url_corpus_tdm) \nurl_words <- sort(rowSums(url_matrix),decreasing=TRUE) \nurl_df_for_map <- data.frame(word = names(url_words),freq=url_words)\nhead(url_df_for_map)\n\n#                          word freq\n#bioinformatics bioinformatics  126\n#biology               biology  112\n#protein               protein   76\n#analysis             analysis   74\n#data                     data   70\n#computational   computational   66"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.4 Read a text from a file",
        "code": "## my path to my text file\n\nmy_text_file <- '~/Desktop/Teach_R/class_pages_reference/bioinformatics_gitbook_1/my_working_directory/Carey_Papin_2018_text.txt'\n\n## read text file as a vector\nmy_text <- paste(readLines(my_text_file),collapse=\" \")\nmy_text\n\n## remove some garbage symbols like \u2022\nmy_text <- gsub(\"\u2022\",\"\",my_text)\n\n## create a text vector from pdf text and remove unwanted characters\n\ndocs <- Corpus(VectorSource(my_text))\ndocs <- tm_map(docs, removeNumbers)\ndocs <- tm_map(docs, removePunctuation)\ndocs <- tm_map(docs, stemming)\ndocs <- tm_map(docs, stripWhitespace)\ndocs <- tm_map(docs, content_transformer(tolower))\nmy_text_corpus <- tm_map(docs, removeWords, stopwords(\"english\"))\n\nmy_text_corpus\n#<<SimpleCorpus>>\n#Metadata:  corpus specific: 1, document level (indexed): 0\n#Content:  documents: 1\n\n## we process the my_text_corpus to a term-document matrix (tdm or TDM). This TDM stores counts of terms for the text vector using the tm function 'TermDocumentMatrix'.\n\nmy_text_corpus_tdm <- TermDocumentMatrix(my_text_corpus)\n\ninspect(my_text_corpus_tdm) \n#<<<TermDocumentMatrix (terms: 1255, documents: 1)>>\n#Non-/sparse entries: 1255/0\n#Sparsity           : 0%\n#Maximal term length: 70\n#Weighting          : term frequency (tf)\n#Sample             :\n#               Docs\n#Terms            1\n#  biology       18\n#  can           15\n#  code          14\n#  computational 30\n#  data          18\n#  language      21\n#  languages     19\n#  learn         14\n#  rules         17\n#  simple        16\n\n## we create a matrix of word as a dataframe to be analyzed\n\ntext_matrix <- as.matrix(my_text_corpus_tdm) \ntext_words <- sort(rowSums(text_matrix),decreasing=TRUE) \ntext_df_for_map <- data.frame(word = names(text_words),freq=text_words)\nhead(text_df_for_map)\n\n#                       word freq\n#computational computational   30\n#language           language   21\n#languages         languages   19\n#biology             biology   18\n#data                   data   18\n#rules                 rules   17"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.5 Generate the word cloud",
        "code": "## We need to install and load some R-packages\ninstall.packages(\"wordcloud\")\nlibrary(wordcloud)\ninstall.packages(\"wordcloud2\")\nlibrary(wordcloud2)"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.6 worldcloud \u2013 PDF",
        "code": "set.seed(1234) # for reproducibility\nwordcloud(words = pdf_df_for_map$word, \n           freq = pdf_df_for_map$freq, \n       min.freq = 2,\n      max.words = 100, \n   random.order = FALSE, \n        rot.per = 0.35, \n         colors = brewer.pal(9, \"Set1\"))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.6 worldcloud \u2013 PDF",
        "code": "wordcloud2(data=pdf_df_for_map, size = 1, color = \"random-light\", backgroundColor = \"white\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.7 worldcloud \u2013 website",
        "code": "set.seed(1234) # for reproducibility\n\nwordcloud(words = url_df_for_map$word, \n           freq = url_df_for_map$freq, \n       min.freq = 2,\n      max.words = 100, \n   random.order = FALSE, \n         colors = brewer.pal(7, \"Accent\"))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.7 worldcloud \u2013 website",
        "code": "wordcloud2(data=url_df_for_map, size = 0.6, color='random-dark', shape = 'diamond', backgroundColor = \"grey\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.8 worldcloud \u2013 text",
        "code": "set.seed(1234) # for reproducibility\n\nwordcloud(words = text_df_for_map$word, \n           freq = text_df_for_map$freq, \n       min.freq = 2,\n      max.words = 100, \n   random.order = FALSE, \n        rot.per = 0.35, \n         colors = brewer.pal(7, \"Dark2\"))"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.8 worldcloud \u2013 text",
        "code": "wordcloud2(data=text_df_for_map, size = 0.7, color='random-dark', backgroundColor = \"black\")"
    },
    {
        "url": "https://corytophanes.github.io/BIO_BIT_Bioinformatics_209/miscellaneous.html",
        "section": "Session 32 \u2013 Miscellaneous",
        "subsection": "32.9 Miscellaneous",
        "code": "## PLACE HOLDER\nmtcars_data <- mtcars\n\n## PLACE HOLDER\nmtcars_names_vector <- rownames(mtcars_data)"
    }
]